// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  previewFeatures = ["views"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String   @unique @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String
  /// @TypeGraphQL.omit(input: true)
  roles     Role[]
  /// @TypeGraphQL.omit(output: true)
  password  String
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  language String @default("hr-HR")

  /// @TypeGraphQL.omit(output: true, input: true)
  companies     Company[]
  /// @TypeGraphQL.omit(output: true, input: true)
  events        EventLog[]
  /// @TypeGraphQL.omit(output: true, input: true)
  files         File[]
  /// @TypeGraphQL.omit(output: true, input: true)
  pressReleases PressRelease[]
  /// @TypeGraphQL.omit(output: true, input: true)
  images        Image[]
  /// @TypeGraphQL.omit(output: true, input: true)
  News          News[]

  /// @TypeGraphQL.omit(input: true)
  resume   Resume? @relation(fields: [resumeId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  resumeId Int?    @unique

  /// @TypeGraphQL.omit(input: true)
  reservations EventReservation[]

  /// @TypeGraphQL.omit(output: true, input: true)
  scannedEntries EntryResumeLog[]

  /// @TypeGraphQL.omit(output: true, input: true)
  passwordResets PasswordReset[]

  /// @TypeGraphQL.omit(output: true, input: true)
  gateGuardianEntryLog GateGuardianLog[] @relation("GateGuardianEntryLog")

  /// @TypeGraphQL.omit(output: true, input: true)
  gateGuardianScannedLog GateGuardianLog[] @relation("GateGuardianScannedLog")

  /// @TypeGraphQL.omit(output: true, input: true)
  scannedUsers CompanyScannedUser[]

  /// @TypeGraphQL.omit(output: true, input: true)
  UserCompanyComponentRatings UserCompanyComponentRating[]

  /// @TypeGraphQL.omit(output: true, input: true)
  LiveVote LiveVote[]

  /// @TypeGraphQL.omit(output: true, input: true)
  LiveVoteComment LiveVoteComment[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model PasswordReset {
  /// @TypeGraphQL.omit(output: true, input: true)
  id  Int    @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid String @unique @default(cuid())

  /// @TypeGraphQL.omit(input: true)
  forUser User @relation(fields: [userId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  userId  Int

  /// @TypeGraphQL.omit(input: true)
  usedAt DateTime?

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt
}

model Translation {
  key       String
  value     String
  language  String
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  @@unique([key, language])
  @@index([key, language])
}

model Role {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  name      String   @unique
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  users User[]
}

model Company {
  /// @TypeGraphQL.omit(output: true, input: true)
  id            Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid           String   @unique @default(cuid())
  vat           String   @unique
  legalName     String
  brandName     String
  address       String
  website       String
  instagram     String?
  facebook      String?
  linkedIn      String?
  /// @TypeGraphQL.omit(input: true)
  industry      Industry @relation(fields: [industryId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  vectorLogo    File?    @relation(fields: [vectorLogoId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  rasterLogo    Image?   @relation(fields: [rasterLogoId], references: [id])
  descriptionEn String
  descriptionHr String
  /// @TypeGraphQL.omit(input: true)
  createdAt     DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt     DateTime @default(now()) @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  members User[]

  /// @TypeGraphQL.omit(output: true, input: true)
  applications CompanyApplication[]

  /// @TypeGraphQL.omit(output: true, input: true)
  industryId Int

  /// @TypeGraphQL.omit(output: true, input: true)
  vectorLogoId Int?

  /// @TypeGraphQL.omit(output: true, input: true)
  rasterLogoId Int?

  /// @TypeGraphQL.omit(output: true, input: true)
  scannedResumes ScannedResume[]

  /// @TypeGraphQL.omit(output: true, input: true)
  favouriteResumes FavouriteResume[]

  /// @TypeGraphQL.omit(output: true, input: true)
  scannedUsers CompanyScannedUser[]

  /// @TypeGraphQL.omit(output: true, input: true)
  UserCompanyComponentRatings            UserCompanyComponentRating[]
  /// @TypeGraphQL.omit(output: true, input: true)
  UserCompanyComponentRatingAveragesView UserCompanyComponentRatingAveragesView[]
}

model Industry {
  /// @TypeGraphQL.omit(output: true, input: true)
  id      Int       @id @default(autoincrement())
  name    String    @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  company Company[]
}

model EventLog {
  /// @TypeGraphQL.omit(input: true)
  id   Int      @id @default(autoincrement())
  name String
  user User?    @relation(fields: [userId], references: [id])
  data String?
  /// @TypeGraphQL.omit(input: true)
  date DateTime @default(now())

  /// @TypeGraphQL.omit(output: true, input: true)
  userId Int?
}

model PressRelease {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String   @unique @default(cuid())
  title     String
  published DateTime
  file      File     @relation(fields: [fileId], references: [id])
  creator   User     @relation(fields: [creatorId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  creatorId Int
  /// @TypeGraphQL.omit(output: true, input: true)
  fileId    Int

  forSeason   Season? @relation(fields: [forSeasonId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int?
}

model File {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String   @unique @default(cuid())
  name      String
  size      Int
  etag      String
  mimeType  String
  /// @TypeGraphQL.omit(output: true, input: true)
  minioKey  String   @unique
  uploader  User     @relation(fields: [uploaderId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  // No polymorphism, workaround is this :(
  /// @TypeGraphQL.omit(output: true, input: true)
  forPressRelease PressRelease[]
  /// @TypeGraphQL.omit(output: true, input: true)
  forCompany      Company[]
  /// @TypeGraphQL.omit(output: true, input: true)
  forResume       Resume[]

  /// @TypeGraphQL.omit(output: true, input: true)
  uploaderId Int
}

model GalleryImage {
  /// @TypeGraphQL.omit(output: true, input: true)
  id      Int     @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid     String  @unique @default(cuid())
  name    String
  order   Int
  visible Boolean

  photo   Image @relation(fields: [photoId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  photoId Int
}

model Image {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int            @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String         @unique @default(cuid())
  uploader  User           @relation(fields: [uploaderId], references: [id])
  name      String
  original  ImageVariation @relation("ImageVariationOriginal", fields: [originalImageId], references: [id], onDelete: Cascade)
  full      ImageVariation @relation("ImageVariationFull", fields: [fullImageId], references: [id], onDelete: Cascade)
  thumb     ImageVariation @relation("ImageVariationThumb", fields: [thumbImageId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime       @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime       @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  uploaderId      Int
  /// @TypeGraphQL.omit(output: true, input: true)
  originalImageId Int
  /// @TypeGraphQL.omit(output: true, input: true)
  fullImageId     Int
  /// @TypeGraphQL.omit(output: true, input: true)
  thumbImageId    Int

  // No polymorphism, workaround is this :(
  /// @TypeGraphQL.omit(output: true, input: true)
  ApplicationPresenter ApplicationPresenter[]
  /// @TypeGraphQL.omit(output: true, input: true)
  Company              Company[]

  /// @TypeGraphQL.omit(output: true, input: true)
  Sponsor Sponsor[]

  /// @TypeGraphQL.omit(output: true, input: true)
  Partner Partner[]

  /// @TypeGraphQL.omit(output: true, input: true)
  News News[]

  /// @TypeGraphQL.omit(output: true, input: true)
  GalleryImage GalleryImage[]
}

model ImageVariation {
  /// @TypeGraphQL.omit(output: true, input: true)
  id       Int    @id @default(autoincrement())
  etag     String
  mimeType String
  /// @TypeGraphQL.omit(output: true, input: true)
  minioKey String @unique

  // No polymorphism, workaround is this :(
  /// @TypeGraphQL.omit(output: true, input: true)
  forOriginal Image[] @relation("ImageVariationOriginal")
  /// @TypeGraphQL.omit(output: true, input: true)
  forFull     Image[] @relation("ImageVariationFull")
  /// @TypeGraphQL.omit(output: true, input: true)
  forThumb    Image[] @relation("ImageVariationThumb")
}

model Season {
  /// @TypeGraphQL.omit(output: true, input: true)
  id                Int      @id @default(autoincrement())
  uid               String   @unique @default(cuid())
  name              String
  startsAt          DateTime
  endsAt            DateTime
  applicationsFrom  DateTime
  applicationsUntil DateTime

  applicationsEditableFrom  DateTime
  applicationsEditableUntil DateTime

  showParticipantsFrom  DateTime
  showParticipantsUntil DateTime

  showPartnersFrom  DateTime
  showPartnersUntil DateTime

  showSponsorsFrom  DateTime
  showSponsorsUntil DateTime

  eventFrom  DateTime
  eventUntil DateTime

  feedbackFrom  DateTime
  feedbackUntil DateTime

  scheduleFrom  DateTime
  scheduleUntil DateTime

  companies CompanyApplication[]
  sponsors  Sponsor[]
  partners  Partner[]

  calendar CalendarItem[]

  /// @TypeGraphQL.omit(input: true)
  pressReleases PressRelease[]

  /// @TypeGraphQL.omit(output: true, input: true)
  panel CompanyPanel?

  /// @TypeGraphQL.omit(output: true, input: true)
  scannedResumes ScannedResume[]

  /// @TypeGraphQL.omit(output: true, input: true)
  favouriteResumes FavouriteResume[]

  /// @TypeGraphQL.omit(output: true, input: true)
  entryLog EntryResumeLog[]

  /// @TypeGraphQL.omit(input: true)
  talkCategories ApplicationTalkCategory[]

  // @TypeGraphQL.omit(output: true, input: true)
  gateGuardianLog GateGuardianLog[]

  // @TypeGraphQL.omit(output: true, input: true)
  scannedUsers CompanyScannedUser[]

  /// @TypeGraphQL.omit(output: true, input: true)
  UserCompanyComponentRatings            UserCompanyComponentRating[]
  /// @TypeGraphQL.omit(output: true, input: true)
  UserCompanyComponentRatingAveragesView UserCompanyComponentRatingAveragesView[]

  /// @TypeGraphQL.omit(output: true, input: true)
  LiveVote LiveVote[]

  /// @TypeGraphQL.omit(output: true, input: true)
  LiveVoteComment             LiveVoteComment[]
  ApplicationCocktailCategory ApplicationCocktailCategory[]
}

model Sponsor {
  /// @TypeGraphQL.omit(output: true, input: true)
  id    Int    @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid   String @unique @default(cuid())
  name  String
  url   String
  order Int

  photo   Image @relation(fields: [photoId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  photoId Int

  forSeason   Season @relation(fields: [forSeasonId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int
}

model Partner {
  /// @TypeGraphQL.omit(output: true, input: true)
  id    Int    @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid   String @unique @default(cuid())
  name  String
  url   String
  order Int

  photo   Image @relation(fields: [photoId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  photoId Int

  forSeason   Season @relation(fields: [forSeasonId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int
}

model CompanyApplication {
  /// @TypeGraphQL.omit(output: true, input: true)
  id            Int                  @id @default(autoincrement())
  forCompany    Company              @relation(fields: [forCompanyId], references: [id])
  forSeason     Season               @relation(fields: [forSeasonId], references: [id])
  booth         String?
  talk          ApplicationTalk?
  workshop      ApplicationWorkshop?
  wantsPanel    Boolean
  wantsCocktail Boolean
  /// @TypeGraphQL.omit(input: true)
  createdAt     DateTime             @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt     DateTime             @updatedAt

  contactPerson   CompanyApplicationContactPerson? @relation(fields: [contactPersonId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  contactPersonId Int?                             @unique()

  panelParticipants ApplicationPresenter[]

  cocktail   ApplicationCocktailCategory?
  /// @TypeGraphQL.omit(output: true, input: true)
  cocktailId Int?                         @unique()

  approval CompanyApplicationApproval?

  /// @TypeGraphQL.omit(input: true)
  feedbackForm   Form? @relation(fields: [feedbackFormId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  feedbackFormId Int?

  /// @TypeGraphQL.omit(input: true)
  feedback CompanyApplicationFeedback?

  /// @TypeGraphQL.omit(output: true, input: true)
  forCompanyId Int

  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int

  panel   CompanyPanel? @relation(fields: [panelId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  panelId Int?

  @@unique([forCompanyId, forSeasonId])
}

model CompanyApplicationContactPerson {
  /// @TypeGraphQL.omit(output: true, input: true)
  id    Int    @id @default(autoincrement())
  name  String
  email String
  phone String

  /// @TypeGraphQL.omit(output: true, input: true)
  forApplication CompanyApplication?
}

model CompanyApplicationFeedback {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  /// @TypeGraphQL.omit(input: true)
  forApplication   CompanyApplication @relation(fields: [forApplicationId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forApplicationId Int                @unique

  dateRating   Int
  timeRating   Int
  dateComments String @default("")

  applicationRating   Int
  onsiteRating        Int
  foodRating          Int
  applicationComments String @default("")

  attendanceRating   Int
  mostLiked          Int
  experienceComments String @default("")

  overallRating  Int
  recommended    Int
  overallComment String @default("")
  testimonial    String @default("")

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt
}

model CompanyPanel {
  /// @TypeGraphQL.omit(output: true, input: true)
  id  Int    @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid String @unique @default(cuid())

  name        String
  description String @default("")

  companies CompanyApplication[]
  event     CalendarItem?

  /// @TypeGraphQL.omit(output: true, input: true)
  forSeason   Season @relation(fields: [forSeasonId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int    @unique
}

model CompanyApplicationApproval {
  /// @TypeGraphQL.omit(output: true, input: true)
  id                   Int     @id @default(autoincrement())
  booth                Boolean
  talkParticipants     Int
  workshopParticipants Int
  panel                Boolean
  cocktail             Boolean
  logoHidden           Boolean @default(false)

  /// @TypeGraphQL.omit(output: true, input: true)
  forApplication   CompanyApplication @relation(fields: [forApplicationId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forApplicationId Int                @unique()
}

model ApplicationTalk {
  /// @TypeGraphQL.omit(output: true, input: true)
  id             Int                     @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid            String                  @unique @default(cuid())
  titleEn        String
  titleHr        String
  descriptionEn  String
  descriptionHr  String
  /// @TypeGraphQL.omit(input: true)
  presenters     ApplicationPresenter[]
  category       ApplicationTalkCategory @relation(fields: [categoryId], references: [id])
  language       String
  /// @TypeGraphQL.omit(input: true)
  forApplication CompanyApplication      @relation(fields: [forApplicationId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(input: true)
  createdAt      DateTime                @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt      DateTime                @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  forApplicationId Int @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  categoryId       Int

  event CalendarItem?
}

model ApplicationTalkCategory {
  /// @TypeGraphQL.omit(output: true, input: true)
  id   Int    @id @default(autoincrement())
  name String

  /// @TypeGraphQL.omit(input: true)
  talks ApplicationTalk[]

  forSeason   Season? @relation(fields: [forSeasonId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int?

  @@unique([forSeasonId, name])
}

model ApplicationCocktailCategory {
  /// @TypeGraphQL.omit(output: true, input: true)
  id          Int    @id @default(autoincrement())
  name        String
  colour      String
  ingredients String

  /// @TypeGraphQL.omit(input: true)
  forApplication CompanyApplication? @relation(fields: [forApplicationId], references: [id])

  forSeason        Season? @relation(fields: [forSeasonId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  forApplicationId Int?     @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId      Int?

  @@unique([forSeasonId, name])
}

model ApplicationPresenter {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  bioEn     String
  bioHr     String
  photo     Image?   @relation(fields: [photoId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  /// @TypeGraphQL.omit(input: true)
  forTalks     ApplicationTalk[]
  /// @TypeGraphQL.omit(input: true)
  forWorkshops ApplicationWorkshop[]
  /// @TypeGraphQL.omit(output: true, input: true)
  forPanels    CompanyApplication[]

  /// @TypeGraphQL.omit(output: true, input: true)
  photoId Int?
}

model ApplicationWorkshop {
  /// @TypeGraphQL.omit(output: true, input: true)
  id             Int                    @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid            String                 @unique @default(cuid())
  titleEn        String
  titleHr        String
  descriptionEn  String
  descriptionHr  String
  notesEn        String
  notesHr        String
  goal           String
  /// @TypeGraphQL.omit(input: true)
  presenters     ApplicationPresenter[]
  language       String
  /// @TypeGraphQL.omit(input: true)
  forApplication CompanyApplication     @relation(fields: [forApplicationId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(input: true)
  createdAt      DateTime               @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt      DateTime               @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  forApplicationId Int @unique

  event CalendarItem?
}

model Resume {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String   @unique @default(cuid())
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  faculty ResumeFaculty?

  technologies ResumeTechnology[]

  interests ResumeInterest[]

  studyYears ResumeStudyYear[]

  city String

  workExperiences ResumeWorkExperience[]

  projects ResumeProject[]

  volunteerExperiences ResumeVolunteerExperience[]

  extraField String @default("")

  /// @TypeGraphQL.omit(input: true)
  cv   File? @relation(fields: [cvId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  cvId Int?

  /// @TypeGraphQL.omit(input: true)
  user User?

  /// @TypeGraphQL.omit(output: true, input: true)
  scannedResumes ScannedResume[]

  /// @TypeGraphQL.omit(output: true, input: true)
  favouriteResumes FavouriteResume[]

  /// @TypeGraphQL.omit(output: true, input: true)
  entryLog EntryResumeLog[]
}

model ResumeFaculty {
  /// @TypeGraphQL.omit(output: true, input: true)
  id             Int    @id @default(autoincrement())
  name           String
  specialization String @default("")
  module         String @default("")

  /// @TypeGraphQL.omit(output: true, input: true)
  forResume   Resume @relation(fields: [forResumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forResumeId Int    @unique
}

model ResumeTechnology {
  /// @TypeGraphQL.omit(output: true, input: true)
  id   Int    @id @default(autoincrement())
  name String @unique

  /// @TypeGraphQL.omit(output: true, input: true)
  resumes Resume[]
}

model ResumeInterest {
  /// @TypeGraphQL.omit(output: true, input: true)
  id   Int    @id @default(autoincrement())
  name String @unique

  /// @TypeGraphQL.omit(output: true, input: true)
  resumes Resume[]
}

model ResumeWorkExperience {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  position String
  company  String

  start DateTime  @db.Date
  until DateTime? @db.Date

  /// @TypeGraphQL.omit(output: true, input: true)
  forResume   Resume @relation(fields: [forResumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forResumeId Int
}

model ResumeProject {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  position String
  project  String

  start DateTime  @db.Date
  until DateTime? @db.Date

  /// @TypeGraphQL.omit(output: true, input: true)
  forResume   Resume @relation(fields: [forResumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forResumeId Int
}

model ResumeVolunteerExperience {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  position     String
  organisation String

  start DateTime  @db.Date
  until DateTime? @db.Date

  /// @TypeGraphQL.omit(output: true, input: true)
  forResume   Resume @relation(fields: [forResumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forResumeId Int
}

model ResumeStudyYear {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  studyType String
  studyYear Int

  /// @TypeGraphQL.omit(output: true, input: true)
  forResume   Resume @relation(fields: [forResumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forResumeId Int
}

model CalendarItem {
  /// @TypeGraphQL.omit(output: true, input: true)
  id  Int    @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid String @unique @default(cuid())

  start DateTime
  end   DateTime

  title    String?
  location String?
  type     String?
  text     String?
  grouped  Boolean @default(true)

  forSeason   Season @relation(fields: [forSeasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int

  /// @TypeGraphQL.omit(output: true, input: true)
  forTalk   ApplicationTalk? @relation(fields: [forTalkId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forTalkId Int?             @unique

  /// @TypeGraphQL.omit(output: true, input: true)
  forWorkshop   ApplicationWorkshop? @relation(fields: [forWorkshopId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forWorkshopId Int?                 @unique

  /// @TypeGraphQL.omit(output: true, input: true)
  forPanel   CompanyPanel? @relation(fields: [forPanelId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forPanelId Int?          @unique
}

model EventReservation {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  userId Int

  status    Int
  eventId   Int
  eventType String

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  @@unique([eventId, eventType, userId])
  @@index([userId])
}

model CompanyScannedUser {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  note      String?
  isStarred Boolean @default(false)

  /// @TypeGraphQL.omit(input: true)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  userId Int

  /// @TypeGraphQL.omit(input: true)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  companyId Int

  /// @TypeGraphQL.omit(input: true)
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  seasonId Int

  scannedAt DateTime @default(now())

  @@unique([userId, companyId])
}

model ScannedResume {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  /// @TypeGraphQL.omit(input: true)
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  resumeId Int

  /// @TypeGraphQL.omit(input: true)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  companyId Int

  /// @TypeGraphQL.omit(input: true)
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  seasonId Int

  /// @TypeGraphQL.omit(input: true)
  scannedAt DateTime @default(now())

  @@unique([companyId, resumeId])
}

model FavouriteResume {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  /// @TypeGraphQL.omit(input: true)
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  resumeId Int

  /// @TypeGraphQL.omit(input: true)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  companyId Int

  /// @TypeGraphQL.omit(input: true)
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  seasonId Int

  @@unique([companyId, resumeId])
}

model EntryResumeLog {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  event   String?
  eventId Int?

  /// @TypeGraphQL.omit(input: true)
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  resumeId Int

  /// @TypeGraphQL.omit(input: true)
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  seasonId Int

  /// @TypeGraphQL.omit(input: true)
  scannedBy   User @relation(fields: [scannedById], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  scannedById Int

  /// @TypeGraphQL.omit(input: true)
  scannedAt DateTime @default(now())
}

model GateGuardianLog {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  eventType String
  eventId   Int

  /// @TypeGraphQL.omit(input: true)
  forUser   User @relation(fields: [forUserId], references: [id], name: "GateGuardianEntryLog", onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forUserId Int

  /// @TypeGraphQL.omit(input: true)
  forSeason   Season @relation(fields: [forSeasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int

  /// @TypeGraphQL.omit(input: true)
  scannedBy   User @relation(fields: [scannedById], references: [id], name: "GateGuardianScannedLog", onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  scannedById Int

  /// @TypeGraphQL.omit(input: true)
  scannedAt DateTime @default(now())
}

model Form {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  name String

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  options Json @default("{}")

  questions          FormQuestion[]
  CompanyApplication CompanyApplication[]
}

model FormQuestion {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  form   Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  formId Int

  options Json @default("{}")
  order   Int

  /// @TypeGraphQL.omit(output: true, input: true)
  answers FormAnswers[]
}

model FormAnswers {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  formQuestionId Int

  answer Json @default("{}")

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt
}

model News {
  /// @TypeGraphQL.omit(output: true, input: true)
  id  Int    @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid String @unique @default(cuid())

  lang String
  date DateTime

  /// @TypeGraphQL.omit(input: true)
  slug String @unique

  /// @TypeGraphQL.omit(input: true)
  photo   Image @relation(fields: [photoId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  photoId Int

  title       String
  description String
  content     String

  /// @TypeGraphQL.omit(input: true)
  author   User @relation(fields: [authorId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  authorId Int

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt
}

model UserCompanyComponentRating {
  /// @TypeGraphQL.omit(output: true, input: true)
  id Int @id @default(autoincrement())

  component String
  rating    Int
  comment   String?

  /// @TypeGraphQL.omit(input: true)
  forUser   User @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forUserId Int

  /// @TypeGraphQL.omit(input: true)
  forCompany   Company @relation(fields: [forCompanyId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forCompanyId Int

  /// @TypeGraphQL.omit(input: true)
  forSeason   Season @relation(fields: [forSeasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt
}

view UserCompanyComponentRatingAveragesView {
  component   String
  ratingAvg   Float
  ratingCount Int

  /// @TypeGraphQL.omit(input: true)
  forCompany   Company @relation(fields: [forCompanyId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forCompanyId Int

  /// @TypeGraphQL.omit(input: true)
  forSeason   Season @relation(fields: [forSeasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int

  @@unique([forSeasonId, forCompanyId, component])
}

model LiveVote {
  option String

  /// @TypeGraphQL.omit(input: true)
  forUser   User @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forUserId Int

  /// @TypeGraphQL.omit(input: true)
  forSeason   Season @relation(fields: [forSeasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  @@unique([forSeasonId, forUserId])
}

model LiveVoteComment {
  id Int @id @default(autoincrement())

  comment String

  /// @TypeGraphQL.omit(input: true)
  forUser   User @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forUserId Int

  /// @TypeGraphQL.omit(input: true)
  forSeason   Season @relation(fields: [forSeasonId], references: [id], onDelete: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  forSeasonId Int

  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt
}

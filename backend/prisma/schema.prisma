// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// @TypeGraphQL.omit(output: true, input: true)
  id             Int           @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid            String        @unique @default(cuid())
  email          String        @unique
  firstName      String
  lastName       String
  phone          String
  /// @TypeGraphQL.omit(output: true, input: true)
  usersRoles     UserRole[]
  /// @TypeGraphQL.omit(output: true, input: true)
  usersCompanies UserCompany[]
  /// @TypeGraphQL.omit(output: true)
  password       String
  /// @TypeGraphQL.omit(input: true)
  createdAt      DateTime      @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt      DateTime      @updatedAt
  /// @TypeGraphQL.omit(output: true, input: true)
  events         EventLog[]
}

model Translation {
  key       String
  value     String
  language  String
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  @@unique([key, language])
  @@index([key, language])
}

model Role {
  /// @TypeGraphQL.omit(output: true, input: true)
  id         Int        @id @default(autoincrement())
  name       String     @unique
  /// @TypeGraphQL.omit(input: true)
  createdAt  DateTime   @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt  DateTime   @updatedAt
  /// @TypeGraphQL.omit(output: true, input: true)
  usersRoles UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
  @@index([roleId])
}

model Company {
  /// @TypeGraphQL.omit(output: true, input: true)
  id             Int           @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid            String        @unique @default(cuid())
  vat            String        @unique
  legalName      String
  brandName      String
  address        String
  website        String
  /// @TypeGraphQL.omit(input: true)
  industry       Industry      @relation(fields: [industryId], references: [id])
  descriptionEn  String
  descriptionHr  String
  /// @TypeGraphQL.omit(output: true, input: true)
  usersCompanies UserCompany[]

  /// @TypeGraphQL.omit(output: true, input: true)
  industryId Int
}

model Industry {
  /// @TypeGraphQL.omit(output: true, input: true)
  id      Int       @id @default(autoincrement())
  name    String    @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  company Company[]
}

model UserCompany {
  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  userId    Int
  companyId Int

  @@id([userId, companyId])
  @@index([companyId])
}

model EventLog {
  /// @TypeGraphQL.omit(output: true, input: true)
  id   Int      @id @default(autoincrement())
  name String
  user User?    @relation(fields: [userId], references: [id])
  data String?
  /// @TypeGraphQL.omit(input: true)
  date DateTime @default(now())

  /// @TypeGraphQL.omit(output: true, input: true)
  userId Int?
}

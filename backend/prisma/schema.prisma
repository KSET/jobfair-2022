// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String   @unique @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String
  /// @TypeGraphQL.omit(input: true)
  roles     Role[]
  /// @TypeGraphQL.omit(output: true)
  password  String
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt


  /// @TypeGraphQL.omit(output: true, input: true)
  companies     Company[]
  /// @TypeGraphQL.omit(output: true, input: true)
  events        EventLog[]
  /// @TypeGraphQL.omit(output: true, input: true)
  files         File[]
  /// @TypeGraphQL.omit(output: true, input: true)
  pressReleases PressRelease[]
  /// @TypeGraphQL.omit(output: true, input: true)
  images        Image[]
}

model Translation {
  key       String
  value     String
  language  String
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  @@unique([key, language])
  @@index([key, language])
}

model Role {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  name      String   @unique
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  users User[]
}

model Company {
  /// @TypeGraphQL.omit(output: true, input: true)
  id            Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid           String   @unique @default(cuid())
  vat           String   @unique
  legalName     String
  brandName     String
  address       String
  website       String
  /// @TypeGraphQL.omit(input: true)
  industry      Industry @relation(fields: [industryId], references: [id])
  descriptionEn String
  descriptionHr String

  /// @TypeGraphQL.omit(output: true, input: true)
  members User[]

  /// @TypeGraphQL.omit(output: true, input: true)
  industryId Int
}

model Industry {
  /// @TypeGraphQL.omit(output: true, input: true)
  id      Int       @id @default(autoincrement())
  name    String    @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  company Company[]
}

model EventLog {
  /// @TypeGraphQL.omit(output: true, input: true)
  id   Int      @id @default(autoincrement())
  name String
  user User?    @relation(fields: [userId], references: [id])
  data String?
  /// @TypeGraphQL.omit(input: true)
  date DateTime @default(now())

  /// @TypeGraphQL.omit(output: true, input: true)
  userId Int?
}

model PressRelease {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String   @unique @default(cuid())
  title     String
  published DateTime
  file      File     @relation(fields: [fileId], references: [id])
  creator   User     @relation(fields: [creatorId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  creatorId Int
  /// @TypeGraphQL.omit(output: true, input: true)
  fileId    Int
}

model File {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int      @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String   @unique @default(cuid())
  name      String
  size      Int
  etag      String
  mimeType  String
  /// @TypeGraphQL.omit(output: true, input: true)
  minioKey  String   @unique
  uploader  User     @relation(fields: [uploaderId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime @updatedAt

  // No polymorphism, workaround is this :(
  /// @TypeGraphQL.omit(output: true, input: true)
  forPressRelease PressRelease[]

  /// @TypeGraphQL.omit(output: true, input: true)
  uploaderId Int
}

model Image {
  /// @TypeGraphQL.omit(output: true, input: true)
  id        Int            @id @default(autoincrement())
  /// @TypeGraphQL.omit(input: true)
  uid       String         @unique @default(cuid())
  uploader  User           @relation(fields: [uploaderId], references: [id])
  name      String
  original  ImageVariation @relation("ImageVariationOriginal", fields: [originalImageId], references: [id])
  full      ImageVariation @relation("ImageVariationFull", fields: [fullImageId], references: [id])
  thumb     ImageVariation @relation("ImageVariationThumb", fields: [thumbImageId], references: [id])
  /// @TypeGraphQL.omit(input: true)
  createdAt DateTime       @default(now())
  /// @TypeGraphQL.omit(input: true)
  updatedAt DateTime       @updatedAt

  /// @TypeGraphQL.omit(output: true, input: true)
  uploaderId      Int
  /// @TypeGraphQL.omit(output: true, input: true)
  originalImageId Int
  /// @TypeGraphQL.omit(output: true, input: true)
  fullImageId     Int
  /// @TypeGraphQL.omit(output: true, input: true)
  thumbImageId    Int
}

model ImageVariation {
  /// @TypeGraphQL.omit(output: true, input: true)
  id       Int    @id @default(autoincrement())
  etag     String
  mimeType String
  /// @TypeGraphQL.omit(output: true, input: true)
  minioKey String @unique

  // No polymorphism, workaround is this :(
  /// @TypeGraphQL.omit(output: true, input: true)
  forOriginal Image[] @relation("ImageVariationOriginal")
  /// @TypeGraphQL.omit(output: true, input: true)
  forFull     Image[] @relation("ImageVariationFull")
  /// @TypeGraphQL.omit(output: true, input: true)
  forThumb    Image[] @relation("ImageVariationThumb")
}

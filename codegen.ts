import {
 join as pathJoin,
} from "node:path";
import {
 type CodegenConfig,
} from "@graphql-codegen/cli";

const graphqlDir = pathJoin(__dirname, "graphql");

const inGraphqlDir = (...pathParts: string[]) =>
  pathJoin(graphqlDir, ...pathParts);

const GENERATED_FILES_HEADER = `
/**
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * DO NOT EDIT THIS FILE MANUALLY!
 *
 * This file is automatically generated
 * by running \`yarn graphql:schema:gen\`
 *
 * Any edits done to this file will be
 * overwritten on subsequent runs!
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */
`.trim();

export default {
  overwrite: true,
  schema: inGraphqlDir("schema.graphql"),
  documents: [
    "./graphql/documents/**/*.graphql",
    "./pages/calendar/**/*.vue",
    "./pages/profile/me/reservations/**/*.vue",
    "./pages/admin/season/*.vue",
    "./pages/admin/season/[season]/applications/approval.vue",
    "./pages/participants.vue",
    "./pages/gate-guardian/**/*.vue",
    "./pages/admin/users/scanners.vue",
    "./pages/profile/me/company/scan-user-qr.vue",
    "./pages/profile/me/company/scans/**/*.vue",
    "./store/**/*.ts",
    "./pages/admin/season/[season]/reservations/scanned.vue",
    "./pages/profile/me/company/signup.vue",
    "./pages/admin/season/[season]/applications/[company]/edit.vue",
    "./pages/admin/season/[season]/ratings/**/*.vue",
    "./pages/company/[uid]/rate/**/*.vue",
  ],
  generates: {
    [inGraphqlDir("schema.ts")]: {
      plugins: [
        {
          add: {
            content: "/* eslint-disable */",
          },
        },
        {
          add: {
            content: GENERATED_FILES_HEADER,
          },
        },
        "typescript",
        "typescript-operations",
        "typescript-resolvers",
        "typescript-document-nodes",
      ],
    },
    [inGraphqlDir("client/")]: {
      preset: "client",
      plugins: [
        {
          add: {
            content: "/* eslint-disable */",
          },
        },
        {
          add: {
            content: GENERATED_FILES_HEADER,
          },
        },
      ],
    },
  },
  config: {
    typesPrefix: "I",
    declarationKind: "type",
    skipTypename: true,
    useTypeImports: true,
    strictScalars: true,
    scalars: {
      DateTimeISO: "string | Date",
      Upload: "unknown",
    },
    dedupeFragments: true,
    extractAllFieldsToTypes: true,
    // immutableTypes: true,
  },
} satisfies CodegenConfig;

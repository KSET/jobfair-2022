/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query ComponentAdminSeasonRatingsCompaniesCompanyComments_Data($seasonUid: String!, $companyUid: String!) {\n      companyComponentAverageRatings(seasonUid: $seasonUid, companyUid: $companyUid) {\n        component\n        averageRating\n        comments\n      }\n    }\n    ": types.ComponentAdminSeasonRatingsCompaniesCompanyComments_DataDocument,
    "mutation Login($password: String!, $identifier: String!) {\n  login(password: $password, identifier: $identifier) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation Register($info: UserRegisterInput!) {\n  register(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation Logout {\n  logout\n}\n\nmutation RequestPasswordReset($identifier: String!) {\n  requestPasswordReset(identifier: $identifier)\n}\n\nmutation CheckPasswordReset($token: String!) {\n  checkPasswordReset(token: $token) {\n    firstName\n    lastName\n    email\n  }\n}\n\nmutation UsePasswordReset($info: PasswordResetUseInput!) {\n  usePasswordReset(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity\n  }\n}\n\nmutation RequestPasswordResetFor($uid: String!) {\n  requestPasswordResetFor(uid: $uid)\n}\n\nmutation UpdateTranslation($data: TranslationCreateInput!) {\n  updateTranslation(data: $data) {\n    key\n    value\n    language\n  }\n}\n\nmutation UpdateProfile($info: UserCreateInput!) {\n  updateProfile(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation UpdateUser($uid: String!, $info: UserUpdateInput!) {\n  updateUser(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation UpdatePassword($currentPassword: String!, $newPassword: String!, $newPasswordRepeat: String!) {\n  updatePassword(\n    currentPassword: $currentPassword\n    newPassword: $newPassword\n    newPasswordRepeat: $newPasswordRepeat\n  ) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation ValidateVat($vat: String!) {\n  validateVat(vat: $vat) {\n    valid\n    exists\n    info {\n      address\n      legalName\n      vat\n    }\n  }\n}\n\nmutation CreateIndustry($name: String!) {\n  createIndustry(name: $name) {\n    name\n  }\n}\n\nmutation RenameIndustry($oldName: String!, $newName: String!) {\n  renameIndustry(oldName: $oldName, newName: $newName) {\n    name\n  }\n}\n\nmutation CreateTalkCategory($name: String!, $season: String!) {\n  createTalkCategory(name: $name, season: $season) {\n    name\n  }\n}\n\nmutation RenameTalkCategory($oldName: String!, $newName: String!, $season: String!) {\n  renameTalkCategory(oldName: $oldName, newName: $newName, season: $season) {\n    name\n  }\n}\n\nmutation CreateCocktailType($type: String!, $season: String!) {\n  createCocktailType(type: $type, season: $season) {\n    type\n  }\n}\n\nmutation RenameCocktailType($oldCocktailType: String!, $newCocktailType: String!, $season: String!) {\n  renameCocktailType(\n    oldCocktailType: $oldCocktailType\n    newCocktailType: $newCocktailType\n    season: $season\n  ) {\n    type\n  }\n}\n\nmutation RegisterCompany($info: CreateCompanyInput!) {\n  registerCompany(info: $info) {\n    errors {\n      message\n      field\n    }\n    entity {\n      uid\n      vat\n      legalName\n      address\n      brandName\n      descriptionEn\n      descriptionHr\n      industry {\n        name\n      }\n    }\n  }\n}\n\nmutation UpdateCompanyInfo($info: CreateCompanyInput!) {\n  updateCompanyInfo(info: $info) {\n    errors {\n      message\n      field\n    }\n    entity {\n      uid\n      vat\n      legalName\n      address\n      brandName\n      descriptionEn\n      descriptionHr\n      industry {\n        name\n      }\n    }\n  }\n}\n\nmutation CreatePressRelease($info: PressReleaseWithFilesCreateInput!) {\n  createPressRelease(info: $info) {\n    entity {\n      title\n      published\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation UpdatePressRelease($uid: String!, $info: PressReleaseWithFilesCreateInput!) {\n  updatePressRelease(uid: $uid, info: $info) {\n    entity {\n      title\n      published\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation EditApprovedCompanyApplication($info: CompanyApplicationApprovedEditInput!) {\n  editApprovedCompanyApplication(info: $info) {\n    entity {\n      talk {\n        uid\n      }\n      workshop {\n        uid\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation UpdateResume($info: ResumeCreateInput!) {\n  updateResume(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation CreateNews($info: NewsCreateInput!) {\n  createNews(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      slug\n    }\n  }\n}\n\nmutation EditNews($uid: String!, $info: NewsCreateInput!) {\n  editNews(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      ...frag_News\n    }\n  }\n}\n\nmutation DeleteNews($uid: String!) {\n  deleteNews(uid: $uid)\n}\n\nmutation CreateGalleryImage($info: GalleryImageCreateInput!) {\n  createGalleryImage(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation EditGalleryImage($uid: String!, $info: GalleryImageCreateInput!) {\n  editGalleryImage(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      ...frag_GalleryImage\n    }\n  }\n}\n\nmutation DeleteGalleryImage($uid: String!) {\n  deleteGalleryImage(uid: $uid)\n}": types.LoginDocument,
    "fragment frag_Season on Season {\n  uid\n  name\n  startsAt\n  endsAt\n  applicationsFrom\n  applicationsUntil\n  applicationsEditableFrom\n  applicationsEditableUntil\n  showParticipantsFrom\n  showParticipantsUntil\n  showPartnersFrom\n  showPartnersUntil\n  showSponsorsFrom\n  showSponsorsUntil\n  eventFrom\n  eventUntil\n  feedbackFrom\n  feedbackUntil\n  scheduleFrom\n  scheduleUntil\n}\n\nfragment frag_UserProfile on User {\n  uid\n  name\n  firstName\n  lastName\n  email\n  phone\n  language\n  roles {\n    name\n  }\n  companies {\n    uid\n    vat\n    legalName\n    brandName\n    address\n    website\n    instagram\n    facebook\n    linkedIn\n    descriptionEn\n    descriptionHr\n    industry {\n      name\n    }\n  }\n}\n\nfragment frag_ApplicationPresenter on ApplicationPresenter {\n  firstName\n  lastName\n  bioHr\n  bioEn\n  photo {\n    name\n    uid\n    full {\n      mimeType\n    }\n  }\n}\n\nfragment frag_AllFeedback on CompanyApplicationFeedback {\n  applicationComments\n  applicationRating\n  attendanceRating\n  dateComments\n  dateRating\n  experienceComments\n  foodRating\n  mostLiked\n  onsiteRating\n  overallComment\n  overallRating\n  recommended\n  testimonial\n  timeRating\n  createdAt\n  updatedAt\n}\n\nfragment frag_CompanyApplication on CompanyApplication {\n  booth\n  wantsPanel\n  wantsCocktail\n  contactPerson {\n    name\n    email\n    phone\n  }\n  talk {\n    titleEn\n    titleHr\n    descriptionEn\n    descriptionHr\n    language\n    category {\n      name\n    }\n    presenters {\n      ...frag_ApplicationPresenter\n    }\n  }\n  workshop {\n    titleEn\n    titleHr\n    descriptionEn\n    descriptionHr\n    language\n    goal\n    notesEn\n    notesHr\n    presenters {\n      ...frag_ApplicationPresenter\n    }\n  }\n  cocktail {\n    name\n    type {\n      type\n    }\n  }\n  panelParticipants {\n    ...frag_ApplicationPresenter\n  }\n  approval {\n    cocktail\n    panel\n    talkParticipants\n    workshopParticipants\n    booth\n  }\n  feedback {\n    ...frag_AllFeedback\n  }\n}\n\nfragment frag_Company on Company {\n  uid\n  legalName\n  brandName\n  descriptionEn\n  descriptionHr\n  address\n  vat\n  website\n  instagram\n  facebook\n  linkedIn\n  industry {\n    name\n  }\n}\n\nfragment frag_News on News {\n  lang\n  slug\n  date\n  photo {\n    thumbUrl\n    fullUrl\n  }\n  title\n  description\n  content\n}\n\nfragment frag_GalleryImage on GalleryImage {\n  uid\n  name\n  order\n  visible\n  photo {\n    thumbUrl\n    fullUrl\n  }\n}\n\nquery Profile {\n  profile {\n    ...frag_UserProfile\n  }\n}\n\nquery TranslationsFor($language: String!) {\n  allTranslationsFor(language: $language) {\n    key\n    value\n  }\n}\n\nquery InitialData($language: String!) {\n  profile {\n    ...frag_UserProfile\n  }\n  allTranslationsFor(language: $language) {\n    key\n    value\n  }\n  currentSeason {\n    ...frag_Season\n  }\n}\n\nquery PageIndexData($language: String!) {\n  sponsors {\n    name\n    url\n    photo {\n      thumbUrl\n      fullUrl\n    }\n  }\n  partners {\n    name\n    url\n    photo {\n      thumbUrl\n      fullUrl\n    }\n  }\n  news(lang: $language, filter: {take: 3}) {\n    ...frag_News\n  }\n  galleryImages(filter: {take: 6}) {\n    ...frag_GalleryImage\n  }\n}\n\nquery Company($vat: String!) {\n  company(vat: $vat) {\n    ...frag_Company\n  }\n}\n\nquery CompanyInfo($uid: String!) {\n  companyInfo(uid: $uid) {\n    uid\n    brandName\n    descriptionEn\n    descriptionHr\n    website\n    instagram\n    facebook\n    linkedIn\n    rasterLogo {\n      thumbUrl\n      fullUrl\n    }\n    program {\n      booth\n      talk {\n        uid\n        titleHr\n        titleEn\n        descriptionHr\n        descriptionEn\n        language\n        reservation\n        presenters {\n          bioHr\n          bioEn\n          firstName\n          lastName\n          photo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n      workshop {\n        uid\n        titleHr\n        titleEn\n        descriptionHr\n        descriptionEn\n        language\n        notesHr\n        notesEn\n        reservation\n        presenters {\n          firstName\n          lastName\n          bioHr\n          bioEn\n          photo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n      panelParticipants {\n        firstName\n        lastName\n        bioHr\n        bioEn\n        photo {\n          thumbUrl\n          fullUrl\n        }\n      }\n      panel {\n        uid\n        name\n        description\n        reservation\n        companies {\n          uid\n          brandName\n          rasterLogo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n    }\n  }\n}\n\nquery Industries {\n  industries {\n    name\n  }\n}\n\nquery TalkCategories($season: String) {\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n}\n\nquery CocktailTypes($season: String) {\n  cocktailTypes(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    type\n  }\n}\n\nquery AvailableCocktailTypes($season: String) {\n  availableCocktailTypes(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    type\n  }\n}\n\nquery PressRelease($uid: String!) {\n  pressRelease(uid: $uid) {\n    title\n    published\n    file {\n      name\n      mimeType\n      uid\n    }\n    forSeason {\n      uid\n      name\n    }\n  }\n}\n\nquery PressReleases($season: String) {\n  pressReleases(\n    orderBy: {published: desc}\n    where: {forSeason: {is: {uid: {equals: $season}}}}\n  ) {\n    uid\n    title\n    published\n    file {\n      uid\n    }\n    forSeason {\n      uid\n      name\n    }\n  }\n}\n\nquery AllNews($filter: NewsFilter) {\n  allNews(filter: $filter) {\n    uid\n    ...frag_News\n  }\n}\n\nquery News($lang: String!, $filter: NewsFilter) {\n  news(lang: $lang, filter: $filter) {\n    ...frag_News\n  }\n}\n\nquery NewsItem($slug: String!, $lang: String!, $filter: NewsFilter) {\n  newsItem(slug: $slug) {\n    ...frag_News\n  }\n  news(lang: $lang, filter: $filter) {\n    ...frag_News\n  }\n}\n\nquery NewsItemByUid($uid: String!) {\n  newsItemByUid(uid: $uid) {\n    ...frag_News\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery GalleryImages($filter: GalleryImageFilter) {\n  galleryImages(filter: $filter) {\n    ...frag_GalleryImage\n  }\n}\n\nquery AllGalleryImages {\n  allGalleryImages {\n    ...frag_GalleryImage\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery GalleryImagItemByUid($uid: String!) {\n  galleryImageItemByUid(uid: $uid) {\n    ...frag_GalleryImage\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery AdminInitialData {\n  industries {\n    name\n  }\n  seasons(orderBy: {endsAt: desc}) {\n    ...frag_Season\n  }\n}\n\nquery AdminCompanyApplication($company: String!, $season: String!) {\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n  booths {\n    name\n    key\n  }\n  companyApplicationFor(company: $company, season: $season) {\n    ...frag_CompanyApplication\n    forCompany {\n      ...frag_Company\n    }\n  }\n}\n\nquery AdminCompanyApplications($season: String!) {\n  industries {\n    name\n  }\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n  booths {\n    key\n    name\n  }\n  companyApplications(season: $season) {\n    wantsCocktail\n    wantsPanel\n    booth\n    talk {\n      language\n      titleEn\n      category {\n        name\n      }\n    }\n    workshop {\n      language\n      titleEn\n    }\n    forCompany {\n      uid\n      brandName\n      industry {\n        name\n      }\n    }\n    forSeason {\n      uid\n    }\n  }\n}\n\nquery CurrentCompanyApplication {\n  talkCategories {\n    name\n  }\n  availableCocktailTypes {\n    type\n  }\n  booths {\n    name\n    key\n  }\n  companyApplication {\n    ...frag_CompanyApplication\n  }\n}\n\nquery MyResume {\n  profile {\n    resume {\n      uid\n      updatedAt\n      city\n      cv {\n        url\n        name\n        mimeType\n      }\n      faculty {\n        name\n        module\n        specialization\n      }\n      interests\n      technologies\n      projects {\n        project\n        position\n        start\n        until\n      }\n      volunteerExperiences {\n        organisation\n        position\n        start\n        until\n      }\n      workExperiences {\n        company\n        position\n        start\n        until\n      }\n      studyYears {\n        studyType\n        studyYear\n      }\n      extraField\n    }\n  }\n}\n\nquery Resume($uid: String!) {\n  resume(uid: $uid) {\n    uid\n    faculty {\n      name\n      module\n    }\n    user {\n      name\n      email\n      phone\n    }\n    studyYears {\n      studyYear\n      studyType\n    }\n    projects {\n      project\n      position\n      start\n      until\n    }\n    technologies\n    interests\n    city\n    cv {\n      url\n    }\n    volunteerExperiences {\n      organisation\n      position\n      start\n      until\n    }\n    workExperiences {\n      company\n      position\n      start\n      until\n    }\n    extraField\n  }\n  resumeIsFavourite(uid: $uid)\n}\n\nquery ProfileBaseData {\n  booths {\n    key\n    name\n  }\n  companyApplication {\n    workshop {\n      titleEn\n    }\n    talk {\n      titleEn\n    }\n    booth\n    wantsPanel\n    wantsCocktail\n    approval {\n      booth\n      workshopParticipants\n      talkParticipants\n      panel\n      cocktail\n    }\n    userApplications {\n      workshop\n      talk\n    }\n  }\n  profile {\n    resume {\n      uid\n    }\n  }\n  calendar {\n    uid\n    title\n    forWorkshop {\n      uid\n      titleHr\n      titleEn\n      descriptionHr\n      descriptionEn\n      reservation\n    }\n    forTalk {\n      uid\n      titleHr\n      titleEn\n      descriptionHr\n      descriptionEn\n      reservation\n    }\n    forPanel {\n      uid\n      name\n      description\n      reservation\n    }\n  }\n  currentSeason {\n    ...frag_Season\n    companyComponentAverageRatings {\n      component\n      averageRating\n    }\n  }\n}\n\nquery AdminFeedbackInfo($seasonUid: String!) {\n  companyApplications(\n    season: $seasonUid\n    orderBy: {forCompany: {brandName: desc}}\n  ) {\n    forCompany {\n      uid\n      brandName\n    }\n    feedback {\n      ...frag_AllFeedback\n    }\n  }\n}\n\nquery PageAdminSeasonScheduleBase($seasonUid: String!) {\n  participants(season: $seasonUid) {\n    uid\n    brandName\n    program {\n      talk {\n        uid\n        event {\n          uid\n          type\n          title\n          start\n          end\n          location\n          text\n          grouped\n        }\n      }\n      workshop {\n        uid\n        event {\n          uid\n          type\n          title\n          start\n          end\n          location\n          text\n          grouped\n        }\n      }\n      panelParticipants {\n        firstName\n        lastName\n        photo {\n          fullUrl\n          thumbUrl\n        }\n      }\n    }\n  }\n  season(uid: $seasonUid) {\n    panel {\n      uid\n      name\n      description\n      companies {\n        uid\n      }\n      event {\n        uid\n        type\n        title\n        start\n        end\n        location\n        text\n        grouped\n      }\n    }\n    calendar {\n      uid\n      type\n      title\n      start\n      end\n      location\n      text\n      grouped\n    }\n  }\n}\n\nquery AdminReservationsData($seasonUid: String!) {\n  season(uid: $seasonUid) {\n    reservations {\n      uid\n      type\n      count\n    }\n  }\n  participants(season: $seasonUid) {\n    uid\n    vat\n    brandName\n    program {\n      workshop {\n        uid\n        titleHr\n      }\n      talk {\n        uid\n        titleHr\n      }\n      panel {\n        uid\n        name\n      }\n    }\n  }\n}\n\nquery PageScheduleBase {\n  calendar {\n    uid\n    title\n    text\n    start\n    end\n    type\n    grouped\n    location\n    hasEvent\n  }\n}\n\nquery PageAdminUserEditBase($uid: String!) {\n  user(uid: $uid) {\n    uid\n    name\n    firstName\n    lastName\n    email\n    phone\n    roles {\n      name\n    }\n    eventLog {\n      id\n      date\n      name\n      data\n    }\n  }\n  roles {\n    name\n  }\n  sessionsFor(uid: $uid) {\n    sessionId\n    ip\n    userAgent\n    loggedInAt\n  }\n}": types.Frag_SeasonFragmentDoc,
    "\n        query PageAdminSeasonSeasonData($uid: String!) {\n            season(uid: $uid) {\n                uid\n                name\n                startsAt\n                endsAt\n                applicationsFrom\n                applicationsUntil\n            }\n        }\n        ": types.PageAdminSeasonSeasonDataDocument,
    "\n          mutation PageAdminSeasonApplicationsCompanyEdit_DeleteApplication($company: String!, $season: String!) {\n            deleteCompanyApplicationFor(\n              company: $company\n              season: $season\n            )\n          }\n          ": types.PageAdminSeasonApplicationsCompanyEdit_DeleteApplicationDocument,
    "\n            mutation PageAdminSeasonApplicationsCompanyEdit_UpsertApplication($company: String!, $season: String!, $info: CompanyApplicationCreateInput!) {\n                createCompanyApplicationFor(company: $company, season: $season, info: $info) {\n                    entity {\n                        talk {\n                            uid\n                        }\n                        workshop {\n                            uid\n                        }\n                        wantsCocktail\n                        wantsPanel\n                    }\n\n                    errors {\n                        field\n                        message\n                    }\n                }\n            }\n            ": types.PageAdminSeasonApplicationsCompanyEdit_UpsertApplicationDocument,
    "\n          query PageAdminSeasonApplicationsApproval_Base($season: String!) {\n            season(uid: $season) {\n                name\n                startsAt\n                endsAt\n                applications {\n                    wantsPanel\n                    wantsCocktail\n                    booth\n                    talk {\n                        titleEn\n                        titleHr\n                    }\n                    workshop {\n                        titleEn\n                        titleHr\n                    }\n                    forCompany {\n                        uid\n                        legalName\n                        brandName\n                    }\n                    approval {\n                        booth\n                        talkParticipants\n                        workshopParticipants\n                        panel\n                        cocktail\n                        logoHidden\n                    }\n                }\n            }\n          }\n        ": types.PageAdminSeasonApplicationsApproval_BaseDocument,
    "\n        mutation PageAdminSeasonApplicationsApproval_ApproveCompanyApplications($companies: [ApproveCompanyApplicationsInput!]!, $season: String!) {\n          approveCompanyApplications(companies: $companies, season: $season) {\n            booth\n            talkParticipants\n            workshopParticipants\n            panel\n            cocktail\n            forApplication {\n              forCompany {\n                uid\n              }\n            }\n          }\n        }\n      ": types.PageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsDocument,
    "\n    query PageAdminSeasonLiveVoteResults_Data($seasonUid: String!) {\n      liveVoteResults(seasonUid: $seasonUid) {\n        option\n        voteCount\n      }\n\n      liveVoteComments(seasonUid: $seasonUid) {\n        id\n        comment\n        createdAt\n        forUser {\n          name\n        }\n      }\n    }": types.PageAdminSeasonLiveVoteResults_DataDocument,
    "\n    mutation PageAdminSeasonLiveVoteResults_DeleteComment($commentId: Int!) {\n      deleteLiveVoteComment(commentId: $commentId)\n    }\n  ": types.PageAdminSeasonLiveVoteResults_DeleteCommentDocument,
    "\n    query PageAdminSeasonRatingsCompanies_Data($season: String!) {\n      season(uid: $season) {\n        applications {\n          forCompany {\n            uid\n            legalName\n            brandName\n            ratings {\n              averageRating\n              component\n            }\n          }\n        }\n      }\n    }\n    ": types.PageAdminSeasonRatingsCompanies_DataDocument,
    "\n    query PageAdminSeasonRatingsQrCodesData($season: String!) {\n      season(uid: $season) {\n        name\n        startsAt\n        endsAt\n        applications {\n          forCompany {\n            uid\n            legalName\n            brandName\n          }\n          approval {\n            booth\n            talkParticipants\n            workshopParticipants\n            panel\n          }\n        }\n      }\n    }\n    ": types.PageAdminSeasonRatingsQrCodesDataDocument,
    "\n    query PageAdminSeasonReservationsScannedData($season: String!) {\n      gateGuardianScanList(season: $season) {\n        eventType\n        eventId\n        forUser {\n          uid\n          name\n          email\n          phone\n        }\n        scannedBy {\n          uid\n          name\n        }\n        forCalendarItem {\n          uid\n          companies {\n            uid\n            brandName\n          }\n          forTalk {\n            uid\n            titleHr\n            titleEn\n          }\n          forWorkshop {\n            uid\n            titleHr\n            titleEn\n          }\n          forPanel {\n            uid\n            name\n          }\n        }\n        scannedAt\n      }\n    }\n  ": types.PageAdminSeasonReservationsScannedDataDocument,
    "\n      query PageAdminUsersScanners {\n          users {\n            uid\n            name\n            email\n            roles {\n              name\n            }\n          }\n      }\n    ": types.PageAdminUsersScannersDocument,
    "\n    mutation PageAdminUsersScannersUpdateIsScanner($uid: String!, $isScanner: Boolean!) {\n      updateScannerStatusFor(uid: $uid, isScanner: $isScanner)\n    }\n  ": types.PageAdminUsersScannersUpdateIsScannerDocument,
    "\n                query PageCalendarEventData($uid: String!) {\n                  calendarItem(uid: $uid) {\n                      hasEvent\n                      type\n                  }\n                  calendarItemCompanyUid(uid: $uid)\n                }\n              ": types.PageCalendarEventDataDocument,
    "\n      query PageCompanyUidRate_Data($seasonUid: String!, $companyUid: String!, $component: String!) {\n        userCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component) {\n          rating\n          comment\n        }\n        currentSeason {\n          eventFrom\n          eventUntil\n        }\n      }\n    ": types.PageCompanyUidRate_DataDocument,
    "\n    mutation PageCompanyUidRate_Upsert($seasonUid: String!, $companyUid: String!, $component: String!, $rating: Int!, $comment: String) {\n      upsertUserCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component, rating: $rating, comment: $comment) {\n        rating\n        comment\n      }\n    }\n  ": types.PageCompanyUidRate_UpsertDocument,
    "\n    mutation PageCompanyUidRate_Delete($seasonUid: String!, $companyUid: String!, $component: String!) {\n      deleteUserCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component)\n    }\n  ": types.PageCompanyUidRate_DeleteDocument,
    "\n          mutation PageGateGuardian_Scan($userUid: String!, $eventUid: String!, $eventType: String!) {\n              gateGuardianScan(userUid: $userUid, eventUid: $eventUid, eventType: $eventType) {\n                  user {\n                      name\n                      phone\n                  }\n                  hasReservation\n                  alreadyScanned\n                  error\n              }\n          }\n      ": types.PageGateGuardian_ScanDocument,
    "\n            query PageGateGuardian_EventList {\n                calendar {\n                    uid\n                    title\n                    text\n                    type\n                }\n            }\n        ": types.PageGateGuardian_EventListDocument,
    "\n    query PageLiveVoteSeason_Data($uid: String!) {\n      season(uid: $uid) {\n        uid\n        name\n        startsAt\n        endsAt\n        applicationsFrom\n        applicationsUntil\n        applicationsEditableFrom\n        applicationsEditableUntil\n        showParticipantsFrom\n        showParticipantsUntil\n        showPartnersFrom\n        showPartnersUntil\n        showSponsorsFrom\n        showSponsorsUntil\n        eventFrom\n        eventUntil\n        feedbackFrom\n        feedbackUntil\n        scheduleFrom\n        scheduleUntil\n      }\n    }\n    ": types.PageLiveVoteSeason_DataDocument,
    "\n    query PageLiveVoteSeasonIndex_Data($seasonUid: String!) {\n      myLiveVote(seasonUid: $seasonUid) {\n        option\n      }\n      myLiveVoteComments(seasonUid: $seasonUid) {\n        id\n        comment\n      }\n    }\n    ": types.PageLiveVoteSeasonIndex_DataDocument,
    "\n    mutation PageLiveVoteSeasonIndex_DeleteComment($commentId: Int!) {\n      deleteLiveVoteComment(commentId: $commentId)\n    }\n  ": types.PageLiveVoteSeasonIndex_DeleteCommentDocument,
    "\n    mutation PageLiveVoteSeasonIndex_SubmitComment($seasonUid: String!, $comment: String!) {\n      createLiveVoteComment(seasonUid: $seasonUid, comment: $comment) {\n        id\n        comment\n      }\n    }\n  ": types.PageLiveVoteSeasonIndex_SubmitCommentDocument,
    "\n    mutation PageLiveVoteSeasonIndex_SubmitVote($seasonUid: String!, $vote: String!) {\n      createLiveVote(seasonUid: $seasonUid, vote: $vote) {\n        option\n      }\n    }\n  ": types.PageLiveVoteSeasonIndex_SubmitVoteDocument,
    "\n    query PageLiveVoteSeasonViewLiveVoteResults_LiveVoteResults($seasonUid: String!) {\n      liveVoteResults(seasonUid: $seasonUid) {\n        option\n        voteCount\n      }\n    }\n    ": types.PageLiveVoteSeasonViewLiveVoteResults_LiveVoteResultsDocument,
    "\n        query PageParticipants_Base {\n          participants {\n            uid\n            website\n            brandName\n            descriptionEn\n            descriptionHr\n            logoHidden\n            rasterLogo {\n                thumbUrl\n                fullUrl\n            }\n            ratings {\n              averageRating\n              ratingCount\n              component\n            }\n          }\n        }\n      ": types.PageParticipants_BaseDocument,
    "\n      query PageParticipants_Ratings {\n        participants {\n          uid\n          brandName\n          ratings {\n            averageRating\n            ratingCount\n            component\n          }\n        }\n      }\n    ": types.PageParticipants_RatingsDocument,
    "\n      mutation PageProfileMeCompanyScanUserQrScan($userUid: String!) {\n          scanUserQr(userUid: $userUid) {\n              user {\n                  uid\n                  name\n                  email\n              }\n              isStarred\n              alreadyScanned\n              note\n              error\n          }\n      }\n  ": types.PageProfileMeCompanyScanUserQrScanDocument,
    "\n    mutation PageProfileMeCompanyScanUserQrRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {\n        scanUserQrRefine(userUid: $userUid, refineData: $refineData) {\n            user {\n                uid\n                name\n                email\n            }\n            isStarred\n            note\n            error\n        }\n    }\n  ": types.PageProfileMeCompanyScanUserQrRefineQrScanDocument,
    "\n      query PageProfileMeCompanyScansListData(\n        $companyUid: String\n        $seasonUid: String\n      ) {\n        scannedUsers(companyUid: $companyUid, seasonUid: $seasonUid) {\n          user {\n            uid\n            name\n            email\n            phone\n          }\n          note\n          isStarred\n          scannedAt\n        }\n      }\n    ": types.PageProfileMeCompanyScansListDataDocument,
    "\n    mutation PageProfileMeCompanyScansListRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {\n        scanUserQrRefine(userUid: $userUid, refineData: $refineData) {\n            user {\n                uid\n                name\n                email\n                phone\n            }\n            isStarred\n            note\n            error\n        }\n    }\n  ": types.PageProfileMeCompanyScansListRefineQrScanDocument,
    "\n          query PageProfileMeCompanySignup_Data {\n              talkCategories {\n                  name\n              }\n              booths {\n                  name\n                  key\n              }\n              companyApplication {\n                  booth\n                  wantsPanel\n                  wantsCocktail\n                  contactPerson {\n                      name\n                      email\n                      phone\n                  }\n                  talk {\n                      titleEn\n                      titleHr\n                      descriptionEn\n                      descriptionHr\n                      language\n                      category {\n                          name\n                      }\n                      presenters {\n                          firstName\n                          lastName\n                          bioHr\n                          bioEn\n                          photo {\n                            name\n                            uid\n                            full {\n                              mimeType\n                            }\n                          }\n                      }\n                  }\n                  workshop {\n                      titleEn\n                      titleHr\n                      descriptionEn\n                      descriptionHr\n                      language\n                      goal\n                      notesEn\n                      notesHr\n                      presenters {\n                          firstName\n                          lastName\n                          bioHr\n                          bioEn\n                          photo {\n                            name\n                            uid\n                            full {\n                              mimeType\n                            }\n                          }\n                      }\n                  }\n              }\n          }\n        ": types.PageProfileMeCompanySignup_DataDocument,
    "\n            mutation PageProfileMeCompanySignup_CreateApplication($info: CompanyApplicationCreateInput!) {\n              createCompanyApplication(info: $info) {\n                entity {\n                  talk {\n                    uid\n                  }\n                  workshop {\n                    uid\n                  }\n                  wantsCocktail\n                  wantsPanel\n                }\n\n                errors {\n                  field\n                  message\n                }\n              }\n            }\n          ": types.PageProfileMeCompanySignup_CreateApplicationDocument,
    "\n    mutation StoreCalendarEventToggleReservation($input: EventReservationUpdateInput!) {\n        updateEventReservation(input: $input) {\n            entity {\n                status\n            }\n            errors {\n                field\n                message\n            }\n        }\n    }\n": types.StoreCalendarEventToggleReservationDocument,
    "\n    fragment StoreCalendarEventsAllCalendarFragment on CalendarItem {\n        uid\n        location\n        start\n        end\n        capacity\n        forWorkshop {\n            uid\n            titleHr\n            titleEn\n            descriptionHr\n            descriptionEn\n            reservation\n        }\n        forTalk {\n            uid\n            titleHr\n            titleEn\n            descriptionHr\n            descriptionEn\n            reservation\n        }\n        forPanel {\n            uid\n            name\n            description\n            reservation\n            companies {\n                uid\n                brandName\n            }\n        }\n        companies {\n            uid\n            brandName\n            rasterLogo {\n                fullUrl\n                thumbUrl\n            }\n        }\n    }\n": types.StoreCalendarEventsAllCalendarFragmentFragmentDoc,
    "\n      query StoreCalendarEventsAll {\n          calendar {\n              ...StoreCalendarEventsAllCalendarFragment\n          }\n\n          currentSeason {\n              reservations {\n                  uid\n                  type\n                  count\n              }\n          }\n      }\n  ": types.StoreCalendarEventsAllDocument,
    "\n            mutation ResumeSetIsFavourite($uid: String!, $isFavourite: Boolean!) {\n                resumeSetIsFavourite(uid: $uid, isFavourite: $isFavourite)\n            }\n        ": types.ResumeSetIsFavouriteDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ComponentAdminSeasonRatingsCompaniesCompanyComments_Data($seasonUid: String!, $companyUid: String!) {\n      companyComponentAverageRatings(seasonUid: $seasonUid, companyUid: $companyUid) {\n        component\n        averageRating\n        comments\n      }\n    }\n    "): (typeof documents)["\n    query ComponentAdminSeasonRatingsCompaniesCompanyComments_Data($seasonUid: String!, $companyUid: String!) {\n      companyComponentAverageRatings(seasonUid: $seasonUid, companyUid: $companyUid) {\n        component\n        averageRating\n        comments\n      }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Login($password: String!, $identifier: String!) {\n  login(password: $password, identifier: $identifier) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation Register($info: UserRegisterInput!) {\n  register(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation Logout {\n  logout\n}\n\nmutation RequestPasswordReset($identifier: String!) {\n  requestPasswordReset(identifier: $identifier)\n}\n\nmutation CheckPasswordReset($token: String!) {\n  checkPasswordReset(token: $token) {\n    firstName\n    lastName\n    email\n  }\n}\n\nmutation UsePasswordReset($info: PasswordResetUseInput!) {\n  usePasswordReset(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity\n  }\n}\n\nmutation RequestPasswordResetFor($uid: String!) {\n  requestPasswordResetFor(uid: $uid)\n}\n\nmutation UpdateTranslation($data: TranslationCreateInput!) {\n  updateTranslation(data: $data) {\n    key\n    value\n    language\n  }\n}\n\nmutation UpdateProfile($info: UserCreateInput!) {\n  updateProfile(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation UpdateUser($uid: String!, $info: UserUpdateInput!) {\n  updateUser(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation UpdatePassword($currentPassword: String!, $newPassword: String!, $newPasswordRepeat: String!) {\n  updatePassword(\n    currentPassword: $currentPassword\n    newPassword: $newPassword\n    newPasswordRepeat: $newPasswordRepeat\n  ) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation ValidateVat($vat: String!) {\n  validateVat(vat: $vat) {\n    valid\n    exists\n    info {\n      address\n      legalName\n      vat\n    }\n  }\n}\n\nmutation CreateIndustry($name: String!) {\n  createIndustry(name: $name) {\n    name\n  }\n}\n\nmutation RenameIndustry($oldName: String!, $newName: String!) {\n  renameIndustry(oldName: $oldName, newName: $newName) {\n    name\n  }\n}\n\nmutation CreateTalkCategory($name: String!, $season: String!) {\n  createTalkCategory(name: $name, season: $season) {\n    name\n  }\n}\n\nmutation RenameTalkCategory($oldName: String!, $newName: String!, $season: String!) {\n  renameTalkCategory(oldName: $oldName, newName: $newName, season: $season) {\n    name\n  }\n}\n\nmutation CreateCocktailType($type: String!, $season: String!) {\n  createCocktailType(type: $type, season: $season) {\n    type\n  }\n}\n\nmutation RenameCocktailType($oldCocktailType: String!, $newCocktailType: String!, $season: String!) {\n  renameCocktailType(\n    oldCocktailType: $oldCocktailType\n    newCocktailType: $newCocktailType\n    season: $season\n  ) {\n    type\n  }\n}\n\nmutation RegisterCompany($info: CreateCompanyInput!) {\n  registerCompany(info: $info) {\n    errors {\n      message\n      field\n    }\n    entity {\n      uid\n      vat\n      legalName\n      address\n      brandName\n      descriptionEn\n      descriptionHr\n      industry {\n        name\n      }\n    }\n  }\n}\n\nmutation UpdateCompanyInfo($info: CreateCompanyInput!) {\n  updateCompanyInfo(info: $info) {\n    errors {\n      message\n      field\n    }\n    entity {\n      uid\n      vat\n      legalName\n      address\n      brandName\n      descriptionEn\n      descriptionHr\n      industry {\n        name\n      }\n    }\n  }\n}\n\nmutation CreatePressRelease($info: PressReleaseWithFilesCreateInput!) {\n  createPressRelease(info: $info) {\n    entity {\n      title\n      published\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation UpdatePressRelease($uid: String!, $info: PressReleaseWithFilesCreateInput!) {\n  updatePressRelease(uid: $uid, info: $info) {\n    entity {\n      title\n      published\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation EditApprovedCompanyApplication($info: CompanyApplicationApprovedEditInput!) {\n  editApprovedCompanyApplication(info: $info) {\n    entity {\n      talk {\n        uid\n      }\n      workshop {\n        uid\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation UpdateResume($info: ResumeCreateInput!) {\n  updateResume(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation CreateNews($info: NewsCreateInput!) {\n  createNews(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      slug\n    }\n  }\n}\n\nmutation EditNews($uid: String!, $info: NewsCreateInput!) {\n  editNews(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      ...frag_News\n    }\n  }\n}\n\nmutation DeleteNews($uid: String!) {\n  deleteNews(uid: $uid)\n}\n\nmutation CreateGalleryImage($info: GalleryImageCreateInput!) {\n  createGalleryImage(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation EditGalleryImage($uid: String!, $info: GalleryImageCreateInput!) {\n  editGalleryImage(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      ...frag_GalleryImage\n    }\n  }\n}\n\nmutation DeleteGalleryImage($uid: String!) {\n  deleteGalleryImage(uid: $uid)\n}"): (typeof documents)["mutation Login($password: String!, $identifier: String!) {\n  login(password: $password, identifier: $identifier) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation Register($info: UserRegisterInput!) {\n  register(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation Logout {\n  logout\n}\n\nmutation RequestPasswordReset($identifier: String!) {\n  requestPasswordReset(identifier: $identifier)\n}\n\nmutation CheckPasswordReset($token: String!) {\n  checkPasswordReset(token: $token) {\n    firstName\n    lastName\n    email\n  }\n}\n\nmutation UsePasswordReset($info: PasswordResetUseInput!) {\n  usePasswordReset(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity\n  }\n}\n\nmutation RequestPasswordResetFor($uid: String!) {\n  requestPasswordResetFor(uid: $uid)\n}\n\nmutation UpdateTranslation($data: TranslationCreateInput!) {\n  updateTranslation(data: $data) {\n    key\n    value\n    language\n  }\n}\n\nmutation UpdateProfile($info: UserCreateInput!) {\n  updateProfile(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation UpdateUser($uid: String!, $info: UserUpdateInput!) {\n  updateUser(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation UpdatePassword($currentPassword: String!, $newPassword: String!, $newPasswordRepeat: String!) {\n  updatePassword(\n    currentPassword: $currentPassword\n    newPassword: $newPassword\n    newPasswordRepeat: $newPasswordRepeat\n  ) {\n    errors {\n      field\n      message\n    }\n    entity {\n      ...frag_UserProfile\n    }\n  }\n}\n\nmutation ValidateVat($vat: String!) {\n  validateVat(vat: $vat) {\n    valid\n    exists\n    info {\n      address\n      legalName\n      vat\n    }\n  }\n}\n\nmutation CreateIndustry($name: String!) {\n  createIndustry(name: $name) {\n    name\n  }\n}\n\nmutation RenameIndustry($oldName: String!, $newName: String!) {\n  renameIndustry(oldName: $oldName, newName: $newName) {\n    name\n  }\n}\n\nmutation CreateTalkCategory($name: String!, $season: String!) {\n  createTalkCategory(name: $name, season: $season) {\n    name\n  }\n}\n\nmutation RenameTalkCategory($oldName: String!, $newName: String!, $season: String!) {\n  renameTalkCategory(oldName: $oldName, newName: $newName, season: $season) {\n    name\n  }\n}\n\nmutation CreateCocktailType($type: String!, $season: String!) {\n  createCocktailType(type: $type, season: $season) {\n    type\n  }\n}\n\nmutation RenameCocktailType($oldCocktailType: String!, $newCocktailType: String!, $season: String!) {\n  renameCocktailType(\n    oldCocktailType: $oldCocktailType\n    newCocktailType: $newCocktailType\n    season: $season\n  ) {\n    type\n  }\n}\n\nmutation RegisterCompany($info: CreateCompanyInput!) {\n  registerCompany(info: $info) {\n    errors {\n      message\n      field\n    }\n    entity {\n      uid\n      vat\n      legalName\n      address\n      brandName\n      descriptionEn\n      descriptionHr\n      industry {\n        name\n      }\n    }\n  }\n}\n\nmutation UpdateCompanyInfo($info: CreateCompanyInput!) {\n  updateCompanyInfo(info: $info) {\n    errors {\n      message\n      field\n    }\n    entity {\n      uid\n      vat\n      legalName\n      address\n      brandName\n      descriptionEn\n      descriptionHr\n      industry {\n        name\n      }\n    }\n  }\n}\n\nmutation CreatePressRelease($info: PressReleaseWithFilesCreateInput!) {\n  createPressRelease(info: $info) {\n    entity {\n      title\n      published\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation UpdatePressRelease($uid: String!, $info: PressReleaseWithFilesCreateInput!) {\n  updatePressRelease(uid: $uid, info: $info) {\n    entity {\n      title\n      published\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation EditApprovedCompanyApplication($info: CompanyApplicationApprovedEditInput!) {\n  editApprovedCompanyApplication(info: $info) {\n    entity {\n      talk {\n        uid\n      }\n      workshop {\n        uid\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation UpdateResume($info: ResumeCreateInput!) {\n  updateResume(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation CreateNews($info: NewsCreateInput!) {\n  createNews(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      slug\n    }\n  }\n}\n\nmutation EditNews($uid: String!, $info: NewsCreateInput!) {\n  editNews(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      ...frag_News\n    }\n  }\n}\n\nmutation DeleteNews($uid: String!) {\n  deleteNews(uid: $uid)\n}\n\nmutation CreateGalleryImage($info: GalleryImageCreateInput!) {\n  createGalleryImage(info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n    }\n  }\n}\n\nmutation EditGalleryImage($uid: String!, $info: GalleryImageCreateInput!) {\n  editGalleryImage(uid: $uid, info: $info) {\n    errors {\n      field\n      message\n    }\n    entity {\n      uid\n      ...frag_GalleryImage\n    }\n  }\n}\n\nmutation DeleteGalleryImage($uid: String!) {\n  deleteGalleryImage(uid: $uid)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment frag_Season on Season {\n  uid\n  name\n  startsAt\n  endsAt\n  applicationsFrom\n  applicationsUntil\n  applicationsEditableFrom\n  applicationsEditableUntil\n  showParticipantsFrom\n  showParticipantsUntil\n  showPartnersFrom\n  showPartnersUntil\n  showSponsorsFrom\n  showSponsorsUntil\n  eventFrom\n  eventUntil\n  feedbackFrom\n  feedbackUntil\n  scheduleFrom\n  scheduleUntil\n}\n\nfragment frag_UserProfile on User {\n  uid\n  name\n  firstName\n  lastName\n  email\n  phone\n  language\n  roles {\n    name\n  }\n  companies {\n    uid\n    vat\n    legalName\n    brandName\n    address\n    website\n    instagram\n    facebook\n    linkedIn\n    descriptionEn\n    descriptionHr\n    industry {\n      name\n    }\n  }\n}\n\nfragment frag_ApplicationPresenter on ApplicationPresenter {\n  firstName\n  lastName\n  bioHr\n  bioEn\n  photo {\n    name\n    uid\n    full {\n      mimeType\n    }\n  }\n}\n\nfragment frag_AllFeedback on CompanyApplicationFeedback {\n  applicationComments\n  applicationRating\n  attendanceRating\n  dateComments\n  dateRating\n  experienceComments\n  foodRating\n  mostLiked\n  onsiteRating\n  overallComment\n  overallRating\n  recommended\n  testimonial\n  timeRating\n  createdAt\n  updatedAt\n}\n\nfragment frag_CompanyApplication on CompanyApplication {\n  booth\n  wantsPanel\n  wantsCocktail\n  contactPerson {\n    name\n    email\n    phone\n  }\n  talk {\n    titleEn\n    titleHr\n    descriptionEn\n    descriptionHr\n    language\n    category {\n      name\n    }\n    presenters {\n      ...frag_ApplicationPresenter\n    }\n  }\n  workshop {\n    titleEn\n    titleHr\n    descriptionEn\n    descriptionHr\n    language\n    goal\n    notesEn\n    notesHr\n    presenters {\n      ...frag_ApplicationPresenter\n    }\n  }\n  cocktail {\n    name\n    type {\n      type\n    }\n  }\n  panelParticipants {\n    ...frag_ApplicationPresenter\n  }\n  approval {\n    cocktail\n    panel\n    talkParticipants\n    workshopParticipants\n    booth\n  }\n  feedback {\n    ...frag_AllFeedback\n  }\n}\n\nfragment frag_Company on Company {\n  uid\n  legalName\n  brandName\n  descriptionEn\n  descriptionHr\n  address\n  vat\n  website\n  instagram\n  facebook\n  linkedIn\n  industry {\n    name\n  }\n}\n\nfragment frag_News on News {\n  lang\n  slug\n  date\n  photo {\n    thumbUrl\n    fullUrl\n  }\n  title\n  description\n  content\n}\n\nfragment frag_GalleryImage on GalleryImage {\n  uid\n  name\n  order\n  visible\n  photo {\n    thumbUrl\n    fullUrl\n  }\n}\n\nquery Profile {\n  profile {\n    ...frag_UserProfile\n  }\n}\n\nquery TranslationsFor($language: String!) {\n  allTranslationsFor(language: $language) {\n    key\n    value\n  }\n}\n\nquery InitialData($language: String!) {\n  profile {\n    ...frag_UserProfile\n  }\n  allTranslationsFor(language: $language) {\n    key\n    value\n  }\n  currentSeason {\n    ...frag_Season\n  }\n}\n\nquery PageIndexData($language: String!) {\n  sponsors {\n    name\n    url\n    photo {\n      thumbUrl\n      fullUrl\n    }\n  }\n  partners {\n    name\n    url\n    photo {\n      thumbUrl\n      fullUrl\n    }\n  }\n  news(lang: $language, filter: {take: 3}) {\n    ...frag_News\n  }\n  galleryImages(filter: {take: 6}) {\n    ...frag_GalleryImage\n  }\n}\n\nquery Company($vat: String!) {\n  company(vat: $vat) {\n    ...frag_Company\n  }\n}\n\nquery CompanyInfo($uid: String!) {\n  companyInfo(uid: $uid) {\n    uid\n    brandName\n    descriptionEn\n    descriptionHr\n    website\n    instagram\n    facebook\n    linkedIn\n    rasterLogo {\n      thumbUrl\n      fullUrl\n    }\n    program {\n      booth\n      talk {\n        uid\n        titleHr\n        titleEn\n        descriptionHr\n        descriptionEn\n        language\n        reservation\n        presenters {\n          bioHr\n          bioEn\n          firstName\n          lastName\n          photo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n      workshop {\n        uid\n        titleHr\n        titleEn\n        descriptionHr\n        descriptionEn\n        language\n        notesHr\n        notesEn\n        reservation\n        presenters {\n          firstName\n          lastName\n          bioHr\n          bioEn\n          photo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n      panelParticipants {\n        firstName\n        lastName\n        bioHr\n        bioEn\n        photo {\n          thumbUrl\n          fullUrl\n        }\n      }\n      panel {\n        uid\n        name\n        description\n        reservation\n        companies {\n          uid\n          brandName\n          rasterLogo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n    }\n  }\n}\n\nquery Industries {\n  industries {\n    name\n  }\n}\n\nquery TalkCategories($season: String) {\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n}\n\nquery CocktailTypes($season: String) {\n  cocktailTypes(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    type\n  }\n}\n\nquery AvailableCocktailTypes($season: String) {\n  availableCocktailTypes(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    type\n  }\n}\n\nquery PressRelease($uid: String!) {\n  pressRelease(uid: $uid) {\n    title\n    published\n    file {\n      name\n      mimeType\n      uid\n    }\n    forSeason {\n      uid\n      name\n    }\n  }\n}\n\nquery PressReleases($season: String) {\n  pressReleases(\n    orderBy: {published: desc}\n    where: {forSeason: {is: {uid: {equals: $season}}}}\n  ) {\n    uid\n    title\n    published\n    file {\n      uid\n    }\n    forSeason {\n      uid\n      name\n    }\n  }\n}\n\nquery AllNews($filter: NewsFilter) {\n  allNews(filter: $filter) {\n    uid\n    ...frag_News\n  }\n}\n\nquery News($lang: String!, $filter: NewsFilter) {\n  news(lang: $lang, filter: $filter) {\n    ...frag_News\n  }\n}\n\nquery NewsItem($slug: String!, $lang: String!, $filter: NewsFilter) {\n  newsItem(slug: $slug) {\n    ...frag_News\n  }\n  news(lang: $lang, filter: $filter) {\n    ...frag_News\n  }\n}\n\nquery NewsItemByUid($uid: String!) {\n  newsItemByUid(uid: $uid) {\n    ...frag_News\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery GalleryImages($filter: GalleryImageFilter) {\n  galleryImages(filter: $filter) {\n    ...frag_GalleryImage\n  }\n}\n\nquery AllGalleryImages {\n  allGalleryImages {\n    ...frag_GalleryImage\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery GalleryImagItemByUid($uid: String!) {\n  galleryImageItemByUid(uid: $uid) {\n    ...frag_GalleryImage\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery AdminInitialData {\n  industries {\n    name\n  }\n  seasons(orderBy: {endsAt: desc}) {\n    ...frag_Season\n  }\n}\n\nquery AdminCompanyApplication($company: String!, $season: String!) {\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n  booths {\n    name\n    key\n  }\n  companyApplicationFor(company: $company, season: $season) {\n    ...frag_CompanyApplication\n    forCompany {\n      ...frag_Company\n    }\n  }\n}\n\nquery AdminCompanyApplications($season: String!) {\n  industries {\n    name\n  }\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n  booths {\n    key\n    name\n  }\n  companyApplications(season: $season) {\n    wantsCocktail\n    wantsPanel\n    booth\n    talk {\n      language\n      titleEn\n      category {\n        name\n      }\n    }\n    workshop {\n      language\n      titleEn\n    }\n    forCompany {\n      uid\n      brandName\n      industry {\n        name\n      }\n    }\n    forSeason {\n      uid\n    }\n  }\n}\n\nquery CurrentCompanyApplication {\n  talkCategories {\n    name\n  }\n  availableCocktailTypes {\n    type\n  }\n  booths {\n    name\n    key\n  }\n  companyApplication {\n    ...frag_CompanyApplication\n  }\n}\n\nquery MyResume {\n  profile {\n    resume {\n      uid\n      updatedAt\n      city\n      cv {\n        url\n        name\n        mimeType\n      }\n      faculty {\n        name\n        module\n        specialization\n      }\n      interests\n      technologies\n      projects {\n        project\n        position\n        start\n        until\n      }\n      volunteerExperiences {\n        organisation\n        position\n        start\n        until\n      }\n      workExperiences {\n        company\n        position\n        start\n        until\n      }\n      studyYears {\n        studyType\n        studyYear\n      }\n      extraField\n    }\n  }\n}\n\nquery Resume($uid: String!) {\n  resume(uid: $uid) {\n    uid\n    faculty {\n      name\n      module\n    }\n    user {\n      name\n      email\n      phone\n    }\n    studyYears {\n      studyYear\n      studyType\n    }\n    projects {\n      project\n      position\n      start\n      until\n    }\n    technologies\n    interests\n    city\n    cv {\n      url\n    }\n    volunteerExperiences {\n      organisation\n      position\n      start\n      until\n    }\n    workExperiences {\n      company\n      position\n      start\n      until\n    }\n    extraField\n  }\n  resumeIsFavourite(uid: $uid)\n}\n\nquery ProfileBaseData {\n  booths {\n    key\n    name\n  }\n  companyApplication {\n    workshop {\n      titleEn\n    }\n    talk {\n      titleEn\n    }\n    booth\n    wantsPanel\n    wantsCocktail\n    approval {\n      booth\n      workshopParticipants\n      talkParticipants\n      panel\n      cocktail\n    }\n    userApplications {\n      workshop\n      talk\n    }\n  }\n  profile {\n    resume {\n      uid\n    }\n  }\n  calendar {\n    uid\n    title\n    forWorkshop {\n      uid\n      titleHr\n      titleEn\n      descriptionHr\n      descriptionEn\n      reservation\n    }\n    forTalk {\n      uid\n      titleHr\n      titleEn\n      descriptionHr\n      descriptionEn\n      reservation\n    }\n    forPanel {\n      uid\n      name\n      description\n      reservation\n    }\n  }\n  currentSeason {\n    ...frag_Season\n    companyComponentAverageRatings {\n      component\n      averageRating\n    }\n  }\n}\n\nquery AdminFeedbackInfo($seasonUid: String!) {\n  companyApplications(\n    season: $seasonUid\n    orderBy: {forCompany: {brandName: desc}}\n  ) {\n    forCompany {\n      uid\n      brandName\n    }\n    feedback {\n      ...frag_AllFeedback\n    }\n  }\n}\n\nquery PageAdminSeasonScheduleBase($seasonUid: String!) {\n  participants(season: $seasonUid) {\n    uid\n    brandName\n    program {\n      talk {\n        uid\n        event {\n          uid\n          type\n          title\n          start\n          end\n          location\n          text\n          grouped\n        }\n      }\n      workshop {\n        uid\n        event {\n          uid\n          type\n          title\n          start\n          end\n          location\n          text\n          grouped\n        }\n      }\n      panelParticipants {\n        firstName\n        lastName\n        photo {\n          fullUrl\n          thumbUrl\n        }\n      }\n    }\n  }\n  season(uid: $seasonUid) {\n    panel {\n      uid\n      name\n      description\n      companies {\n        uid\n      }\n      event {\n        uid\n        type\n        title\n        start\n        end\n        location\n        text\n        grouped\n      }\n    }\n    calendar {\n      uid\n      type\n      title\n      start\n      end\n      location\n      text\n      grouped\n    }\n  }\n}\n\nquery AdminReservationsData($seasonUid: String!) {\n  season(uid: $seasonUid) {\n    reservations {\n      uid\n      type\n      count\n    }\n  }\n  participants(season: $seasonUid) {\n    uid\n    vat\n    brandName\n    program {\n      workshop {\n        uid\n        titleHr\n      }\n      talk {\n        uid\n        titleHr\n      }\n      panel {\n        uid\n        name\n      }\n    }\n  }\n}\n\nquery PageScheduleBase {\n  calendar {\n    uid\n    title\n    text\n    start\n    end\n    type\n    grouped\n    location\n    hasEvent\n  }\n}\n\nquery PageAdminUserEditBase($uid: String!) {\n  user(uid: $uid) {\n    uid\n    name\n    firstName\n    lastName\n    email\n    phone\n    roles {\n      name\n    }\n    eventLog {\n      id\n      date\n      name\n      data\n    }\n  }\n  roles {\n    name\n  }\n  sessionsFor(uid: $uid) {\n    sessionId\n    ip\n    userAgent\n    loggedInAt\n  }\n}"): (typeof documents)["fragment frag_Season on Season {\n  uid\n  name\n  startsAt\n  endsAt\n  applicationsFrom\n  applicationsUntil\n  applicationsEditableFrom\n  applicationsEditableUntil\n  showParticipantsFrom\n  showParticipantsUntil\n  showPartnersFrom\n  showPartnersUntil\n  showSponsorsFrom\n  showSponsorsUntil\n  eventFrom\n  eventUntil\n  feedbackFrom\n  feedbackUntil\n  scheduleFrom\n  scheduleUntil\n}\n\nfragment frag_UserProfile on User {\n  uid\n  name\n  firstName\n  lastName\n  email\n  phone\n  language\n  roles {\n    name\n  }\n  companies {\n    uid\n    vat\n    legalName\n    brandName\n    address\n    website\n    instagram\n    facebook\n    linkedIn\n    descriptionEn\n    descriptionHr\n    industry {\n      name\n    }\n  }\n}\n\nfragment frag_ApplicationPresenter on ApplicationPresenter {\n  firstName\n  lastName\n  bioHr\n  bioEn\n  photo {\n    name\n    uid\n    full {\n      mimeType\n    }\n  }\n}\n\nfragment frag_AllFeedback on CompanyApplicationFeedback {\n  applicationComments\n  applicationRating\n  attendanceRating\n  dateComments\n  dateRating\n  experienceComments\n  foodRating\n  mostLiked\n  onsiteRating\n  overallComment\n  overallRating\n  recommended\n  testimonial\n  timeRating\n  createdAt\n  updatedAt\n}\n\nfragment frag_CompanyApplication on CompanyApplication {\n  booth\n  wantsPanel\n  wantsCocktail\n  contactPerson {\n    name\n    email\n    phone\n  }\n  talk {\n    titleEn\n    titleHr\n    descriptionEn\n    descriptionHr\n    language\n    category {\n      name\n    }\n    presenters {\n      ...frag_ApplicationPresenter\n    }\n  }\n  workshop {\n    titleEn\n    titleHr\n    descriptionEn\n    descriptionHr\n    language\n    goal\n    notesEn\n    notesHr\n    presenters {\n      ...frag_ApplicationPresenter\n    }\n  }\n  cocktail {\n    name\n    type {\n      type\n    }\n  }\n  panelParticipants {\n    ...frag_ApplicationPresenter\n  }\n  approval {\n    cocktail\n    panel\n    talkParticipants\n    workshopParticipants\n    booth\n  }\n  feedback {\n    ...frag_AllFeedback\n  }\n}\n\nfragment frag_Company on Company {\n  uid\n  legalName\n  brandName\n  descriptionEn\n  descriptionHr\n  address\n  vat\n  website\n  instagram\n  facebook\n  linkedIn\n  industry {\n    name\n  }\n}\n\nfragment frag_News on News {\n  lang\n  slug\n  date\n  photo {\n    thumbUrl\n    fullUrl\n  }\n  title\n  description\n  content\n}\n\nfragment frag_GalleryImage on GalleryImage {\n  uid\n  name\n  order\n  visible\n  photo {\n    thumbUrl\n    fullUrl\n  }\n}\n\nquery Profile {\n  profile {\n    ...frag_UserProfile\n  }\n}\n\nquery TranslationsFor($language: String!) {\n  allTranslationsFor(language: $language) {\n    key\n    value\n  }\n}\n\nquery InitialData($language: String!) {\n  profile {\n    ...frag_UserProfile\n  }\n  allTranslationsFor(language: $language) {\n    key\n    value\n  }\n  currentSeason {\n    ...frag_Season\n  }\n}\n\nquery PageIndexData($language: String!) {\n  sponsors {\n    name\n    url\n    photo {\n      thumbUrl\n      fullUrl\n    }\n  }\n  partners {\n    name\n    url\n    photo {\n      thumbUrl\n      fullUrl\n    }\n  }\n  news(lang: $language, filter: {take: 3}) {\n    ...frag_News\n  }\n  galleryImages(filter: {take: 6}) {\n    ...frag_GalleryImage\n  }\n}\n\nquery Company($vat: String!) {\n  company(vat: $vat) {\n    ...frag_Company\n  }\n}\n\nquery CompanyInfo($uid: String!) {\n  companyInfo(uid: $uid) {\n    uid\n    brandName\n    descriptionEn\n    descriptionHr\n    website\n    instagram\n    facebook\n    linkedIn\n    rasterLogo {\n      thumbUrl\n      fullUrl\n    }\n    program {\n      booth\n      talk {\n        uid\n        titleHr\n        titleEn\n        descriptionHr\n        descriptionEn\n        language\n        reservation\n        presenters {\n          bioHr\n          bioEn\n          firstName\n          lastName\n          photo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n      workshop {\n        uid\n        titleHr\n        titleEn\n        descriptionHr\n        descriptionEn\n        language\n        notesHr\n        notesEn\n        reservation\n        presenters {\n          firstName\n          lastName\n          bioHr\n          bioEn\n          photo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n      panelParticipants {\n        firstName\n        lastName\n        bioHr\n        bioEn\n        photo {\n          thumbUrl\n          fullUrl\n        }\n      }\n      panel {\n        uid\n        name\n        description\n        reservation\n        companies {\n          uid\n          brandName\n          rasterLogo {\n            thumbUrl\n            fullUrl\n          }\n        }\n        event {\n          start\n          end\n          location\n        }\n      }\n    }\n  }\n}\n\nquery Industries {\n  industries {\n    name\n  }\n}\n\nquery TalkCategories($season: String) {\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n}\n\nquery CocktailTypes($season: String) {\n  cocktailTypes(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    type\n  }\n}\n\nquery AvailableCocktailTypes($season: String) {\n  availableCocktailTypes(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    type\n  }\n}\n\nquery PressRelease($uid: String!) {\n  pressRelease(uid: $uid) {\n    title\n    published\n    file {\n      name\n      mimeType\n      uid\n    }\n    forSeason {\n      uid\n      name\n    }\n  }\n}\n\nquery PressReleases($season: String) {\n  pressReleases(\n    orderBy: {published: desc}\n    where: {forSeason: {is: {uid: {equals: $season}}}}\n  ) {\n    uid\n    title\n    published\n    file {\n      uid\n    }\n    forSeason {\n      uid\n      name\n    }\n  }\n}\n\nquery AllNews($filter: NewsFilter) {\n  allNews(filter: $filter) {\n    uid\n    ...frag_News\n  }\n}\n\nquery News($lang: String!, $filter: NewsFilter) {\n  news(lang: $lang, filter: $filter) {\n    ...frag_News\n  }\n}\n\nquery NewsItem($slug: String!, $lang: String!, $filter: NewsFilter) {\n  newsItem(slug: $slug) {\n    ...frag_News\n  }\n  news(lang: $lang, filter: $filter) {\n    ...frag_News\n  }\n}\n\nquery NewsItemByUid($uid: String!) {\n  newsItemByUid(uid: $uid) {\n    ...frag_News\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery GalleryImages($filter: GalleryImageFilter) {\n  galleryImages(filter: $filter) {\n    ...frag_GalleryImage\n  }\n}\n\nquery AllGalleryImages {\n  allGalleryImages {\n    ...frag_GalleryImage\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery GalleryImagItemByUid($uid: String!) {\n  galleryImageItemByUid(uid: $uid) {\n    ...frag_GalleryImage\n    uid\n    photo {\n      uid\n      name\n      full {\n        mimeType\n      }\n    }\n  }\n}\n\nquery AdminInitialData {\n  industries {\n    name\n  }\n  seasons(orderBy: {endsAt: desc}) {\n    ...frag_Season\n  }\n}\n\nquery AdminCompanyApplication($company: String!, $season: String!) {\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n  booths {\n    name\n    key\n  }\n  companyApplicationFor(company: $company, season: $season) {\n    ...frag_CompanyApplication\n    forCompany {\n      ...frag_Company\n    }\n  }\n}\n\nquery AdminCompanyApplications($season: String!) {\n  industries {\n    name\n  }\n  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {\n    name\n  }\n  booths {\n    key\n    name\n  }\n  companyApplications(season: $season) {\n    wantsCocktail\n    wantsPanel\n    booth\n    talk {\n      language\n      titleEn\n      category {\n        name\n      }\n    }\n    workshop {\n      language\n      titleEn\n    }\n    forCompany {\n      uid\n      brandName\n      industry {\n        name\n      }\n    }\n    forSeason {\n      uid\n    }\n  }\n}\n\nquery CurrentCompanyApplication {\n  talkCategories {\n    name\n  }\n  availableCocktailTypes {\n    type\n  }\n  booths {\n    name\n    key\n  }\n  companyApplication {\n    ...frag_CompanyApplication\n  }\n}\n\nquery MyResume {\n  profile {\n    resume {\n      uid\n      updatedAt\n      city\n      cv {\n        url\n        name\n        mimeType\n      }\n      faculty {\n        name\n        module\n        specialization\n      }\n      interests\n      technologies\n      projects {\n        project\n        position\n        start\n        until\n      }\n      volunteerExperiences {\n        organisation\n        position\n        start\n        until\n      }\n      workExperiences {\n        company\n        position\n        start\n        until\n      }\n      studyYears {\n        studyType\n        studyYear\n      }\n      extraField\n    }\n  }\n}\n\nquery Resume($uid: String!) {\n  resume(uid: $uid) {\n    uid\n    faculty {\n      name\n      module\n    }\n    user {\n      name\n      email\n      phone\n    }\n    studyYears {\n      studyYear\n      studyType\n    }\n    projects {\n      project\n      position\n      start\n      until\n    }\n    technologies\n    interests\n    city\n    cv {\n      url\n    }\n    volunteerExperiences {\n      organisation\n      position\n      start\n      until\n    }\n    workExperiences {\n      company\n      position\n      start\n      until\n    }\n    extraField\n  }\n  resumeIsFavourite(uid: $uid)\n}\n\nquery ProfileBaseData {\n  booths {\n    key\n    name\n  }\n  companyApplication {\n    workshop {\n      titleEn\n    }\n    talk {\n      titleEn\n    }\n    booth\n    wantsPanel\n    wantsCocktail\n    approval {\n      booth\n      workshopParticipants\n      talkParticipants\n      panel\n      cocktail\n    }\n    userApplications {\n      workshop\n      talk\n    }\n  }\n  profile {\n    resume {\n      uid\n    }\n  }\n  calendar {\n    uid\n    title\n    forWorkshop {\n      uid\n      titleHr\n      titleEn\n      descriptionHr\n      descriptionEn\n      reservation\n    }\n    forTalk {\n      uid\n      titleHr\n      titleEn\n      descriptionHr\n      descriptionEn\n      reservation\n    }\n    forPanel {\n      uid\n      name\n      description\n      reservation\n    }\n  }\n  currentSeason {\n    ...frag_Season\n    companyComponentAverageRatings {\n      component\n      averageRating\n    }\n  }\n}\n\nquery AdminFeedbackInfo($seasonUid: String!) {\n  companyApplications(\n    season: $seasonUid\n    orderBy: {forCompany: {brandName: desc}}\n  ) {\n    forCompany {\n      uid\n      brandName\n    }\n    feedback {\n      ...frag_AllFeedback\n    }\n  }\n}\n\nquery PageAdminSeasonScheduleBase($seasonUid: String!) {\n  participants(season: $seasonUid) {\n    uid\n    brandName\n    program {\n      talk {\n        uid\n        event {\n          uid\n          type\n          title\n          start\n          end\n          location\n          text\n          grouped\n        }\n      }\n      workshop {\n        uid\n        event {\n          uid\n          type\n          title\n          start\n          end\n          location\n          text\n          grouped\n        }\n      }\n      panelParticipants {\n        firstName\n        lastName\n        photo {\n          fullUrl\n          thumbUrl\n        }\n      }\n    }\n  }\n  season(uid: $seasonUid) {\n    panel {\n      uid\n      name\n      description\n      companies {\n        uid\n      }\n      event {\n        uid\n        type\n        title\n        start\n        end\n        location\n        text\n        grouped\n      }\n    }\n    calendar {\n      uid\n      type\n      title\n      start\n      end\n      location\n      text\n      grouped\n    }\n  }\n}\n\nquery AdminReservationsData($seasonUid: String!) {\n  season(uid: $seasonUid) {\n    reservations {\n      uid\n      type\n      count\n    }\n  }\n  participants(season: $seasonUid) {\n    uid\n    vat\n    brandName\n    program {\n      workshop {\n        uid\n        titleHr\n      }\n      talk {\n        uid\n        titleHr\n      }\n      panel {\n        uid\n        name\n      }\n    }\n  }\n}\n\nquery PageScheduleBase {\n  calendar {\n    uid\n    title\n    text\n    start\n    end\n    type\n    grouped\n    location\n    hasEvent\n  }\n}\n\nquery PageAdminUserEditBase($uid: String!) {\n  user(uid: $uid) {\n    uid\n    name\n    firstName\n    lastName\n    email\n    phone\n    roles {\n      name\n    }\n    eventLog {\n      id\n      date\n      name\n      data\n    }\n  }\n  roles {\n    name\n  }\n  sessionsFor(uid: $uid) {\n    sessionId\n    ip\n    userAgent\n    loggedInAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query PageAdminSeasonSeasonData($uid: String!) {\n            season(uid: $uid) {\n                uid\n                name\n                startsAt\n                endsAt\n                applicationsFrom\n                applicationsUntil\n            }\n        }\n        "): (typeof documents)["\n        query PageAdminSeasonSeasonData($uid: String!) {\n            season(uid: $uid) {\n                uid\n                name\n                startsAt\n                endsAt\n                applicationsFrom\n                applicationsUntil\n            }\n        }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation PageAdminSeasonApplicationsCompanyEdit_DeleteApplication($company: String!, $season: String!) {\n            deleteCompanyApplicationFor(\n              company: $company\n              season: $season\n            )\n          }\n          "): (typeof documents)["\n          mutation PageAdminSeasonApplicationsCompanyEdit_DeleteApplication($company: String!, $season: String!) {\n            deleteCompanyApplicationFor(\n              company: $company\n              season: $season\n            )\n          }\n          "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            mutation PageAdminSeasonApplicationsCompanyEdit_UpsertApplication($company: String!, $season: String!, $info: CompanyApplicationCreateInput!) {\n                createCompanyApplicationFor(company: $company, season: $season, info: $info) {\n                    entity {\n                        talk {\n                            uid\n                        }\n                        workshop {\n                            uid\n                        }\n                        wantsCocktail\n                        wantsPanel\n                    }\n\n                    errors {\n                        field\n                        message\n                    }\n                }\n            }\n            "): (typeof documents)["\n            mutation PageAdminSeasonApplicationsCompanyEdit_UpsertApplication($company: String!, $season: String!, $info: CompanyApplicationCreateInput!) {\n                createCompanyApplicationFor(company: $company, season: $season, info: $info) {\n                    entity {\n                        talk {\n                            uid\n                        }\n                        workshop {\n                            uid\n                        }\n                        wantsCocktail\n                        wantsPanel\n                    }\n\n                    errors {\n                        field\n                        message\n                    }\n                }\n            }\n            "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PageAdminSeasonApplicationsApproval_Base($season: String!) {\n            season(uid: $season) {\n                name\n                startsAt\n                endsAt\n                applications {\n                    wantsPanel\n                    wantsCocktail\n                    booth\n                    talk {\n                        titleEn\n                        titleHr\n                    }\n                    workshop {\n                        titleEn\n                        titleHr\n                    }\n                    forCompany {\n                        uid\n                        legalName\n                        brandName\n                    }\n                    approval {\n                        booth\n                        talkParticipants\n                        workshopParticipants\n                        panel\n                        cocktail\n                        logoHidden\n                    }\n                }\n            }\n          }\n        "): (typeof documents)["\n          query PageAdminSeasonApplicationsApproval_Base($season: String!) {\n            season(uid: $season) {\n                name\n                startsAt\n                endsAt\n                applications {\n                    wantsPanel\n                    wantsCocktail\n                    booth\n                    talk {\n                        titleEn\n                        titleHr\n                    }\n                    workshop {\n                        titleEn\n                        titleHr\n                    }\n                    forCompany {\n                        uid\n                        legalName\n                        brandName\n                    }\n                    approval {\n                        booth\n                        talkParticipants\n                        workshopParticipants\n                        panel\n                        cocktail\n                        logoHidden\n                    }\n                }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation PageAdminSeasonApplicationsApproval_ApproveCompanyApplications($companies: [ApproveCompanyApplicationsInput!]!, $season: String!) {\n          approveCompanyApplications(companies: $companies, season: $season) {\n            booth\n            talkParticipants\n            workshopParticipants\n            panel\n            cocktail\n            forApplication {\n              forCompany {\n                uid\n              }\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation PageAdminSeasonApplicationsApproval_ApproveCompanyApplications($companies: [ApproveCompanyApplicationsInput!]!, $season: String!) {\n          approveCompanyApplications(companies: $companies, season: $season) {\n            booth\n            talkParticipants\n            workshopParticipants\n            panel\n            cocktail\n            forApplication {\n              forCompany {\n                uid\n              }\n            }\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PageAdminSeasonLiveVoteResults_Data($seasonUid: String!) {\n      liveVoteResults(seasonUid: $seasonUid) {\n        option\n        voteCount\n      }\n\n      liveVoteComments(seasonUid: $seasonUid) {\n        id\n        comment\n        createdAt\n        forUser {\n          name\n        }\n      }\n    }"): (typeof documents)["\n    query PageAdminSeasonLiveVoteResults_Data($seasonUid: String!) {\n      liveVoteResults(seasonUid: $seasonUid) {\n        option\n        voteCount\n      }\n\n      liveVoteComments(seasonUid: $seasonUid) {\n        id\n        comment\n        createdAt\n        forUser {\n          name\n        }\n      }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageAdminSeasonLiveVoteResults_DeleteComment($commentId: Int!) {\n      deleteLiveVoteComment(commentId: $commentId)\n    }\n  "): (typeof documents)["\n    mutation PageAdminSeasonLiveVoteResults_DeleteComment($commentId: Int!) {\n      deleteLiveVoteComment(commentId: $commentId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PageAdminSeasonRatingsCompanies_Data($season: String!) {\n      season(uid: $season) {\n        applications {\n          forCompany {\n            uid\n            legalName\n            brandName\n            ratings {\n              averageRating\n              component\n            }\n          }\n        }\n      }\n    }\n    "): (typeof documents)["\n    query PageAdminSeasonRatingsCompanies_Data($season: String!) {\n      season(uid: $season) {\n        applications {\n          forCompany {\n            uid\n            legalName\n            brandName\n            ratings {\n              averageRating\n              component\n            }\n          }\n        }\n      }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PageAdminSeasonRatingsQrCodesData($season: String!) {\n      season(uid: $season) {\n        name\n        startsAt\n        endsAt\n        applications {\n          forCompany {\n            uid\n            legalName\n            brandName\n          }\n          approval {\n            booth\n            talkParticipants\n            workshopParticipants\n            panel\n          }\n        }\n      }\n    }\n    "): (typeof documents)["\n    query PageAdminSeasonRatingsQrCodesData($season: String!) {\n      season(uid: $season) {\n        name\n        startsAt\n        endsAt\n        applications {\n          forCompany {\n            uid\n            legalName\n            brandName\n          }\n          approval {\n            booth\n            talkParticipants\n            workshopParticipants\n            panel\n          }\n        }\n      }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PageAdminSeasonReservationsScannedData($season: String!) {\n      gateGuardianScanList(season: $season) {\n        eventType\n        eventId\n        forUser {\n          uid\n          name\n          email\n          phone\n        }\n        scannedBy {\n          uid\n          name\n        }\n        forCalendarItem {\n          uid\n          companies {\n            uid\n            brandName\n          }\n          forTalk {\n            uid\n            titleHr\n            titleEn\n          }\n          forWorkshop {\n            uid\n            titleHr\n            titleEn\n          }\n          forPanel {\n            uid\n            name\n          }\n        }\n        scannedAt\n      }\n    }\n  "): (typeof documents)["\n    query PageAdminSeasonReservationsScannedData($season: String!) {\n      gateGuardianScanList(season: $season) {\n        eventType\n        eventId\n        forUser {\n          uid\n          name\n          email\n          phone\n        }\n        scannedBy {\n          uid\n          name\n        }\n        forCalendarItem {\n          uid\n          companies {\n            uid\n            brandName\n          }\n          forTalk {\n            uid\n            titleHr\n            titleEn\n          }\n          forWorkshop {\n            uid\n            titleHr\n            titleEn\n          }\n          forPanel {\n            uid\n            name\n          }\n        }\n        scannedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PageAdminUsersScanners {\n          users {\n            uid\n            name\n            email\n            roles {\n              name\n            }\n          }\n      }\n    "): (typeof documents)["\n      query PageAdminUsersScanners {\n          users {\n            uid\n            name\n            email\n            roles {\n              name\n            }\n          }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageAdminUsersScannersUpdateIsScanner($uid: String!, $isScanner: Boolean!) {\n      updateScannerStatusFor(uid: $uid, isScanner: $isScanner)\n    }\n  "): (typeof documents)["\n    mutation PageAdminUsersScannersUpdateIsScanner($uid: String!, $isScanner: Boolean!) {\n      updateScannerStatusFor(uid: $uid, isScanner: $isScanner)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                query PageCalendarEventData($uid: String!) {\n                  calendarItem(uid: $uid) {\n                      hasEvent\n                      type\n                  }\n                  calendarItemCompanyUid(uid: $uid)\n                }\n              "): (typeof documents)["\n                query PageCalendarEventData($uid: String!) {\n                  calendarItem(uid: $uid) {\n                      hasEvent\n                      type\n                  }\n                  calendarItemCompanyUid(uid: $uid)\n                }\n              "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PageCompanyUidRate_Data($seasonUid: String!, $companyUid: String!, $component: String!) {\n        userCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component) {\n          rating\n          comment\n        }\n        currentSeason {\n          eventFrom\n          eventUntil\n        }\n      }\n    "): (typeof documents)["\n      query PageCompanyUidRate_Data($seasonUid: String!, $companyUid: String!, $component: String!) {\n        userCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component) {\n          rating\n          comment\n        }\n        currentSeason {\n          eventFrom\n          eventUntil\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageCompanyUidRate_Upsert($seasonUid: String!, $companyUid: String!, $component: String!, $rating: Int!, $comment: String) {\n      upsertUserCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component, rating: $rating, comment: $comment) {\n        rating\n        comment\n      }\n    }\n  "): (typeof documents)["\n    mutation PageCompanyUidRate_Upsert($seasonUid: String!, $companyUid: String!, $component: String!, $rating: Int!, $comment: String) {\n      upsertUserCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component, rating: $rating, comment: $comment) {\n        rating\n        comment\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageCompanyUidRate_Delete($seasonUid: String!, $companyUid: String!, $component: String!) {\n      deleteUserCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component)\n    }\n  "): (typeof documents)["\n    mutation PageCompanyUidRate_Delete($seasonUid: String!, $companyUid: String!, $component: String!) {\n      deleteUserCompanyComponentRating(seasonUid: $seasonUid, companyUid: $companyUid, component: $component)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation PageGateGuardian_Scan($userUid: String!, $eventUid: String!, $eventType: String!) {\n              gateGuardianScan(userUid: $userUid, eventUid: $eventUid, eventType: $eventType) {\n                  user {\n                      name\n                      phone\n                  }\n                  hasReservation\n                  alreadyScanned\n                  error\n              }\n          }\n      "): (typeof documents)["\n          mutation PageGateGuardian_Scan($userUid: String!, $eventUid: String!, $eventType: String!) {\n              gateGuardianScan(userUid: $userUid, eventUid: $eventUid, eventType: $eventType) {\n                  user {\n                      name\n                      phone\n                  }\n                  hasReservation\n                  alreadyScanned\n                  error\n              }\n          }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            query PageGateGuardian_EventList {\n                calendar {\n                    uid\n                    title\n                    text\n                    type\n                }\n            }\n        "): (typeof documents)["\n            query PageGateGuardian_EventList {\n                calendar {\n                    uid\n                    title\n                    text\n                    type\n                }\n            }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PageLiveVoteSeason_Data($uid: String!) {\n      season(uid: $uid) {\n        uid\n        name\n        startsAt\n        endsAt\n        applicationsFrom\n        applicationsUntil\n        applicationsEditableFrom\n        applicationsEditableUntil\n        showParticipantsFrom\n        showParticipantsUntil\n        showPartnersFrom\n        showPartnersUntil\n        showSponsorsFrom\n        showSponsorsUntil\n        eventFrom\n        eventUntil\n        feedbackFrom\n        feedbackUntil\n        scheduleFrom\n        scheduleUntil\n      }\n    }\n    "): (typeof documents)["\n    query PageLiveVoteSeason_Data($uid: String!) {\n      season(uid: $uid) {\n        uid\n        name\n        startsAt\n        endsAt\n        applicationsFrom\n        applicationsUntil\n        applicationsEditableFrom\n        applicationsEditableUntil\n        showParticipantsFrom\n        showParticipantsUntil\n        showPartnersFrom\n        showPartnersUntil\n        showSponsorsFrom\n        showSponsorsUntil\n        eventFrom\n        eventUntil\n        feedbackFrom\n        feedbackUntil\n        scheduleFrom\n        scheduleUntil\n      }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PageLiveVoteSeasonIndex_Data($seasonUid: String!) {\n      myLiveVote(seasonUid: $seasonUid) {\n        option\n      }\n      myLiveVoteComments(seasonUid: $seasonUid) {\n        id\n        comment\n      }\n    }\n    "): (typeof documents)["\n    query PageLiveVoteSeasonIndex_Data($seasonUid: String!) {\n      myLiveVote(seasonUid: $seasonUid) {\n        option\n      }\n      myLiveVoteComments(seasonUid: $seasonUid) {\n        id\n        comment\n      }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageLiveVoteSeasonIndex_DeleteComment($commentId: Int!) {\n      deleteLiveVoteComment(commentId: $commentId)\n    }\n  "): (typeof documents)["\n    mutation PageLiveVoteSeasonIndex_DeleteComment($commentId: Int!) {\n      deleteLiveVoteComment(commentId: $commentId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageLiveVoteSeasonIndex_SubmitComment($seasonUid: String!, $comment: String!) {\n      createLiveVoteComment(seasonUid: $seasonUid, comment: $comment) {\n        id\n        comment\n      }\n    }\n  "): (typeof documents)["\n    mutation PageLiveVoteSeasonIndex_SubmitComment($seasonUid: String!, $comment: String!) {\n      createLiveVoteComment(seasonUid: $seasonUid, comment: $comment) {\n        id\n        comment\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageLiveVoteSeasonIndex_SubmitVote($seasonUid: String!, $vote: String!) {\n      createLiveVote(seasonUid: $seasonUid, vote: $vote) {\n        option\n      }\n    }\n  "): (typeof documents)["\n    mutation PageLiveVoteSeasonIndex_SubmitVote($seasonUid: String!, $vote: String!) {\n      createLiveVote(seasonUid: $seasonUid, vote: $vote) {\n        option\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PageLiveVoteSeasonViewLiveVoteResults_LiveVoteResults($seasonUid: String!) {\n      liveVoteResults(seasonUid: $seasonUid) {\n        option\n        voteCount\n      }\n    }\n    "): (typeof documents)["\n    query PageLiveVoteSeasonViewLiveVoteResults_LiveVoteResults($seasonUid: String!) {\n      liveVoteResults(seasonUid: $seasonUid) {\n        option\n        voteCount\n      }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query PageParticipants_Base {\n          participants {\n            uid\n            website\n            brandName\n            descriptionEn\n            descriptionHr\n            logoHidden\n            rasterLogo {\n                thumbUrl\n                fullUrl\n            }\n            ratings {\n              averageRating\n              ratingCount\n              component\n            }\n          }\n        }\n      "): (typeof documents)["\n        query PageParticipants_Base {\n          participants {\n            uid\n            website\n            brandName\n            descriptionEn\n            descriptionHr\n            logoHidden\n            rasterLogo {\n                thumbUrl\n                fullUrl\n            }\n            ratings {\n              averageRating\n              ratingCount\n              component\n            }\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PageParticipants_Ratings {\n        participants {\n          uid\n          brandName\n          ratings {\n            averageRating\n            ratingCount\n            component\n          }\n        }\n      }\n    "): (typeof documents)["\n      query PageParticipants_Ratings {\n        participants {\n          uid\n          brandName\n          ratings {\n            averageRating\n            ratingCount\n            component\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation PageProfileMeCompanyScanUserQrScan($userUid: String!) {\n          scanUserQr(userUid: $userUid) {\n              user {\n                  uid\n                  name\n                  email\n              }\n              isStarred\n              alreadyScanned\n              note\n              error\n          }\n      }\n  "): (typeof documents)["\n      mutation PageProfileMeCompanyScanUserQrScan($userUid: String!) {\n          scanUserQr(userUid: $userUid) {\n              user {\n                  uid\n                  name\n                  email\n              }\n              isStarred\n              alreadyScanned\n              note\n              error\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageProfileMeCompanyScanUserQrRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {\n        scanUserQrRefine(userUid: $userUid, refineData: $refineData) {\n            user {\n                uid\n                name\n                email\n            }\n            isStarred\n            note\n            error\n        }\n    }\n  "): (typeof documents)["\n    mutation PageProfileMeCompanyScanUserQrRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {\n        scanUserQrRefine(userUid: $userUid, refineData: $refineData) {\n            user {\n                uid\n                name\n                email\n            }\n            isStarred\n            note\n            error\n        }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PageProfileMeCompanyScansListData(\n        $companyUid: String\n        $seasonUid: String\n      ) {\n        scannedUsers(companyUid: $companyUid, seasonUid: $seasonUid) {\n          user {\n            uid\n            name\n            email\n            phone\n          }\n          note\n          isStarred\n          scannedAt\n        }\n      }\n    "): (typeof documents)["\n      query PageProfileMeCompanyScansListData(\n        $companyUid: String\n        $seasonUid: String\n      ) {\n        scannedUsers(companyUid: $companyUid, seasonUid: $seasonUid) {\n          user {\n            uid\n            name\n            email\n            phone\n          }\n          note\n          isStarred\n          scannedAt\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PageProfileMeCompanyScansListRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {\n        scanUserQrRefine(userUid: $userUid, refineData: $refineData) {\n            user {\n                uid\n                name\n                email\n                phone\n            }\n            isStarred\n            note\n            error\n        }\n    }\n  "): (typeof documents)["\n    mutation PageProfileMeCompanyScansListRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {\n        scanUserQrRefine(userUid: $userUid, refineData: $refineData) {\n            user {\n                uid\n                name\n                email\n                phone\n            }\n            isStarred\n            note\n            error\n        }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PageProfileMeCompanySignup_Data {\n              talkCategories {\n                  name\n              }\n              booths {\n                  name\n                  key\n              }\n              companyApplication {\n                  booth\n                  wantsPanel\n                  wantsCocktail\n                  contactPerson {\n                      name\n                      email\n                      phone\n                  }\n                  talk {\n                      titleEn\n                      titleHr\n                      descriptionEn\n                      descriptionHr\n                      language\n                      category {\n                          name\n                      }\n                      presenters {\n                          firstName\n                          lastName\n                          bioHr\n                          bioEn\n                          photo {\n                            name\n                            uid\n                            full {\n                              mimeType\n                            }\n                          }\n                      }\n                  }\n                  workshop {\n                      titleEn\n                      titleHr\n                      descriptionEn\n                      descriptionHr\n                      language\n                      goal\n                      notesEn\n                      notesHr\n                      presenters {\n                          firstName\n                          lastName\n                          bioHr\n                          bioEn\n                          photo {\n                            name\n                            uid\n                            full {\n                              mimeType\n                            }\n                          }\n                      }\n                  }\n              }\n          }\n        "): (typeof documents)["\n          query PageProfileMeCompanySignup_Data {\n              talkCategories {\n                  name\n              }\n              booths {\n                  name\n                  key\n              }\n              companyApplication {\n                  booth\n                  wantsPanel\n                  wantsCocktail\n                  contactPerson {\n                      name\n                      email\n                      phone\n                  }\n                  talk {\n                      titleEn\n                      titleHr\n                      descriptionEn\n                      descriptionHr\n                      language\n                      category {\n                          name\n                      }\n                      presenters {\n                          firstName\n                          lastName\n                          bioHr\n                          bioEn\n                          photo {\n                            name\n                            uid\n                            full {\n                              mimeType\n                            }\n                          }\n                      }\n                  }\n                  workshop {\n                      titleEn\n                      titleHr\n                      descriptionEn\n                      descriptionHr\n                      language\n                      goal\n                      notesEn\n                      notesHr\n                      presenters {\n                          firstName\n                          lastName\n                          bioHr\n                          bioEn\n                          photo {\n                            name\n                            uid\n                            full {\n                              mimeType\n                            }\n                          }\n                      }\n                  }\n              }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            mutation PageProfileMeCompanySignup_CreateApplication($info: CompanyApplicationCreateInput!) {\n              createCompanyApplication(info: $info) {\n                entity {\n                  talk {\n                    uid\n                  }\n                  workshop {\n                    uid\n                  }\n                  wantsCocktail\n                  wantsPanel\n                }\n\n                errors {\n                  field\n                  message\n                }\n              }\n            }\n          "): (typeof documents)["\n            mutation PageProfileMeCompanySignup_CreateApplication($info: CompanyApplicationCreateInput!) {\n              createCompanyApplication(info: $info) {\n                entity {\n                  talk {\n                    uid\n                  }\n                  workshop {\n                    uid\n                  }\n                  wantsCocktail\n                  wantsPanel\n                }\n\n                errors {\n                  field\n                  message\n                }\n              }\n            }\n          "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation StoreCalendarEventToggleReservation($input: EventReservationUpdateInput!) {\n        updateEventReservation(input: $input) {\n            entity {\n                status\n            }\n            errors {\n                field\n                message\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation StoreCalendarEventToggleReservation($input: EventReservationUpdateInput!) {\n        updateEventReservation(input: $input) {\n            entity {\n                status\n            }\n            errors {\n                field\n                message\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StoreCalendarEventsAllCalendarFragment on CalendarItem {\n        uid\n        location\n        start\n        end\n        capacity\n        forWorkshop {\n            uid\n            titleHr\n            titleEn\n            descriptionHr\n            descriptionEn\n            reservation\n        }\n        forTalk {\n            uid\n            titleHr\n            titleEn\n            descriptionHr\n            descriptionEn\n            reservation\n        }\n        forPanel {\n            uid\n            name\n            description\n            reservation\n            companies {\n                uid\n                brandName\n            }\n        }\n        companies {\n            uid\n            brandName\n            rasterLogo {\n                fullUrl\n                thumbUrl\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment StoreCalendarEventsAllCalendarFragment on CalendarItem {\n        uid\n        location\n        start\n        end\n        capacity\n        forWorkshop {\n            uid\n            titleHr\n            titleEn\n            descriptionHr\n            descriptionEn\n            reservation\n        }\n        forTalk {\n            uid\n            titleHr\n            titleEn\n            descriptionHr\n            descriptionEn\n            reservation\n        }\n        forPanel {\n            uid\n            name\n            description\n            reservation\n            companies {\n                uid\n                brandName\n            }\n        }\n        companies {\n            uid\n            brandName\n            rasterLogo {\n                fullUrl\n                thumbUrl\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query StoreCalendarEventsAll {\n          calendar {\n              ...StoreCalendarEventsAllCalendarFragment\n          }\n\n          currentSeason {\n              reservations {\n                  uid\n                  type\n                  count\n              }\n          }\n      }\n  "): (typeof documents)["\n      query StoreCalendarEventsAll {\n          calendar {\n              ...StoreCalendarEventsAllCalendarFragment\n          }\n\n          currentSeason {\n              reservations {\n                  uid\n                  type\n                  count\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            mutation ResumeSetIsFavourite($uid: String!, $isFavourite: Boolean!) {\n                resumeSetIsFavourite(uid: $uid, isFavourite: $isFavourite)\n            }\n        "): (typeof documents)["\n            mutation ResumeSetIsFavourite($uid: String!, $isFavourite: Boolean!) {\n                resumeSetIsFavourite(uid: $uid, isFavourite: $isFavourite)\n            }\n        "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;
/* eslint-disable */
/**
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * DO NOT EDIT THIS FILE MANUALLY!
 *
 * This file is automatically generated
 * by running `yarn graphql:schema:gen`
 *
 * Any edits done to this file will be
 * overwritten on subsequent runs!
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */
import type { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format. */
  DateTimeISO: { input: string | Date; output: string | Date; }
  /** The `Upload` scalar type represents a file upload. */
  Upload: { input: unknown; output: unknown; }
};

export type IApplicationCocktail = {
  _count?: Maybe<IApplicationCocktailCount>;
  colour: Scalars['String']['output'];
  forApplication: Array<ICompanyApplication>;
  name: Scalars['String']['output'];
};

export type IApplicationCocktailCount = {
  forApplication: Scalars['Int']['output'];
};


export type IApplicationCocktailCountForApplicationArgs = {
  where?: InputMaybe<ICompanyApplicationWhereInput>;
};

export type IApplicationCocktailNullableRelationFilter = {
  is?: InputMaybe<IApplicationCocktailWhereInput>;
  isNot?: InputMaybe<IApplicationCocktailWhereInput>;
};

export type IApplicationCocktailOrderByWithRelationInput = {
  colour?: InputMaybe<ISortOrder>;
  name?: InputMaybe<ISortOrder>;
};

export type IApplicationCocktailWhereInput = {
  AND?: InputMaybe<Array<IApplicationCocktailWhereInput>>;
  NOT?: InputMaybe<Array<IApplicationCocktailWhereInput>>;
  OR?: InputMaybe<Array<IApplicationCocktailWhereInput>>;
  colour?: InputMaybe<IStringFilter>;
  name?: InputMaybe<IStringFilter>;
};

export type IApplicationPresenter = {
  _count?: Maybe<IApplicationPresenterCount>;
  bioEn: Scalars['String']['output'];
  bioHr: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  firstName: Scalars['String']['output'];
  lastName: Scalars['String']['output'];
  photo?: Maybe<IImage>;
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IApplicationPresenterCount = {
  forPanels: Scalars['Int']['output'];
  forTalks: Scalars['Int']['output'];
  forWorkshops: Scalars['Int']['output'];
};


export type IApplicationPresenterCountForPanelsArgs = {
  where?: InputMaybe<ICompanyApplicationWhereInput>;
};


export type IApplicationPresenterCountForTalksArgs = {
  where?: InputMaybe<IApplicationTalkWhereInput>;
};


export type IApplicationPresenterCountForWorkshopsArgs = {
  where?: InputMaybe<IApplicationWorkshopWhereInput>;
};

export type IApplicationPresenterListRelationFilter = {
  every?: InputMaybe<IApplicationPresenterWhereInput>;
  none?: InputMaybe<IApplicationPresenterWhereInput>;
  some?: InputMaybe<IApplicationPresenterWhereInput>;
};

export type IApplicationPresenterOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IApplicationPresenterWhereInput = {
  AND?: InputMaybe<Array<IApplicationPresenterWhereInput>>;
  NOT?: InputMaybe<Array<IApplicationPresenterWhereInput>>;
  OR?: InputMaybe<Array<IApplicationPresenterWhereInput>>;
  bioEn?: InputMaybe<IStringFilter>;
  bioHr?: InputMaybe<IStringFilter>;
  firstName?: InputMaybe<IStringFilter>;
  lastName?: InputMaybe<IStringFilter>;
  photo?: InputMaybe<IImageNullableRelationFilter>;
};

export type IApplicationTalk = {
  _count?: Maybe<IApplicationTalkCount>;
  category: IApplicationTalkCategory;
  createdAt: Scalars['DateTimeISO']['output'];
  descriptionEn: Scalars['String']['output'];
  descriptionHr: Scalars['String']['output'];
  event?: Maybe<ICalendarItem>;
  language: Scalars['String']['output'];
  presenters: Array<IApplicationPresenter>;
  reservation: Scalars['Float']['output'];
  titleEn: Scalars['String']['output'];
  titleHr: Scalars['String']['output'];
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IApplicationTalkCategory = {
  _count?: Maybe<IApplicationTalkCategoryCount>;
  forSeason?: Maybe<ISeason>;
  name: Scalars['String']['output'];
};

export type IApplicationTalkCategoryCount = {
  talks: Scalars['Int']['output'];
};


export type IApplicationTalkCategoryCountTalksArgs = {
  where?: InputMaybe<IApplicationTalkWhereInput>;
};

export type IApplicationTalkCategoryForSeasonIdNameCompoundUniqueInput = {
  forSeasonId: Scalars['Int']['input'];
  name: Scalars['String']['input'];
};

export type IApplicationTalkCategoryOrderByWithRelationInput = {
  forSeason?: InputMaybe<ISeasonOrderByWithRelationInput>;
  name?: InputMaybe<ISortOrder>;
};

export type IApplicationTalkCategoryRelationFilter = {
  is?: InputMaybe<IApplicationTalkCategoryWhereInput>;
  isNot?: InputMaybe<IApplicationTalkCategoryWhereInput>;
};

export enum IApplicationTalkCategoryScalarFieldEnum {
  ForSeasonId = 'forSeasonId',
  Id = 'id',
  Name = 'name'
}

export type IApplicationTalkCategoryWhereInput = {
  AND?: InputMaybe<Array<IApplicationTalkCategoryWhereInput>>;
  NOT?: InputMaybe<Array<IApplicationTalkCategoryWhereInput>>;
  OR?: InputMaybe<Array<IApplicationTalkCategoryWhereInput>>;
  forSeason?: InputMaybe<ISeasonNullableRelationFilter>;
  name?: InputMaybe<IStringFilter>;
};

export type IApplicationTalkCategoryWhereUniqueInput = {
  AND?: InputMaybe<Array<IApplicationTalkCategoryWhereInput>>;
  NOT?: InputMaybe<Array<IApplicationTalkCategoryWhereInput>>;
  OR?: InputMaybe<Array<IApplicationTalkCategoryWhereInput>>;
  forSeason?: InputMaybe<ISeasonNullableRelationFilter>;
  forSeasonId_name?: InputMaybe<IApplicationTalkCategoryForSeasonIdNameCompoundUniqueInput>;
  name?: InputMaybe<IStringFilter>;
};

export type IApplicationTalkCount = {
  presenters: Scalars['Int']['output'];
};


export type IApplicationTalkCountPresentersArgs = {
  where?: InputMaybe<IApplicationPresenterWhereInput>;
};

export type IApplicationTalkNullableRelationFilter = {
  is?: InputMaybe<IApplicationTalkWhereInput>;
  isNot?: InputMaybe<IApplicationTalkWhereInput>;
};

export type IApplicationTalkOrderByWithRelationInput = {
  category?: InputMaybe<IApplicationTalkCategoryOrderByWithRelationInput>;
  descriptionEn?: InputMaybe<ISortOrder>;
  descriptionHr?: InputMaybe<ISortOrder>;
  event?: InputMaybe<ICalendarItemOrderByWithRelationInput>;
  language?: InputMaybe<ISortOrder>;
  titleEn?: InputMaybe<ISortOrder>;
  titleHr?: InputMaybe<ISortOrder>;
};

export type IApplicationTalkWhereInput = {
  AND?: InputMaybe<Array<IApplicationTalkWhereInput>>;
  NOT?: InputMaybe<Array<IApplicationTalkWhereInput>>;
  OR?: InputMaybe<Array<IApplicationTalkWhereInput>>;
  category?: InputMaybe<IApplicationTalkCategoryRelationFilter>;
  descriptionEn?: InputMaybe<IStringFilter>;
  descriptionHr?: InputMaybe<IStringFilter>;
  event?: InputMaybe<ICalendarItemNullableRelationFilter>;
  language?: InputMaybe<IStringFilter>;
  titleEn?: InputMaybe<IStringFilter>;
  titleHr?: InputMaybe<IStringFilter>;
};

export type IApplicationWorkshop = {
  _count?: Maybe<IApplicationWorkshopCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  descriptionEn: Scalars['String']['output'];
  descriptionHr: Scalars['String']['output'];
  event?: Maybe<ICalendarItem>;
  goal: Scalars['String']['output'];
  language: Scalars['String']['output'];
  notesEn: Scalars['String']['output'];
  notesHr: Scalars['String']['output'];
  presenters: Array<IApplicationPresenter>;
  reservation: Scalars['Float']['output'];
  titleEn: Scalars['String']['output'];
  titleHr: Scalars['String']['output'];
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IApplicationWorkshopCount = {
  presenters: Scalars['Int']['output'];
};


export type IApplicationWorkshopCountPresentersArgs = {
  where?: InputMaybe<IApplicationPresenterWhereInput>;
};

export type IApplicationWorkshopNullableRelationFilter = {
  is?: InputMaybe<IApplicationWorkshopWhereInput>;
  isNot?: InputMaybe<IApplicationWorkshopWhereInput>;
};

export type IApplicationWorkshopOrderByWithRelationInput = {
  descriptionEn?: InputMaybe<ISortOrder>;
  descriptionHr?: InputMaybe<ISortOrder>;
  event?: InputMaybe<ICalendarItemOrderByWithRelationInput>;
  goal?: InputMaybe<ISortOrder>;
  language?: InputMaybe<ISortOrder>;
  notesEn?: InputMaybe<ISortOrder>;
  notesHr?: InputMaybe<ISortOrder>;
  titleEn?: InputMaybe<ISortOrder>;
  titleHr?: InputMaybe<ISortOrder>;
};

export type IApplicationWorkshopWhereInput = {
  AND?: InputMaybe<Array<IApplicationWorkshopWhereInput>>;
  NOT?: InputMaybe<Array<IApplicationWorkshopWhereInput>>;
  OR?: InputMaybe<Array<IApplicationWorkshopWhereInput>>;
  descriptionEn?: InputMaybe<IStringFilter>;
  descriptionHr?: InputMaybe<IStringFilter>;
  event?: InputMaybe<ICalendarItemNullableRelationFilter>;
  goal?: InputMaybe<IStringFilter>;
  language?: InputMaybe<IStringFilter>;
  notesEn?: InputMaybe<IStringFilter>;
  notesHr?: InputMaybe<IStringFilter>;
  titleEn?: InputMaybe<IStringFilter>;
  titleHr?: InputMaybe<IStringFilter>;
};

export type IApproveCompanyApplicationsInput = {
  parts: IApproveCompanyApplicationsInputParts;
  uid: Scalars['String']['input'];
};

export type IApproveCompanyApplicationsInputParts = {
  booth: Scalars['Boolean']['input'];
  cocktail: Scalars['Boolean']['input'];
  logoHidden: Scalars['Boolean']['input'];
  panel: Scalars['Boolean']['input'];
  talkParticipants: Scalars['Float']['input'];
  workshopParticipants: Scalars['Float']['input'];
};

export type IAuthResponse = {
  entity?: Maybe<IUser>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IBoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<INestedBoolFilter>;
};

export type IBooth = {
  key?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

export type ICalendarEvent = {
  class: Scalars['String']['output'];
  end: Scalars['DateTimeISO']['output'];
  location: Scalars['String']['output'];
  noGroup: Scalars['Boolean']['output'];
  start: Scalars['DateTimeISO']['output'];
  text: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

export type ICalendarFilterInput = {
  type?: InputMaybe<Scalars['String']['input']>;
};

export type ICalendarItem = {
  capacity: Scalars['Int']['output'];
  companies?: Maybe<Array<ICompany>>;
  end: Scalars['DateTimeISO']['output'];
  forPanel?: Maybe<ICompanyPanel>;
  forTalk?: Maybe<IApplicationTalk>;
  forWorkshop?: Maybe<IApplicationWorkshop>;
  grouped: Scalars['Boolean']['output'];
  hasEvent: Scalars['Boolean']['output'];
  location?: Maybe<Scalars['String']['output']>;
  start: Scalars['DateTimeISO']['output'];
  text?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  uid: Scalars['String']['output'];
};

export type ICalendarItemListRelationFilter = {
  every?: InputMaybe<ICalendarItemWhereInput>;
  none?: InputMaybe<ICalendarItemWhereInput>;
  some?: InputMaybe<ICalendarItemWhereInput>;
};

export type ICalendarItemNullableRelationFilter = {
  is?: InputMaybe<ICalendarItemWhereInput>;
  isNot?: InputMaybe<ICalendarItemWhereInput>;
};

export type ICalendarItemOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type ICalendarItemOrderByWithRelationInput = {
  end?: InputMaybe<ISortOrder>;
  forSeason?: InputMaybe<ISeasonOrderByWithRelationInput>;
  grouped?: InputMaybe<ISortOrder>;
  location?: InputMaybe<ISortOrderInput>;
  start?: InputMaybe<ISortOrder>;
  text?: InputMaybe<ISortOrderInput>;
  title?: InputMaybe<ISortOrderInput>;
  type?: InputMaybe<ISortOrderInput>;
};

export type ICalendarItemWhereInput = {
  AND?: InputMaybe<Array<ICalendarItemWhereInput>>;
  NOT?: InputMaybe<Array<ICalendarItemWhereInput>>;
  OR?: InputMaybe<Array<ICalendarItemWhereInput>>;
  end?: InputMaybe<IDateTimeFilter>;
  forSeason?: InputMaybe<ISeasonRelationFilter>;
  grouped?: InputMaybe<IBoolFilter>;
  location?: InputMaybe<IStringNullableFilter>;
  start?: InputMaybe<IDateTimeFilter>;
  text?: InputMaybe<IStringNullableFilter>;
  title?: InputMaybe<IStringNullableFilter>;
  type?: InputMaybe<IStringNullableFilter>;
};

export type ICalendarUpdateInput = {
  end: Scalars['DateTimeISO']['input'];
  forUid?: InputMaybe<Scalars['String']['input']>;
  grouped?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  season: Scalars['String']['input'];
  start: Scalars['DateTimeISO']['input'];
  text?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

export type ICocktailCreateInput = {
  colour: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type ICompany = {
  _count?: Maybe<ICompanyCount>;
  address: Scalars['String']['output'];
  brandName: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  descriptionEn: Scalars['String']['output'];
  descriptionHr: Scalars['String']['output'];
  industry?: Maybe<IIndustry>;
  legalName: Scalars['String']['output'];
  logoHidden: Scalars['Boolean']['output'];
  members?: Maybe<Array<IUser>>;
  program?: Maybe<ICompanyProgram>;
  rasterLogo?: Maybe<IImage>;
  ratings: Array<IUserCompanyComponentRatingComponentAverage>;
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  vat: Scalars['String']['output'];
  vectorLogo?: Maybe<IFile>;
  website: Scalars['String']['output'];
};

export type ICompanyApplication = {
  _count?: Maybe<ICompanyApplicationCount>;
  approval?: Maybe<ICompanyApplicationApproval>;
  booth?: Maybe<Scalars['String']['output']>;
  cocktail?: Maybe<IApplicationCocktail>;
  contactPerson?: Maybe<ICompanyApplicationContactPerson>;
  createdAt: Scalars['DateTimeISO']['output'];
  feedback?: Maybe<ICompanyApplicationFeedback>;
  forCompany?: Maybe<ICompany>;
  forSeason?: Maybe<ISeason>;
  panelParticipants: Array<IApplicationPresenter>;
  talk?: Maybe<IApplicationTalk>;
  updatedAt: Scalars['DateTimeISO']['output'];
  userApplications: IEventUserApplications;
  wantsCocktail: Scalars['Boolean']['output'];
  wantsPanel: Scalars['Boolean']['output'];
  workshop?: Maybe<IApplicationWorkshop>;
};

export type ICompanyApplicationApproval = {
  booth: Scalars['Boolean']['output'];
  cocktail: Scalars['Boolean']['output'];
  forApplication: ICompanyApplication;
  logoHidden: Scalars['Boolean']['output'];
  panel: Scalars['Boolean']['output'];
  talkParticipants: Scalars['Int']['output'];
  workshopParticipants: Scalars['Int']['output'];
};

export type ICompanyApplicationApprovalNullableRelationFilter = {
  is?: InputMaybe<ICompanyApplicationApprovalWhereInput>;
  isNot?: InputMaybe<ICompanyApplicationApprovalWhereInput>;
};

export type ICompanyApplicationApprovalOrderByWithRelationInput = {
  booth?: InputMaybe<ISortOrder>;
  cocktail?: InputMaybe<ISortOrder>;
  logoHidden?: InputMaybe<ISortOrder>;
  panel?: InputMaybe<ISortOrder>;
  talkParticipants?: InputMaybe<ISortOrder>;
  workshopParticipants?: InputMaybe<ISortOrder>;
};

export type ICompanyApplicationApprovalWhereInput = {
  AND?: InputMaybe<Array<ICompanyApplicationApprovalWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyApplicationApprovalWhereInput>>;
  OR?: InputMaybe<Array<ICompanyApplicationApprovalWhereInput>>;
  booth?: InputMaybe<IBoolFilter>;
  cocktail?: InputMaybe<IBoolFilter>;
  logoHidden?: InputMaybe<IBoolFilter>;
  panel?: InputMaybe<IBoolFilter>;
  talkParticipants?: InputMaybe<IIntFilter>;
  workshopParticipants?: InputMaybe<IIntFilter>;
};

export type ICompanyApplicationApprovedEditInput = {
  cocktail?: InputMaybe<ICocktailCreateInput>;
  panel: Array<IPresenterCreateInput>;
  talk?: InputMaybe<ITalksCreateInput>;
  vat: Scalars['String']['input'];
  workshop?: InputMaybe<IWorkshopsCreateInput>;
};

export type ICompanyApplicationContactPerson = {
  email: Scalars['String']['output'];
  name: Scalars['String']['output'];
  phone: Scalars['String']['output'];
};

export type ICompanyApplicationContactPersonCreateInput = {
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  phone: Scalars['String']['input'];
};

export type ICompanyApplicationContactPersonNullableRelationFilter = {
  is?: InputMaybe<ICompanyApplicationContactPersonWhereInput>;
  isNot?: InputMaybe<ICompanyApplicationContactPersonWhereInput>;
};

export type ICompanyApplicationContactPersonOrderByWithRelationInput = {
  email?: InputMaybe<ISortOrder>;
  name?: InputMaybe<ISortOrder>;
  phone?: InputMaybe<ISortOrder>;
};

export type ICompanyApplicationContactPersonWhereInput = {
  AND?: InputMaybe<Array<ICompanyApplicationContactPersonWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyApplicationContactPersonWhereInput>>;
  OR?: InputMaybe<Array<ICompanyApplicationContactPersonWhereInput>>;
  email?: InputMaybe<IStringFilter>;
  name?: InputMaybe<IStringFilter>;
  phone?: InputMaybe<IStringFilter>;
};

export type ICompanyApplicationCount = {
  panelParticipants: Scalars['Int']['output'];
};


export type ICompanyApplicationCountPanelParticipantsArgs = {
  where?: InputMaybe<IApplicationPresenterWhereInput>;
};

export type ICompanyApplicationCreateInput = {
  booth?: InputMaybe<Scalars['String']['input']>;
  contactPerson: ICompanyApplicationContactPersonCreateInput;
  talk?: InputMaybe<ITalkCreateInput>;
  vat: Scalars['String']['input'];
  wantsCocktail: Scalars['Boolean']['input'];
  wantsPanel: Scalars['Boolean']['input'];
  workshop?: InputMaybe<IWorkshopCreateInput>;
};

export type ICompanyApplicationFeedback = {
  applicationComments: Scalars['String']['output'];
  applicationRating: Scalars['Int']['output'];
  attendanceRating: Scalars['Int']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  dateComments: Scalars['String']['output'];
  dateRating: Scalars['Int']['output'];
  experienceComments: Scalars['String']['output'];
  foodRating: Scalars['Int']['output'];
  mostLiked: Scalars['Int']['output'];
  onsiteRating: Scalars['Int']['output'];
  overallComment: Scalars['String']['output'];
  overallRating: Scalars['Int']['output'];
  recommended: Scalars['Int']['output'];
  testimonial: Scalars['String']['output'];
  timeRating: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type ICompanyApplicationFeedbackCreateInput = {
  applicationComments?: InputMaybe<Scalars['String']['input']>;
  applicationRating: Scalars['Int']['input'];
  attendanceRating: Scalars['Int']['input'];
  dateComments?: InputMaybe<Scalars['String']['input']>;
  dateRating: Scalars['Int']['input'];
  experienceComments?: InputMaybe<Scalars['String']['input']>;
  foodRating: Scalars['Int']['input'];
  mostLiked: Scalars['Int']['input'];
  onsiteRating: Scalars['Int']['input'];
  overallComment?: InputMaybe<Scalars['String']['input']>;
  overallRating: Scalars['Int']['input'];
  recommended: Scalars['Int']['input'];
  testimonial?: InputMaybe<Scalars['String']['input']>;
  timeRating: Scalars['Int']['input'];
};

export type ICompanyApplicationForCompanyIdForSeasonIdCompoundUniqueInput = {
  forCompanyId: Scalars['Int']['input'];
  forSeasonId: Scalars['Int']['input'];
};

export type ICompanyApplicationListRelationFilter = {
  every?: InputMaybe<ICompanyApplicationWhereInput>;
  none?: InputMaybe<ICompanyApplicationWhereInput>;
  some?: InputMaybe<ICompanyApplicationWhereInput>;
};

export type ICompanyApplicationOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type ICompanyApplicationOrderByWithRelationInput = {
  approval?: InputMaybe<ICompanyApplicationApprovalOrderByWithRelationInput>;
  booth?: InputMaybe<ISortOrderInput>;
  cocktail?: InputMaybe<IApplicationCocktailOrderByWithRelationInput>;
  contactPerson?: InputMaybe<ICompanyApplicationContactPersonOrderByWithRelationInput>;
  forCompany?: InputMaybe<ICompanyOrderByWithRelationInput>;
  forSeason?: InputMaybe<ISeasonOrderByWithRelationInput>;
  panel?: InputMaybe<ICompanyPanelOrderByWithRelationInput>;
  panelParticipants?: InputMaybe<IApplicationPresenterOrderByRelationAggregateInput>;
  talk?: InputMaybe<IApplicationTalkOrderByWithRelationInput>;
  wantsCocktail?: InputMaybe<ISortOrder>;
  wantsPanel?: InputMaybe<ISortOrder>;
  workshop?: InputMaybe<IApplicationWorkshopOrderByWithRelationInput>;
};

export enum ICompanyApplicationScalarFieldEnum {
  Booth = 'booth',
  CocktailId = 'cocktailId',
  ContactPersonId = 'contactPersonId',
  CreatedAt = 'createdAt',
  FeedbackFormId = 'feedbackFormId',
  ForCompanyId = 'forCompanyId',
  ForSeasonId = 'forSeasonId',
  Id = 'id',
  PanelId = 'panelId',
  UpdatedAt = 'updatedAt',
  WantsCocktail = 'wantsCocktail',
  WantsPanel = 'wantsPanel'
}

export type ICompanyApplicationWhereInput = {
  AND?: InputMaybe<Array<ICompanyApplicationWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyApplicationWhereInput>>;
  OR?: InputMaybe<Array<ICompanyApplicationWhereInput>>;
  approval?: InputMaybe<ICompanyApplicationApprovalNullableRelationFilter>;
  booth?: InputMaybe<IStringNullableFilter>;
  cocktail?: InputMaybe<IApplicationCocktailNullableRelationFilter>;
  contactPerson?: InputMaybe<ICompanyApplicationContactPersonNullableRelationFilter>;
  forCompany?: InputMaybe<ICompanyRelationFilter>;
  forSeason?: InputMaybe<ISeasonRelationFilter>;
  panel?: InputMaybe<ICompanyPanelNullableRelationFilter>;
  panelParticipants?: InputMaybe<IApplicationPresenterListRelationFilter>;
  talk?: InputMaybe<IApplicationTalkNullableRelationFilter>;
  wantsCocktail?: InputMaybe<IBoolFilter>;
  wantsPanel?: InputMaybe<IBoolFilter>;
  workshop?: InputMaybe<IApplicationWorkshopNullableRelationFilter>;
};

export type ICompanyApplicationWhereUniqueInput = {
  AND?: InputMaybe<Array<ICompanyApplicationWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyApplicationWhereInput>>;
  OR?: InputMaybe<Array<ICompanyApplicationWhereInput>>;
  approval?: InputMaybe<ICompanyApplicationApprovalNullableRelationFilter>;
  booth?: InputMaybe<IStringNullableFilter>;
  cocktail?: InputMaybe<IApplicationCocktailNullableRelationFilter>;
  contactPerson?: InputMaybe<ICompanyApplicationContactPersonNullableRelationFilter>;
  forCompany?: InputMaybe<ICompanyRelationFilter>;
  forCompanyId_forSeasonId?: InputMaybe<ICompanyApplicationForCompanyIdForSeasonIdCompoundUniqueInput>;
  forSeason?: InputMaybe<ISeasonRelationFilter>;
  panel?: InputMaybe<ICompanyPanelNullableRelationFilter>;
  panelParticipants?: InputMaybe<IApplicationPresenterListRelationFilter>;
  talk?: InputMaybe<IApplicationTalkNullableRelationFilter>;
  wantsCocktail?: InputMaybe<IBoolFilter>;
  wantsPanel?: InputMaybe<IBoolFilter>;
  workshop?: InputMaybe<IApplicationWorkshopNullableRelationFilter>;
};

export type ICompanyCount = {
  UserCompanyComponentRatingAveragesView: Scalars['Int']['output'];
  UserCompanyComponentRatings: Scalars['Int']['output'];
  applications: Scalars['Int']['output'];
  favouriteResumes: Scalars['Int']['output'];
  members: Scalars['Int']['output'];
  scannedResumes: Scalars['Int']['output'];
  scannedUsers: Scalars['Int']['output'];
};


export type ICompanyCountUserCompanyComponentRatingAveragesViewArgs = {
  where?: InputMaybe<IUserCompanyComponentRatingAveragesViewWhereInput>;
};


export type ICompanyCountUserCompanyComponentRatingsArgs = {
  where?: InputMaybe<IUserCompanyComponentRatingWhereInput>;
};


export type ICompanyCountApplicationsArgs = {
  where?: InputMaybe<ICompanyApplicationWhereInput>;
};


export type ICompanyCountFavouriteResumesArgs = {
  where?: InputMaybe<IFavouriteResumeWhereInput>;
};


export type ICompanyCountMembersArgs = {
  where?: InputMaybe<IUserWhereInput>;
};


export type ICompanyCountScannedResumesArgs = {
  where?: InputMaybe<IScannedResumeWhereInput>;
};


export type ICompanyCountScannedUsersArgs = {
  where?: InputMaybe<ICompanyScannedUserWhereInput>;
};

export type ICompanyOrderByWithRelationInput = {
  address?: InputMaybe<ISortOrder>;
  brandName?: InputMaybe<ISortOrder>;
  descriptionEn?: InputMaybe<ISortOrder>;
  descriptionHr?: InputMaybe<ISortOrder>;
  legalName?: InputMaybe<ISortOrder>;
  vat?: InputMaybe<ISortOrder>;
  website?: InputMaybe<ISortOrder>;
};

export type ICompanyPanel = {
  _count?: Maybe<ICompanyPanelCount>;
  companies: Array<ICompany>;
  description: Scalars['String']['output'];
  event?: Maybe<ICalendarItem>;
  name: Scalars['String']['output'];
  reservation: Scalars['Float']['output'];
  uid: Scalars['String']['output'];
};

export type ICompanyPanelCount = {
  companies: Scalars['Int']['output'];
};


export type ICompanyPanelCountCompaniesArgs = {
  where?: InputMaybe<ICompanyApplicationWhereInput>;
};

export type ICompanyPanelNullableRelationFilter = {
  is?: InputMaybe<ICompanyPanelWhereInput>;
  isNot?: InputMaybe<ICompanyPanelWhereInput>;
};

export type ICompanyPanelOrderByWithRelationInput = {
  companies?: InputMaybe<ICompanyApplicationOrderByRelationAggregateInput>;
  description?: InputMaybe<ISortOrder>;
  event?: InputMaybe<ICalendarItemOrderByWithRelationInput>;
  name?: InputMaybe<ISortOrder>;
};

export type ICompanyPanelUpdateInput = {
  companies: Array<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  name: Scalars['String']['input'];
  season: Scalars['String']['input'];
  uid?: InputMaybe<Scalars['String']['input']>;
};

export type ICompanyPanelWhereInput = {
  AND?: InputMaybe<Array<ICompanyPanelWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyPanelWhereInput>>;
  OR?: InputMaybe<Array<ICompanyPanelWhereInput>>;
  companies?: InputMaybe<ICompanyApplicationListRelationFilter>;
  description?: InputMaybe<IStringFilter>;
  event?: InputMaybe<ICalendarItemNullableRelationFilter>;
  name?: InputMaybe<IStringFilter>;
};

export type ICompanyProgram = {
  booth?: Maybe<Scalars['String']['output']>;
  cocktail?: Maybe<IApplicationCocktail>;
  panel?: Maybe<ICompanyPanel>;
  panelParticipants: Array<IApplicationPresenter>;
  talk?: Maybe<IApplicationTalk>;
  workshop?: Maybe<IApplicationWorkshop>;
};

export type ICompanyRelationFilter = {
  is?: InputMaybe<ICompanyWhereInput>;
  isNot?: InputMaybe<ICompanyWhereInput>;
};

export enum ICompanyScalarFieldEnum {
  Address = 'address',
  BrandName = 'brandName',
  CreatedAt = 'createdAt',
  DescriptionEn = 'descriptionEn',
  DescriptionHr = 'descriptionHr',
  Id = 'id',
  IndustryId = 'industryId',
  LegalName = 'legalName',
  RasterLogoId = 'rasterLogoId',
  Uid = 'uid',
  UpdatedAt = 'updatedAt',
  Vat = 'vat',
  VectorLogoId = 'vectorLogoId',
  Website = 'website'
}

export type ICompanyScanUserQrRefineData = {
  isStarred?: InputMaybe<Scalars['Boolean']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
};

export type ICompanyScanUserQrResponse = {
  alreadyScanned: Scalars['Boolean']['output'];
  error?: Maybe<Scalars['String']['output']>;
  isStarred?: Maybe<Scalars['Boolean']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  user?: Maybe<IUser>;
};

export type ICompanyScannedUser = {
  isStarred: Scalars['Boolean']['output'];
  note?: Maybe<Scalars['String']['output']>;
  scannedAt: Scalars['DateTimeISO']['output'];
  user?: Maybe<IUser>;
};

export type ICompanyScannedUserListRelationFilter = {
  every?: InputMaybe<ICompanyScannedUserWhereInput>;
  none?: InputMaybe<ICompanyScannedUserWhereInput>;
  some?: InputMaybe<ICompanyScannedUserWhereInput>;
};

export type ICompanyScannedUserOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type ICompanyScannedUserWhereInput = {
  AND?: InputMaybe<Array<ICompanyScannedUserWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyScannedUserWhereInput>>;
  OR?: InputMaybe<Array<ICompanyScannedUserWhereInput>>;
  isStarred?: InputMaybe<IBoolFilter>;
  note?: InputMaybe<IStringNullableFilter>;
  scannedAt?: InputMaybe<IDateTimeFilter>;
};

export type ICompanyWhereInput = {
  AND?: InputMaybe<Array<ICompanyWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyWhereInput>>;
  OR?: InputMaybe<Array<ICompanyWhereInput>>;
  address?: InputMaybe<IStringFilter>;
  brandName?: InputMaybe<IStringFilter>;
  descriptionEn?: InputMaybe<IStringFilter>;
  descriptionHr?: InputMaybe<IStringFilter>;
  legalName?: InputMaybe<IStringFilter>;
  vat?: InputMaybe<IStringFilter>;
  website?: InputMaybe<IStringFilter>;
};

export type ICompanyWhereUniqueInput = {
  AND?: InputMaybe<Array<ICompanyWhereInput>>;
  NOT?: InputMaybe<Array<ICompanyWhereInput>>;
  OR?: InputMaybe<Array<ICompanyWhereInput>>;
  address?: InputMaybe<IStringFilter>;
  brandName?: InputMaybe<IStringFilter>;
  descriptionEn?: InputMaybe<IStringFilter>;
  descriptionHr?: InputMaybe<IStringFilter>;
  legalName?: InputMaybe<IStringFilter>;
  vat?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<IStringFilter>;
};

export type ICreateCompanyApplicationResponse = {
  entity?: Maybe<ICompanyApplication>;
  errors?: Maybe<Array<IFieldError>>;
};

export type ICreateCompanyInput = {
  address: Scalars['String']['input'];
  brandName: Scalars['String']['input'];
  descriptionEn: Scalars['String']['input'];
  descriptionHr: Scalars['String']['input'];
  industry: Scalars['String']['input'];
  legalName: Scalars['String']['input'];
  rasterLogo?: InputMaybe<Scalars['Upload']['input']>;
  vat: Scalars['String']['input'];
  vectorLogo?: InputMaybe<Scalars['Upload']['input']>;
  website: Scalars['String']['input'];
};

export type ICreateCompanyResponse = {
  entity?: Maybe<ICompany>;
  errors?: Maybe<Array<IFieldError>>;
};

export type ICreatePartnerResponse = {
  entity?: Maybe<IPartner>;
  errors?: Maybe<Array<IFieldError>>;
};

export type ICreatePressReleaseResponse = {
  entity?: Maybe<IPressRelease>;
  errors?: Maybe<Array<IFieldError>>;
};

export type ICreateSponsorResponse = {
  entity?: Maybe<ISponsor>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IDateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<INestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type IDateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<INestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type IEditApprovedCompanyApplicationResponse = {
  entity?: Maybe<ICompanyApplication>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IEntryResumeLogWhereInput = {
  AND?: InputMaybe<Array<IEntryResumeLogWhereInput>>;
  NOT?: InputMaybe<Array<IEntryResumeLogWhereInput>>;
  OR?: InputMaybe<Array<IEntryResumeLogWhereInput>>;
  event?: InputMaybe<IStringNullableFilter>;
  eventId?: InputMaybe<IIntNullableFilter>;
};

export type IEventLog = {
  data?: Maybe<Scalars['String']['output']>;
  date: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  user?: Maybe<IUser>;
};

export type IEventLogOrderByWithRelationInput = {
  data?: InputMaybe<ISortOrderInput>;
  date?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<ISortOrder>;
  user?: InputMaybe<IUserOrderByWithRelationInput>;
};

export type IEventLogPaginationResult = {
  page: Scalars['Int']['output'];
  perPage: Scalars['Int']['output'];
  records: Array<IEventLog>;
  totalRecords: Scalars['Int']['output'];
};

export type IEventLogWhereInput = {
  AND?: InputMaybe<Array<IEventLogWhereInput>>;
  NOT?: InputMaybe<Array<IEventLogWhereInput>>;
  OR?: InputMaybe<Array<IEventLogWhereInput>>;
  data?: InputMaybe<IStringNullableFilter>;
  name?: InputMaybe<IStringFilter>;
  user?: InputMaybe<IUserNullableRelationFilter>;
};

export type IEventReservationResponse = {
  entity?: Maybe<IEventReservationStatus>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IEventReservationStatus = {
  status: Scalars['Int']['output'];
};

export type IEventReservationUpdateInput = {
  id: Scalars['String']['input'];
  status: Scalars['Int']['input'];
  type: IEventType;
};

export type IEventReservationWhereInput = {
  AND?: InputMaybe<Array<IEventReservationWhereInput>>;
  NOT?: InputMaybe<Array<IEventReservationWhereInput>>;
  OR?: InputMaybe<Array<IEventReservationWhereInput>>;
  eventId?: InputMaybe<IIntFilter>;
  eventType?: InputMaybe<IStringFilter>;
  status?: InputMaybe<IIntFilter>;
  user?: InputMaybe<IUserRelationFilter>;
};

export enum IEventType {
  HotTalk = 'hotTalk',
  Panel = 'panel',
  Talk = 'talk',
  Workshop = 'workshop'
}

export type IEventUserApplications = {
  talk: Scalars['Int']['output'];
  workshop: Scalars['Int']['output'];
};

export type IFavouriteResumeWhereInput = {
  AND?: InputMaybe<Array<IFavouriteResumeWhereInput>>;
  NOT?: InputMaybe<Array<IFavouriteResumeWhereInput>>;
  OR?: InputMaybe<Array<IFavouriteResumeWhereInput>>;
};

export type IFieldError = {
  field: Scalars['String']['output'];
  message: Scalars['String']['output'];
};

export type IFile = {
  _count?: Maybe<IFileCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  etag: Scalars['String']['output'];
  mimeType: Scalars['String']['output'];
  name: Scalars['String']['output'];
  size: Scalars['Int']['output'];
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  url: Scalars['String']['output'];
};

export type IFileCount = {
  forCompany: Scalars['Int']['output'];
  forPressRelease: Scalars['Int']['output'];
  forResume: Scalars['Int']['output'];
};


export type IFileCountForCompanyArgs = {
  where?: InputMaybe<ICompanyWhereInput>;
};


export type IFileCountForPressReleaseArgs = {
  where?: InputMaybe<IPressReleaseWhereInput>;
};


export type IFileCountForResumeArgs = {
  where?: InputMaybe<IResumeWhereInput>;
};

export type IFileOrderByWithRelationInput = {
  etag?: InputMaybe<ISortOrder>;
  mimeType?: InputMaybe<ISortOrder>;
  name?: InputMaybe<ISortOrder>;
  size?: InputMaybe<ISortOrder>;
  uploader?: InputMaybe<IUserOrderByWithRelationInput>;
};

export type IFileRelationFilter = {
  is?: InputMaybe<IFileWhereInput>;
  isNot?: InputMaybe<IFileWhereInput>;
};

export type IFileWhereInput = {
  AND?: InputMaybe<Array<IFileWhereInput>>;
  NOT?: InputMaybe<Array<IFileWhereInput>>;
  OR?: InputMaybe<Array<IFileWhereInput>>;
  etag?: InputMaybe<IStringFilter>;
  mimeType?: InputMaybe<IStringFilter>;
  name?: InputMaybe<IStringFilter>;
  size?: InputMaybe<IIntFilter>;
  uploader?: InputMaybe<IUserRelationFilter>;
};

export type IFloatFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<INestedFloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type IGateGuardianLog = {
  eventId: Scalars['Int']['output'];
  eventType: Scalars['String']['output'];
  forCalendarItem?: Maybe<ICalendarItem>;
  forUser?: Maybe<IUser>;
  scannedAt: Scalars['DateTimeISO']['output'];
  scannedBy?: Maybe<IUser>;
};

export type IGateGuardianLogListRelationFilter = {
  every?: InputMaybe<IGateGuardianLogWhereInput>;
  none?: InputMaybe<IGateGuardianLogWhereInput>;
  some?: InputMaybe<IGateGuardianLogWhereInput>;
};

export type IGateGuardianLogOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IGateGuardianLogWhereInput = {
  AND?: InputMaybe<Array<IGateGuardianLogWhereInput>>;
  NOT?: InputMaybe<Array<IGateGuardianLogWhereInput>>;
  OR?: InputMaybe<Array<IGateGuardianLogWhereInput>>;
  eventId?: InputMaybe<IIntFilter>;
  eventType?: InputMaybe<IStringFilter>;
};

export type IGateGuardianScanResponse = {
  alreadyScanned: Scalars['Boolean']['output'];
  error?: Maybe<Scalars['String']['output']>;
  hasReservation: Scalars['Boolean']['output'];
  user?: Maybe<IUser>;
};

export type IImage = {
  _count?: Maybe<IImageCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  full: IImageVariation;
  fullUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  thumb: IImageVariation;
  thumbUrl: Scalars['String']['output'];
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IImageCount = {
  ApplicationPresenter: Scalars['Int']['output'];
  Company: Scalars['Int']['output'];
  News: Scalars['Int']['output'];
  Partner: Scalars['Int']['output'];
  Sponsor: Scalars['Int']['output'];
};


export type IImageCountApplicationPresenterArgs = {
  where?: InputMaybe<IApplicationPresenterWhereInput>;
};


export type IImageCountCompanyArgs = {
  where?: InputMaybe<ICompanyWhereInput>;
};


export type IImageCountNewsArgs = {
  where?: InputMaybe<INewsWhereInput>;
};


export type IImageCountPartnerArgs = {
  where?: InputMaybe<IPartnerWhereInput>;
};


export type IImageCountSponsorArgs = {
  where?: InputMaybe<ISponsorWhereInput>;
};

export type IImageNullableRelationFilter = {
  is?: InputMaybe<IImageWhereInput>;
  isNot?: InputMaybe<IImageWhereInput>;
};

export type IImageRelationFilter = {
  is?: InputMaybe<IImageWhereInput>;
  isNot?: InputMaybe<IImageWhereInput>;
};

export type IImageVariation = {
  _count?: Maybe<IImageVariationCount>;
  etag: Scalars['String']['output'];
  mimeType: Scalars['String']['output'];
};

export type IImageVariationCount = {
  forFull: Scalars['Int']['output'];
  forOriginal: Scalars['Int']['output'];
  forThumb: Scalars['Int']['output'];
};


export type IImageVariationCountForFullArgs = {
  where?: InputMaybe<IImageWhereInput>;
};


export type IImageVariationCountForOriginalArgs = {
  where?: InputMaybe<IImageWhereInput>;
};


export type IImageVariationCountForThumbArgs = {
  where?: InputMaybe<IImageWhereInput>;
};

export type IImageVariationRelationFilter = {
  is?: InputMaybe<IImageVariationWhereInput>;
  isNot?: InputMaybe<IImageVariationWhereInput>;
};

export type IImageVariationWhereInput = {
  AND?: InputMaybe<Array<IImageVariationWhereInput>>;
  NOT?: InputMaybe<Array<IImageVariationWhereInput>>;
  OR?: InputMaybe<Array<IImageVariationWhereInput>>;
  etag?: InputMaybe<IStringFilter>;
  mimeType?: InputMaybe<IStringFilter>;
};

export type IImageWhereInput = {
  AND?: InputMaybe<Array<IImageWhereInput>>;
  NOT?: InputMaybe<Array<IImageWhereInput>>;
  OR?: InputMaybe<Array<IImageWhereInput>>;
  full?: InputMaybe<IImageVariationRelationFilter>;
  name?: InputMaybe<IStringFilter>;
  original?: InputMaybe<IImageVariationRelationFilter>;
  thumb?: InputMaybe<IImageVariationRelationFilter>;
  uploader?: InputMaybe<IUserRelationFilter>;
};

export type IIndustry = {
  _count?: Maybe<IIndustryCount>;
  name: Scalars['String']['output'];
};

export type IIndustryCount = {
  company: Scalars['Int']['output'];
};


export type IIndustryCountCompanyArgs = {
  where?: InputMaybe<ICompanyWhereInput>;
};

export type IIndustryOrderByWithRelationInput = {
  name?: InputMaybe<ISortOrder>;
};

export enum IIndustryScalarFieldEnum {
  Id = 'id',
  Name = 'name'
}

export type IIndustryWhereInput = {
  AND?: InputMaybe<Array<IIndustryWhereInput>>;
  NOT?: InputMaybe<Array<IIndustryWhereInput>>;
  OR?: InputMaybe<Array<IIndustryWhereInput>>;
  name?: InputMaybe<IStringFilter>;
};

export type IIndustryWhereUniqueInput = {
  AND?: InputMaybe<Array<IIndustryWhereInput>>;
  NOT?: InputMaybe<Array<IIndustryWhereInput>>;
  OR?: InputMaybe<Array<IIndustryWhereInput>>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type IIntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<INestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IIntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<INestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type ILiveVote = {
  createdAt: Scalars['DateTimeISO']['output'];
  forSeason: ISeason;
  forUser: IUser;
  option: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type ILiveVoteComment = {
  comment: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  forSeason: ISeason;
  forUser: IUser;
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type ILiveVoteCommentWhereInput = {
  AND?: InputMaybe<Array<ILiveVoteCommentWhereInput>>;
  NOT?: InputMaybe<Array<ILiveVoteCommentWhereInput>>;
  OR?: InputMaybe<Array<ILiveVoteCommentWhereInput>>;
  comment?: InputMaybe<IStringFilter>;
  id?: InputMaybe<IIntFilter>;
};

export type ILiveVoteResult = {
  option: Scalars['String']['output'];
  voteCount: Scalars['Int']['output'];
};

export type ILiveVoteWhereInput = {
  AND?: InputMaybe<Array<ILiveVoteWhereInput>>;
  NOT?: InputMaybe<Array<ILiveVoteWhereInput>>;
  OR?: InputMaybe<Array<ILiveVoteWhereInput>>;
  option?: InputMaybe<IStringFilter>;
};

export type IMutation = {
  addCompanyMember?: Maybe<Scalars['String']['output']>;
  approveCompanyApplications: Array<ICompanyApplicationApproval>;
  checkPasswordReset?: Maybe<IUser>;
  createCompanyApplication?: Maybe<ICreateCompanyApplicationResponse>;
  createCompanyApplicationFor?: Maybe<ICreateCompanyApplicationResponse>;
  createIndustry?: Maybe<IIndustry>;
  createLiveVote?: Maybe<ILiveVote>;
  createLiveVoteComment?: Maybe<ILiveVoteComment>;
  createNews?: Maybe<INewsCreateResponse>;
  createPartner: ICreatePartnerResponse;
  createPressRelease?: Maybe<ICreatePressReleaseResponse>;
  createSeason?: Maybe<ISeason>;
  createSponsor: ICreateSponsorResponse;
  createTalkCategory?: Maybe<IApplicationTalkCategory>;
  deleteCalendarItem: Scalars['Boolean']['output'];
  deleteCompanyApplicationFor: Scalars['Boolean']['output'];
  deleteCompanyPanel: Scalars['Boolean']['output'];
  deleteLiveVoteComment: Scalars['Boolean']['output'];
  deleteNews?: Maybe<Scalars['Boolean']['output']>;
  deletePartner: Scalars['Boolean']['output'];
  deleteResume: Scalars['Boolean']['output'];
  deleteSeason?: Maybe<ISeason>;
  deleteSponsor: Scalars['Boolean']['output'];
  deleteUserCompanyComponentRating: Scalars['Boolean']['output'];
  editApprovedCompanyApplication?: Maybe<IEditApprovedCompanyApplicationResponse>;
  editNews?: Maybe<INewsCreateResponse>;
  gateGuardianScan?: Maybe<IGateGuardianScanResponse>;
  login: IAuthResponse;
  logout: Scalars['Boolean']['output'];
  register: IAuthResponse;
  registerCompany?: Maybe<ICreateCompanyResponse>;
  removeCompanyMember?: Maybe<Scalars['String']['output']>;
  renameIndustry?: Maybe<IIndustry>;
  renameTalkCategory?: Maybe<IApplicationTalkCategory>;
  requestPasswordReset: Scalars['String']['output'];
  requestPasswordResetFor: Scalars['String']['output'];
  resumeEntryScan?: Maybe<IResume>;
  resumeScan?: Maybe<Scalars['String']['output']>;
  resumeSetIsFavourite: Scalars['Boolean']['output'];
  scanUserQr?: Maybe<ICompanyScanUserQrResponse>;
  scanUserQrRefine?: Maybe<ICompanyScanUserQrResponse>;
  swapPartnerOrder: Scalars['Boolean']['output'];
  swapSponsorOrder: Scalars['Boolean']['output'];
  updateCalendarItem?: Maybe<ICalendarItem>;
  updateCompanyApplicationFeedback?: Maybe<ICompanyApplicationFeedback>;
  updateCompanyInfo?: Maybe<ICreateCompanyResponse>;
  updateCompanyMembersFor?: Maybe<ICreateCompanyResponse>;
  updateCompanyPanel?: Maybe<ICompanyPanel>;
  updateEventReservation?: Maybe<IEventReservationResponse>;
  updatePassword?: Maybe<IUpdatePasswordResponse>;
  updatePressRelease?: Maybe<ICreatePressReleaseResponse>;
  updateProfile?: Maybe<IUpdateProfileResponse>;
  updateResume?: Maybe<IResumeCreateResponse>;
  updateScannerStatusFor: Scalars['Boolean']['output'];
  updateSeason?: Maybe<ISeason>;
  updateTranslation?: Maybe<ITranslation>;
  updateUser?: Maybe<IUpdateProfileResponse>;
  upsertUserCompanyComponentRating: IUserCompanyComponentRating;
  usePasswordReset: IPasswordResetUseResponse;
  validateVat: IValidateVatResponse;
};


export type IMutationAddCompanyMemberArgs = {
  email: Scalars['String']['input'];
};


export type IMutationApproveCompanyApplicationsArgs = {
  companies: Array<IApproveCompanyApplicationsInput>;
  season: Scalars['String']['input'];
};


export type IMutationCheckPasswordResetArgs = {
  token: Scalars['String']['input'];
};


export type IMutationCreateCompanyApplicationArgs = {
  info: ICompanyApplicationCreateInput;
};


export type IMutationCreateCompanyApplicationForArgs = {
  company: Scalars['String']['input'];
  info: ICompanyApplicationCreateInput;
  season: Scalars['String']['input'];
};


export type IMutationCreateIndustryArgs = {
  name: Scalars['String']['input'];
};


export type IMutationCreateLiveVoteArgs = {
  seasonUid: Scalars['String']['input'];
  vote: Scalars['String']['input'];
};


export type IMutationCreateLiveVoteCommentArgs = {
  comment: Scalars['String']['input'];
  seasonUid: Scalars['String']['input'];
};


export type IMutationCreateNewsArgs = {
  info: INewsCreateInput;
};


export type IMutationCreatePartnerArgs = {
  info: IPartnerCreateInput;
  season: Scalars['String']['input'];
};


export type IMutationCreatePressReleaseArgs = {
  info: IPressReleaseWithFilesCreateInput;
};


export type IMutationCreateSeasonArgs = {
  info: ISeasonCreateInput;
};


export type IMutationCreateSponsorArgs = {
  info: ISponsorCreateInput;
  season: Scalars['String']['input'];
};


export type IMutationCreateTalkCategoryArgs = {
  name: Scalars['String']['input'];
  season: Scalars['String']['input'];
};


export type IMutationDeleteCalendarItemArgs = {
  uid: Scalars['String']['input'];
};


export type IMutationDeleteCompanyApplicationForArgs = {
  company: Scalars['String']['input'];
  season: Scalars['String']['input'];
};


export type IMutationDeleteCompanyPanelArgs = {
  uid: Scalars['String']['input'];
};


export type IMutationDeleteLiveVoteCommentArgs = {
  commentId: Scalars['Int']['input'];
};


export type IMutationDeleteNewsArgs = {
  uid: Scalars['String']['input'];
};


export type IMutationDeletePartnerArgs = {
  partner: Scalars['String']['input'];
};


export type IMutationDeleteSeasonArgs = {
  uid: Scalars['String']['input'];
};


export type IMutationDeleteSponsorArgs = {
  sponsor: Scalars['String']['input'];
};


export type IMutationDeleteUserCompanyComponentRatingArgs = {
  companyUid: Scalars['String']['input'];
  component: Scalars['String']['input'];
  seasonUid: Scalars['String']['input'];
};


export type IMutationEditApprovedCompanyApplicationArgs = {
  info: ICompanyApplicationApprovedEditInput;
};


export type IMutationEditNewsArgs = {
  info: INewsCreateInput;
  uid: Scalars['String']['input'];
};


export type IMutationGateGuardianScanArgs = {
  eventType: Scalars['String']['input'];
  eventUid: Scalars['String']['input'];
  userUid: Scalars['String']['input'];
};


export type IMutationLoginArgs = {
  identifier: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type IMutationRegisterArgs = {
  info: IUserRegisterInput;
};


export type IMutationRegisterCompanyArgs = {
  info: ICreateCompanyInput;
};


export type IMutationRemoveCompanyMemberArgs = {
  email: Scalars['String']['input'];
};


export type IMutationRenameIndustryArgs = {
  newName: Scalars['String']['input'];
  oldName: Scalars['String']['input'];
};


export type IMutationRenameTalkCategoryArgs = {
  newName: Scalars['String']['input'];
  oldName: Scalars['String']['input'];
  season: Scalars['String']['input'];
};


export type IMutationRequestPasswordResetArgs = {
  identifier: Scalars['String']['input'];
};


export type IMutationRequestPasswordResetForArgs = {
  uid: Scalars['String']['input'];
};


export type IMutationResumeEntryScanArgs = {
  userUid: Scalars['String']['input'];
};


export type IMutationResumeScanArgs = {
  userUid: Scalars['String']['input'];
};


export type IMutationResumeSetIsFavouriteArgs = {
  isFavourite: Scalars['Boolean']['input'];
  uid: Scalars['String']['input'];
};


export type IMutationScanUserQrArgs = {
  userUid: Scalars['String']['input'];
};


export type IMutationScanUserQrRefineArgs = {
  refineData: ICompanyScanUserQrRefineData;
  userUid: Scalars['String']['input'];
};


export type IMutationSwapPartnerOrderArgs = {
  orderA: Scalars['Int']['input'];
  orderB: Scalars['Int']['input'];
  season: Scalars['String']['input'];
};


export type IMutationSwapSponsorOrderArgs = {
  orderA: Scalars['Int']['input'];
  orderB: Scalars['Int']['input'];
  season: Scalars['String']['input'];
};


export type IMutationUpdateCalendarItemArgs = {
  input: ICalendarUpdateInput;
};


export type IMutationUpdateCompanyApplicationFeedbackArgs = {
  input: ICompanyApplicationFeedbackCreateInput;
};


export type IMutationUpdateCompanyInfoArgs = {
  info: ICreateCompanyInput;
};


export type IMutationUpdateCompanyMembersForArgs = {
  company: Scalars['String']['input'];
  members: Array<Scalars['String']['input']>;
};


export type IMutationUpdateCompanyPanelArgs = {
  input: ICompanyPanelUpdateInput;
};


export type IMutationUpdateEventReservationArgs = {
  input: IEventReservationUpdateInput;
};


export type IMutationUpdatePasswordArgs = {
  currentPassword: Scalars['String']['input'];
  newPassword: Scalars['String']['input'];
  newPasswordRepeat: Scalars['String']['input'];
};


export type IMutationUpdatePressReleaseArgs = {
  info: IPressReleaseWithFilesCreateInput;
  uid: Scalars['String']['input'];
};


export type IMutationUpdateProfileArgs = {
  info: IUserCreateInput;
};


export type IMutationUpdateResumeArgs = {
  info: IResumeCreateInput;
};


export type IMutationUpdateScannerStatusForArgs = {
  isScanner: Scalars['Boolean']['input'];
  uid: Scalars['String']['input'];
};


export type IMutationUpdateSeasonArgs = {
  info: ISeasonUpdateInput;
};


export type IMutationUpdateTranslationArgs = {
  data: ITranslationCreateInput;
};


export type IMutationUpdateUserArgs = {
  info: IUserUpdateInput;
  uid: Scalars['String']['input'];
};


export type IMutationUpsertUserCompanyComponentRatingArgs = {
  comment?: InputMaybe<Scalars['String']['input']>;
  companyUid: Scalars['String']['input'];
  component: Scalars['String']['input'];
  rating: Scalars['Int']['input'];
  seasonUid: Scalars['String']['input'];
};


export type IMutationUsePasswordResetArgs = {
  info: IPasswordResetUseInput;
};


export type IMutationValidateVatArgs = {
  vat: Scalars['String']['input'];
};

export type INestedBoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<INestedBoolFilter>;
};

export type INestedDateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<INestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type INestedDateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<INestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type INestedFloatFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<INestedFloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type INestedIntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<INestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type INestedIntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<INestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type INestedStringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<INestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type INestedStringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<INestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type INews = {
  author?: Maybe<IUser>;
  content: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  date: Scalars['DateTimeISO']['output'];
  description: Scalars['String']['output'];
  lang: Scalars['String']['output'];
  photo?: Maybe<IImage>;
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type INewsCreateInput = {
  content: Scalars['String']['input'];
  date: Scalars['DateTimeISO']['input'];
  description: Scalars['String']['input'];
  lang: Scalars['String']['input'];
  photo?: InputMaybe<Scalars['Upload']['input']>;
  title: Scalars['String']['input'];
};

export type INewsCreateResponse = {
  entity?: Maybe<INews>;
  errors?: Maybe<Array<IFieldError>>;
};

export type INewsFilter = {
  take?: InputMaybe<Scalars['Int']['input']>;
};

export type INewsWhereInput = {
  AND?: InputMaybe<Array<INewsWhereInput>>;
  NOT?: InputMaybe<Array<INewsWhereInput>>;
  OR?: InputMaybe<Array<INewsWhereInput>>;
  content?: InputMaybe<IStringFilter>;
  date?: InputMaybe<IDateTimeFilter>;
  description?: InputMaybe<IStringFilter>;
  lang?: InputMaybe<IStringFilter>;
  title?: InputMaybe<IStringFilter>;
};

export enum INullsOrder {
  First = 'first',
  Last = 'last'
}

export type IPartner = {
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  photo?: Maybe<IImage>;
  uid: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type IPartnerCreateInput = {
  name: Scalars['String']['input'];
  photo: Scalars['Upload']['input'];
  url: Scalars['String']['input'];
};

export type IPartnerListRelationFilter = {
  every?: InputMaybe<IPartnerWhereInput>;
  none?: InputMaybe<IPartnerWhereInput>;
  some?: InputMaybe<IPartnerWhereInput>;
};

export type IPartnerOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IPartnerWhereInput = {
  AND?: InputMaybe<Array<IPartnerWhereInput>>;
  NOT?: InputMaybe<Array<IPartnerWhereInput>>;
  OR?: InputMaybe<Array<IPartnerWhereInput>>;
  forSeason?: InputMaybe<ISeasonRelationFilter>;
  name?: InputMaybe<IStringFilter>;
  order?: InputMaybe<IIntFilter>;
  photo?: InputMaybe<IImageRelationFilter>;
  url?: InputMaybe<IStringFilter>;
};

export type IPasswordResetUseInput = {
  newPassword: Scalars['String']['input'];
  newPasswordRepeat: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type IPasswordResetUseResponse = {
  entity?: Maybe<Scalars['Boolean']['output']>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IPasswordResetWhereInput = {
  AND?: InputMaybe<Array<IPasswordResetWhereInput>>;
  NOT?: InputMaybe<Array<IPasswordResetWhereInput>>;
  OR?: InputMaybe<Array<IPasswordResetWhereInput>>;
};

export type IPresenterCreateInput = {
  bioEn: Scalars['String']['input'];
  bioHr: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  photo?: InputMaybe<Scalars['Upload']['input']>;
};

export type IPressRelease = {
  createdAt: Scalars['DateTimeISO']['output'];
  file?: Maybe<IFile>;
  forSeason?: Maybe<ISeason>;
  published: Scalars['DateTimeISO']['output'];
  title: Scalars['String']['output'];
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IPressReleaseOrderByWithRelationInput = {
  creator?: InputMaybe<IUserOrderByWithRelationInput>;
  file?: InputMaybe<IFileOrderByWithRelationInput>;
  forSeason?: InputMaybe<ISeasonOrderByWithRelationInput>;
  published?: InputMaybe<ISortOrder>;
  title?: InputMaybe<ISortOrder>;
};

export enum IPressReleaseScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatorId = 'creatorId',
  FileId = 'fileId',
  ForSeasonId = 'forSeasonId',
  Id = 'id',
  Published = 'published',
  Title = 'title',
  Uid = 'uid',
  UpdatedAt = 'updatedAt'
}

export type IPressReleaseWhereInput = {
  AND?: InputMaybe<Array<IPressReleaseWhereInput>>;
  NOT?: InputMaybe<Array<IPressReleaseWhereInput>>;
  OR?: InputMaybe<Array<IPressReleaseWhereInput>>;
  creator?: InputMaybe<IUserRelationFilter>;
  file?: InputMaybe<IFileRelationFilter>;
  forSeason?: InputMaybe<ISeasonNullableRelationFilter>;
  published?: InputMaybe<IDateTimeFilter>;
  title?: InputMaybe<IStringFilter>;
};

export type IPressReleaseWhereUniqueInput = {
  AND?: InputMaybe<Array<IPressReleaseWhereInput>>;
  NOT?: InputMaybe<Array<IPressReleaseWhereInput>>;
  OR?: InputMaybe<Array<IPressReleaseWhereInput>>;
  creator?: InputMaybe<IUserRelationFilter>;
  file?: InputMaybe<IFileRelationFilter>;
  forSeason?: InputMaybe<ISeasonNullableRelationFilter>;
  published?: InputMaybe<IDateTimeFilter>;
  title?: InputMaybe<IStringFilter>;
};

export type IPressReleaseWithFilesCreateInput = {
  file?: InputMaybe<Scalars['Upload']['input']>;
  published: Scalars['DateTimeISO']['input'];
  season: Scalars['String']['input'];
  title: Scalars['String']['input'];
};

export type IQuery = {
  allNews: Array<INews>;
  allTranslationsFor: Array<ITranslation>;
  approvedCompanyApplications: Array<ICompanyApplicationApproval>;
  booths: Array<IBooth>;
  calendar: Array<ICalendarItem>;
  calendarItem?: Maybe<ICalendarItem>;
  calendarItemCompanyUid?: Maybe<Scalars['String']['output']>;
  calendarOld: Array<ICalendarEvent>;
  companies: Array<ICompany>;
  company?: Maybe<ICompany>;
  companyApplication?: Maybe<ICompanyApplication>;
  companyApplicationFor?: Maybe<ICompanyApplication>;
  companyApplications?: Maybe<Array<ICompanyApplication>>;
  companyComponentAverageRatings: Array<IUserCompanyComponentRatingComponentAverage>;
  companyInfo?: Maybe<ICompany>;
  currentSeason?: Maybe<ISeason>;
  eventLog: IEventLogPaginationResult;
  findFirstTranslation?: Maybe<ITranslation>;
  gateGuardianScanList?: Maybe<Array<IGateGuardianLog>>;
  industries: Array<IIndustry>;
  liveVoteComments: Array<ILiveVoteComment>;
  liveVoteResults: Array<ILiveVoteResult>;
  liveVotes: Array<ILiveVote>;
  myLiveVote?: Maybe<ILiveVote>;
  myLiveVoteComments: Array<ILiveVoteComment>;
  news: Array<INews>;
  newsItem?: Maybe<INews>;
  newsItemByUid?: Maybe<INews>;
  participants: Array<ICompany>;
  partners: Array<IPartner>;
  pressRelease?: Maybe<IPressRelease>;
  pressReleases: Array<IPressRelease>;
  profile?: Maybe<IUser>;
  resume?: Maybe<IResume>;
  resumeFavourites: Array<Scalars['String']['output']>;
  resumeInterests: ISearchResponseStringArray;
  resumeIsFavourite: Scalars['Boolean']['output'];
  resumeTechnologies: ISearchResponseStringArray;
  resumes: IResumeList;
  resumesFavourites: IResumeList;
  resumesScanned: IResumeList;
  roles: Array<IRole>;
  scannedUsers: Array<ICompanyScannedUser>;
  season?: Maybe<ISeason>;
  seasons: Array<ISeason>;
  sessions: Array<ISession>;
  sessionsFor: Array<ISession>;
  sponsors: Array<ISponsor>;
  talkCategories: Array<IApplicationTalkCategory>;
  translation?: Maybe<ITranslation>;
  translations: Array<ITranslation>;
  user?: Maybe<IUser>;
  userCompanyComponentRating?: Maybe<IUserCompanyComponentRating>;
  userCompanyComponentRatings: Array<IUserCompanyComponentRating>;
  users: Array<IUser>;
};


export type IQueryAllNewsArgs = {
  filter?: InputMaybe<INewsFilter>;
};


export type IQueryAllTranslationsForArgs = {
  language: Scalars['String']['input'];
};


export type IQueryCalendarArgs = {
  filter?: InputMaybe<ICalendarFilterInput>;
  season?: InputMaybe<Scalars['String']['input']>;
};


export type IQueryCalendarItemArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryCalendarItemCompanyUidArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryCompaniesArgs = {
  cursor?: InputMaybe<ICompanyWhereUniqueInput>;
  distinct?: InputMaybe<Array<ICompanyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ICompanyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ICompanyWhereInput>;
};


export type IQueryCompanyArgs = {
  vat: Scalars['String']['input'];
};


export type IQueryCompanyApplicationForArgs = {
  company: Scalars['String']['input'];
  season: Scalars['String']['input'];
};


export type IQueryCompanyApplicationsArgs = {
  cursor?: InputMaybe<ICompanyApplicationWhereUniqueInput>;
  distinct?: InputMaybe<Array<ICompanyApplicationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ICompanyApplicationOrderByWithRelationInput>>;
  season?: InputMaybe<Scalars['String']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ICompanyApplicationWhereInput>;
};


export type IQueryCompanyComponentAverageRatingsArgs = {
  companyUid?: InputMaybe<Scalars['String']['input']>;
  seasonUid: Scalars['String']['input'];
};


export type IQueryCompanyInfoArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryEventLogArgs = {
  orderBy?: InputMaybe<Array<IEventLogOrderByWithRelationInput>>;
  page: Scalars['Int']['input'];
  perPage: Scalars['Int']['input'];
  where?: InputMaybe<Scalars['String']['input']>;
};


export type IQueryFindFirstTranslationArgs = {
  cursor?: InputMaybe<ITranslationWhereUniqueInput>;
  distinct?: InputMaybe<Array<ITranslationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ITranslationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ITranslationWhereInput>;
};


export type IQueryGateGuardianScanListArgs = {
  season: Scalars['String']['input'];
};


export type IQueryIndustriesArgs = {
  cursor?: InputMaybe<IIndustryWhereUniqueInput>;
  distinct?: InputMaybe<Array<IIndustryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<IIndustryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IIndustryWhereInput>;
};


export type IQueryLiveVoteCommentsArgs = {
  seasonUid: Scalars['String']['input'];
};


export type IQueryLiveVoteResultsArgs = {
  seasonUid: Scalars['String']['input'];
};


export type IQueryLiveVotesArgs = {
  seasonUid: Scalars['String']['input'];
};


export type IQueryMyLiveVoteArgs = {
  seasonUid: Scalars['String']['input'];
};


export type IQueryMyLiveVoteCommentsArgs = {
  seasonUid: Scalars['String']['input'];
};


export type IQueryNewsArgs = {
  filter?: InputMaybe<INewsFilter>;
  lang: Scalars['String']['input'];
};


export type IQueryNewsItemArgs = {
  slug: Scalars['String']['input'];
};


export type IQueryNewsItemByUidArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryParticipantsArgs = {
  cursor?: InputMaybe<ICompanyWhereUniqueInput>;
  distinct?: InputMaybe<Array<ICompanyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ICompanyOrderByWithRelationInput>>;
  season?: InputMaybe<Scalars['String']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ICompanyWhereInput>;
};


export type IQueryPartnersArgs = {
  season?: InputMaybe<Scalars['String']['input']>;
};


export type IQueryPressReleaseArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryPressReleasesArgs = {
  cursor?: InputMaybe<IPressReleaseWhereUniqueInput>;
  distinct?: InputMaybe<Array<IPressReleaseScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<IPressReleaseOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IPressReleaseWhereInput>;
};


export type IQueryResumeArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryResumeInterestsArgs = {
  index?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
};


export type IQueryResumeIsFavouriteArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryResumeTechnologiesArgs = {
  index?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
};


export type IQueryResumesArgs = {
  filter?: InputMaybe<IResumeFindManyInput>;
};


export type IQueryResumesFavouritesArgs = {
  filter?: InputMaybe<IResumeFindManyInput>;
};


export type IQueryResumesScannedArgs = {
  filter?: InputMaybe<IResumeFindManyInput>;
};


export type IQueryRolesArgs = {
  cursor?: InputMaybe<IRoleWhereUniqueInput>;
  distinct?: InputMaybe<Array<IRoleScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<IRoleOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IRoleWhereInput>;
};


export type IQueryScannedUsersArgs = {
  companyUid?: InputMaybe<Scalars['String']['input']>;
  seasonUid?: InputMaybe<Scalars['String']['input']>;
};


export type IQuerySeasonArgs = {
  uid: Scalars['String']['input'];
};


export type IQuerySeasonsArgs = {
  cursor?: InputMaybe<ISeasonWhereUniqueInput>;
  distinct?: InputMaybe<Array<ISeasonScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ISeasonOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ISeasonWhereInput>;
};


export type IQuerySessionsForArgs = {
  uid: Scalars['String']['input'];
};


export type IQuerySponsorsArgs = {
  season?: InputMaybe<Scalars['String']['input']>;
};


export type IQueryTalkCategoriesArgs = {
  cursor?: InputMaybe<IApplicationTalkCategoryWhereUniqueInput>;
  distinct?: InputMaybe<Array<IApplicationTalkCategoryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<IApplicationTalkCategoryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IApplicationTalkCategoryWhereInput>;
};


export type IQueryTranslationArgs = {
  where: ITranslationWhereUniqueInput;
};


export type IQueryTranslationsArgs = {
  cursor?: InputMaybe<ITranslationWhereUniqueInput>;
  distinct?: InputMaybe<Array<ITranslationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ITranslationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ITranslationWhereInput>;
};


export type IQueryUserArgs = {
  uid: Scalars['String']['input'];
};


export type IQueryUserCompanyComponentRatingArgs = {
  companyUid: Scalars['String']['input'];
  component: Scalars['String']['input'];
  seasonUid: Scalars['String']['input'];
};


export type IQueryUserCompanyComponentRatingsArgs = {
  companyUid: Scalars['String']['input'];
  seasonUid: Scalars['String']['input'];
};


export type IQueryUsersArgs = {
  cursor?: InputMaybe<IUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<IUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<IUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IUserWhereInput>;
};

export enum IQueryMode {
  Default = 'default',
  Insensitive = 'insensitive'
}

export type IReservationItem = {
  count: Scalars['Float']['output'];
  type: Scalars['String']['output'];
  uid: Scalars['String']['output'];
};

export type IResume = {
  _count?: Maybe<IResumeCount>;
  city: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  cv?: Maybe<IFile>;
  extraField: Scalars['String']['output'];
  faculty?: Maybe<IResumeFaculty>;
  interests: Array<Scalars['String']['output']>;
  projects: Array<IResumeProject>;
  studyYears: Array<IResumeStudyYear>;
  technologies: Array<Scalars['String']['output']>;
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: IUser;
  volunteerExperiences: Array<IResumeVolunteerExperience>;
  workExperiences: Array<IResumeWorkExperience>;
};

export type IResumeCount = {
  entryLog: Scalars['Int']['output'];
  favouriteResumes: Scalars['Int']['output'];
  interests: Scalars['Int']['output'];
  projects: Scalars['Int']['output'];
  scannedResumes: Scalars['Int']['output'];
  studyYears: Scalars['Int']['output'];
  technologies: Scalars['Int']['output'];
  volunteerExperiences: Scalars['Int']['output'];
  workExperiences: Scalars['Int']['output'];
};


export type IResumeCountEntryLogArgs = {
  where?: InputMaybe<IEntryResumeLogWhereInput>;
};


export type IResumeCountFavouriteResumesArgs = {
  where?: InputMaybe<IFavouriteResumeWhereInput>;
};


export type IResumeCountInterestsArgs = {
  where?: InputMaybe<IResumeInterestWhereInput>;
};


export type IResumeCountProjectsArgs = {
  where?: InputMaybe<IResumeProjectWhereInput>;
};


export type IResumeCountScannedResumesArgs = {
  where?: InputMaybe<IScannedResumeWhereInput>;
};


export type IResumeCountStudyYearsArgs = {
  where?: InputMaybe<IResumeStudyYearWhereInput>;
};


export type IResumeCountTechnologiesArgs = {
  where?: InputMaybe<IResumeTechnologyWhereInput>;
};


export type IResumeCountVolunteerExperiencesArgs = {
  where?: InputMaybe<IResumeVolunteerExperienceWhereInput>;
};


export type IResumeCountWorkExperiencesArgs = {
  where?: InputMaybe<IResumeWorkExperienceWhereInput>;
};

export type IResumeCreateCvInput = {
  cv?: InputMaybe<Scalars['Upload']['input']>;
  keepOld: Scalars['Boolean']['input'];
};

export type IResumeCreateInput = {
  city: Scalars['String']['input'];
  extraField?: InputMaybe<Scalars['String']['input']>;
  faculty: IResumeFacultyCreateInput;
  interests: Array<Scalars['String']['input']>;
  pdf?: InputMaybe<IResumeCreateCvInput>;
  projects: Array<IResumeProjectCreateInput>;
  studyYears: Array<IResumeStudyYearCreateInput>;
  technologies: Array<Scalars['String']['input']>;
  volunteerExperiences: Array<IResumeVolunteerExperienceCreateInput>;
  workExperiences: Array<IResumeWorkExperienceCreateInput>;
};

export type IResumeCreateResponse = {
  entity?: Maybe<IResume>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IResumeFaculty = {
  module: Scalars['String']['output'];
  name: Scalars['String']['output'];
  specialization: Scalars['String']['output'];
};

export type IResumeFacultyCreateInput = {
  module: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type IResumeFacultyNullableRelationFilter = {
  is?: InputMaybe<IResumeFacultyWhereInput>;
  isNot?: InputMaybe<IResumeFacultyWhereInput>;
};

export type IResumeFacultyOrderByWithRelationInput = {
  module?: InputMaybe<ISortOrder>;
  name?: InputMaybe<ISortOrder>;
  specialization?: InputMaybe<ISortOrder>;
};

export type IResumeFacultyWhereInput = {
  AND?: InputMaybe<Array<IResumeFacultyWhereInput>>;
  NOT?: InputMaybe<Array<IResumeFacultyWhereInput>>;
  OR?: InputMaybe<Array<IResumeFacultyWhereInput>>;
  module?: InputMaybe<IStringFilter>;
  name?: InputMaybe<IStringFilter>;
  specialization?: InputMaybe<IStringFilter>;
};

export type IResumeFindManyInput = {
  orderBy?: InputMaybe<Array<IResumeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IResumeWhereInput>;
  whereUser?: InputMaybe<Scalars['String']['input']>;
};

export type IResumeInterestListRelationFilter = {
  every?: InputMaybe<IResumeInterestWhereInput>;
  none?: InputMaybe<IResumeInterestWhereInput>;
  some?: InputMaybe<IResumeInterestWhereInput>;
};

export type IResumeInterestOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IResumeInterestWhereInput = {
  AND?: InputMaybe<Array<IResumeInterestWhereInput>>;
  NOT?: InputMaybe<Array<IResumeInterestWhereInput>>;
  OR?: InputMaybe<Array<IResumeInterestWhereInput>>;
  name?: InputMaybe<IStringFilter>;
};

export type IResumeList = {
  items: Array<IResume>;
  total: Scalars['Int']['output'];
};

export type IResumeOrderByWithRelationInput = {
  city?: InputMaybe<ISortOrder>;
  extraField?: InputMaybe<ISortOrder>;
  faculty?: InputMaybe<IResumeFacultyOrderByWithRelationInput>;
  interests?: InputMaybe<IResumeInterestOrderByRelationAggregateInput>;
  projects?: InputMaybe<IResumeProjectOrderByRelationAggregateInput>;
  studyYears?: InputMaybe<IResumeStudyYearOrderByRelationAggregateInput>;
  technologies?: InputMaybe<IResumeTechnologyOrderByRelationAggregateInput>;
  volunteerExperiences?: InputMaybe<IResumeVolunteerExperienceOrderByRelationAggregateInput>;
  workExperiences?: InputMaybe<IResumeWorkExperienceOrderByRelationAggregateInput>;
};

export type IResumeProject = {
  position: Scalars['String']['output'];
  project: Scalars['String']['output'];
  start: Scalars['DateTimeISO']['output'];
  until?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type IResumeProjectCreateInput = {
  position: Scalars['String']['input'];
  project: Scalars['String']['input'];
  start: Scalars['DateTimeISO']['input'];
  until?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type IResumeProjectListRelationFilter = {
  every?: InputMaybe<IResumeProjectWhereInput>;
  none?: InputMaybe<IResumeProjectWhereInput>;
  some?: InputMaybe<IResumeProjectWhereInput>;
};

export type IResumeProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IResumeProjectWhereInput = {
  AND?: InputMaybe<Array<IResumeProjectWhereInput>>;
  NOT?: InputMaybe<Array<IResumeProjectWhereInput>>;
  OR?: InputMaybe<Array<IResumeProjectWhereInput>>;
  position?: InputMaybe<IStringFilter>;
  project?: InputMaybe<IStringFilter>;
  start?: InputMaybe<IDateTimeFilter>;
  until?: InputMaybe<IDateTimeNullableFilter>;
};

export type IResumeStudyYear = {
  studyType: Scalars['String']['output'];
  studyYear: Scalars['Int']['output'];
};

export type IResumeStudyYearCreateInput = {
  studyType: Scalars['String']['input'];
  studyYear: Scalars['Float']['input'];
};

export type IResumeStudyYearListRelationFilter = {
  every?: InputMaybe<IResumeStudyYearWhereInput>;
  none?: InputMaybe<IResumeStudyYearWhereInput>;
  some?: InputMaybe<IResumeStudyYearWhereInput>;
};

export type IResumeStudyYearOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IResumeStudyYearWhereInput = {
  AND?: InputMaybe<Array<IResumeStudyYearWhereInput>>;
  NOT?: InputMaybe<Array<IResumeStudyYearWhereInput>>;
  OR?: InputMaybe<Array<IResumeStudyYearWhereInput>>;
  studyType?: InputMaybe<IStringFilter>;
  studyYear?: InputMaybe<IIntFilter>;
};

export type IResumeTechnologyListRelationFilter = {
  every?: InputMaybe<IResumeTechnologyWhereInput>;
  none?: InputMaybe<IResumeTechnologyWhereInput>;
  some?: InputMaybe<IResumeTechnologyWhereInput>;
};

export type IResumeTechnologyOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IResumeTechnologyWhereInput = {
  AND?: InputMaybe<Array<IResumeTechnologyWhereInput>>;
  NOT?: InputMaybe<Array<IResumeTechnologyWhereInput>>;
  OR?: InputMaybe<Array<IResumeTechnologyWhereInput>>;
  name?: InputMaybe<IStringFilter>;
};

export type IResumeVolunteerExperience = {
  organisation: Scalars['String']['output'];
  position: Scalars['String']['output'];
  start: Scalars['DateTimeISO']['output'];
  until?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type IResumeVolunteerExperienceCreateInput = {
  organisation: Scalars['String']['input'];
  position: Scalars['String']['input'];
  start: Scalars['DateTimeISO']['input'];
  until?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type IResumeVolunteerExperienceListRelationFilter = {
  every?: InputMaybe<IResumeVolunteerExperienceWhereInput>;
  none?: InputMaybe<IResumeVolunteerExperienceWhereInput>;
  some?: InputMaybe<IResumeVolunteerExperienceWhereInput>;
};

export type IResumeVolunteerExperienceOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IResumeVolunteerExperienceWhereInput = {
  AND?: InputMaybe<Array<IResumeVolunteerExperienceWhereInput>>;
  NOT?: InputMaybe<Array<IResumeVolunteerExperienceWhereInput>>;
  OR?: InputMaybe<Array<IResumeVolunteerExperienceWhereInput>>;
  organisation?: InputMaybe<IStringFilter>;
  position?: InputMaybe<IStringFilter>;
  start?: InputMaybe<IDateTimeFilter>;
  until?: InputMaybe<IDateTimeNullableFilter>;
};

export type IResumeWhereInput = {
  AND?: InputMaybe<Array<IResumeWhereInput>>;
  NOT?: InputMaybe<Array<IResumeWhereInput>>;
  OR?: InputMaybe<Array<IResumeWhereInput>>;
  city?: InputMaybe<IStringFilter>;
  extraField?: InputMaybe<IStringFilter>;
  faculty?: InputMaybe<IResumeFacultyNullableRelationFilter>;
  interests?: InputMaybe<IResumeInterestListRelationFilter>;
  projects?: InputMaybe<IResumeProjectListRelationFilter>;
  studyYears?: InputMaybe<IResumeStudyYearListRelationFilter>;
  technologies?: InputMaybe<IResumeTechnologyListRelationFilter>;
  volunteerExperiences?: InputMaybe<IResumeVolunteerExperienceListRelationFilter>;
  workExperiences?: InputMaybe<IResumeWorkExperienceListRelationFilter>;
};

export type IResumeWorkExperience = {
  company: Scalars['String']['output'];
  position: Scalars['String']['output'];
  start: Scalars['DateTimeISO']['output'];
  until?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type IResumeWorkExperienceCreateInput = {
  company: Scalars['String']['input'];
  position: Scalars['String']['input'];
  start: Scalars['DateTimeISO']['input'];
  until?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type IResumeWorkExperienceListRelationFilter = {
  every?: InputMaybe<IResumeWorkExperienceWhereInput>;
  none?: InputMaybe<IResumeWorkExperienceWhereInput>;
  some?: InputMaybe<IResumeWorkExperienceWhereInput>;
};

export type IResumeWorkExperienceOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type IResumeWorkExperienceWhereInput = {
  AND?: InputMaybe<Array<IResumeWorkExperienceWhereInput>>;
  NOT?: InputMaybe<Array<IResumeWorkExperienceWhereInput>>;
  OR?: InputMaybe<Array<IResumeWorkExperienceWhereInput>>;
  company?: InputMaybe<IStringFilter>;
  position?: InputMaybe<IStringFilter>;
  start?: InputMaybe<IDateTimeFilter>;
  until?: InputMaybe<IDateTimeNullableFilter>;
};

export type IRole = {
  _count?: Maybe<IRoleCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IRoleCount = {
  users: Scalars['Int']['output'];
};


export type IRoleCountUsersArgs = {
  where?: InputMaybe<IUserWhereInput>;
};

export type IRoleOrderByWithRelationInput = {
  name?: InputMaybe<ISortOrder>;
};

export enum IRoleScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Name = 'name',
  UpdatedAt = 'updatedAt'
}

export type IRoleWhereInput = {
  AND?: InputMaybe<Array<IRoleWhereInput>>;
  NOT?: InputMaybe<Array<IRoleWhereInput>>;
  OR?: InputMaybe<Array<IRoleWhereInput>>;
  name?: InputMaybe<IStringFilter>;
};

export type IRoleWhereUniqueInput = {
  AND?: InputMaybe<Array<IRoleWhereInput>>;
  NOT?: InputMaybe<Array<IRoleWhereInput>>;
  OR?: InputMaybe<Array<IRoleWhereInput>>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type IScannedResumeWhereInput = {
  AND?: InputMaybe<Array<IScannedResumeWhereInput>>;
  NOT?: InputMaybe<Array<IScannedResumeWhereInput>>;
  OR?: InputMaybe<Array<IScannedResumeWhereInput>>;
};

export type ISearchResponseStringArray = {
  entities: Array<Scalars['String']['output']>;
  index: Scalars['Float']['output'];
};

export type ISeason = {
  _count?: Maybe<ISeasonCount>;
  applications: Array<ICompanyApplication>;
  applicationsEditableFrom: Scalars['DateTimeISO']['output'];
  applicationsEditableUntil: Scalars['DateTimeISO']['output'];
  applicationsFrom: Scalars['DateTimeISO']['output'];
  applicationsUntil: Scalars['DateTimeISO']['output'];
  calendar: Array<ICalendarItem>;
  companyComponentAverageRatings: Array<IUserCompanyComponentRatingComponentAverage>;
  companyScannedCvs: Scalars['Int']['output'];
  endsAt: Scalars['DateTimeISO']['output'];
  entryCount: Scalars['Int']['output'];
  eventFrom: Scalars['DateTimeISO']['output'];
  eventUntil: Scalars['DateTimeISO']['output'];
  feedbackFrom: Scalars['DateTimeISO']['output'];
  feedbackUntil: Scalars['DateTimeISO']['output'];
  name: Scalars['String']['output'];
  panel?: Maybe<ICompanyPanel>;
  reservations: Array<IReservationItem>;
  scheduleFrom: Scalars['DateTimeISO']['output'];
  scheduleUntil: Scalars['DateTimeISO']['output'];
  showParticipantsFrom: Scalars['DateTimeISO']['output'];
  showParticipantsUntil: Scalars['DateTimeISO']['output'];
  showPartnersFrom: Scalars['DateTimeISO']['output'];
  showPartnersUntil: Scalars['DateTimeISO']['output'];
  showSponsorsFrom: Scalars['DateTimeISO']['output'];
  showSponsorsUntil: Scalars['DateTimeISO']['output'];
  startsAt: Scalars['DateTimeISO']['output'];
  uid: Scalars['String']['output'];
};

export type ISeasonCount = {
  LiveVote: Scalars['Int']['output'];
  LiveVoteComment: Scalars['Int']['output'];
  UserCompanyComponentRatingAveragesView: Scalars['Int']['output'];
  UserCompanyComponentRatings: Scalars['Int']['output'];
  calendar: Scalars['Int']['output'];
  companies: Scalars['Int']['output'];
  entryLog: Scalars['Int']['output'];
  favouriteResumes: Scalars['Int']['output'];
  gateGuardianLog: Scalars['Int']['output'];
  partners: Scalars['Int']['output'];
  pressReleases: Scalars['Int']['output'];
  scannedResumes: Scalars['Int']['output'];
  scannedUsers: Scalars['Int']['output'];
  sponsors: Scalars['Int']['output'];
  talkCategories: Scalars['Int']['output'];
};


export type ISeasonCountLiveVoteArgs = {
  where?: InputMaybe<ILiveVoteWhereInput>;
};


export type ISeasonCountLiveVoteCommentArgs = {
  where?: InputMaybe<ILiveVoteCommentWhereInput>;
};


export type ISeasonCountUserCompanyComponentRatingAveragesViewArgs = {
  where?: InputMaybe<IUserCompanyComponentRatingAveragesViewWhereInput>;
};


export type ISeasonCountUserCompanyComponentRatingsArgs = {
  where?: InputMaybe<IUserCompanyComponentRatingWhereInput>;
};


export type ISeasonCountCalendarArgs = {
  where?: InputMaybe<ICalendarItemWhereInput>;
};


export type ISeasonCountCompaniesArgs = {
  where?: InputMaybe<ICompanyApplicationWhereInput>;
};


export type ISeasonCountEntryLogArgs = {
  where?: InputMaybe<IEntryResumeLogWhereInput>;
};


export type ISeasonCountFavouriteResumesArgs = {
  where?: InputMaybe<IFavouriteResumeWhereInput>;
};


export type ISeasonCountGateGuardianLogArgs = {
  where?: InputMaybe<IGateGuardianLogWhereInput>;
};


export type ISeasonCountPartnersArgs = {
  where?: InputMaybe<IPartnerWhereInput>;
};


export type ISeasonCountPressReleasesArgs = {
  where?: InputMaybe<IPressReleaseWhereInput>;
};


export type ISeasonCountScannedResumesArgs = {
  where?: InputMaybe<IScannedResumeWhereInput>;
};


export type ISeasonCountScannedUsersArgs = {
  where?: InputMaybe<ICompanyScannedUserWhereInput>;
};


export type ISeasonCountSponsorsArgs = {
  where?: InputMaybe<ISponsorWhereInput>;
};


export type ISeasonCountTalkCategoriesArgs = {
  where?: InputMaybe<IApplicationTalkCategoryWhereInput>;
};

export type ISeasonCreateInput = {
  applicationsEditableFrom: Scalars['DateTimeISO']['input'];
  applicationsEditableUntil: Scalars['DateTimeISO']['input'];
  applicationsFrom: Scalars['DateTimeISO']['input'];
  applicationsUntil: Scalars['DateTimeISO']['input'];
  endsAt: Scalars['DateTimeISO']['input'];
  eventFrom: Scalars['DateTimeISO']['input'];
  eventUntil: Scalars['DateTimeISO']['input'];
  feedbackFrom: Scalars['DateTimeISO']['input'];
  feedbackUntil: Scalars['DateTimeISO']['input'];
  name: Scalars['String']['input'];
  scheduleFrom: Scalars['DateTimeISO']['input'];
  scheduleUntil: Scalars['DateTimeISO']['input'];
  showParticipantsFrom: Scalars['DateTimeISO']['input'];
  showParticipantsUntil: Scalars['DateTimeISO']['input'];
  showPartnersFrom: Scalars['DateTimeISO']['input'];
  showPartnersUntil: Scalars['DateTimeISO']['input'];
  showSponsorsFrom: Scalars['DateTimeISO']['input'];
  showSponsorsUntil: Scalars['DateTimeISO']['input'];
  startsAt: Scalars['DateTimeISO']['input'];
};

export type ISeasonNullableRelationFilter = {
  is?: InputMaybe<ISeasonWhereInput>;
  isNot?: InputMaybe<ISeasonWhereInput>;
};

export type ISeasonOrderByWithRelationInput = {
  applicationsEditableFrom?: InputMaybe<ISortOrder>;
  applicationsEditableUntil?: InputMaybe<ISortOrder>;
  applicationsFrom?: InputMaybe<ISortOrder>;
  applicationsUntil?: InputMaybe<ISortOrder>;
  calendar?: InputMaybe<ICalendarItemOrderByRelationAggregateInput>;
  companies?: InputMaybe<ICompanyApplicationOrderByRelationAggregateInput>;
  endsAt?: InputMaybe<ISortOrder>;
  eventFrom?: InputMaybe<ISortOrder>;
  eventUntil?: InputMaybe<ISortOrder>;
  feedbackFrom?: InputMaybe<ISortOrder>;
  feedbackUntil?: InputMaybe<ISortOrder>;
  gateGuardianLog?: InputMaybe<IGateGuardianLogOrderByRelationAggregateInput>;
  name?: InputMaybe<ISortOrder>;
  partners?: InputMaybe<IPartnerOrderByRelationAggregateInput>;
  scannedUsers?: InputMaybe<ICompanyScannedUserOrderByRelationAggregateInput>;
  scheduleFrom?: InputMaybe<ISortOrder>;
  scheduleUntil?: InputMaybe<ISortOrder>;
  showParticipantsFrom?: InputMaybe<ISortOrder>;
  showParticipantsUntil?: InputMaybe<ISortOrder>;
  showPartnersFrom?: InputMaybe<ISortOrder>;
  showPartnersUntil?: InputMaybe<ISortOrder>;
  showSponsorsFrom?: InputMaybe<ISortOrder>;
  showSponsorsUntil?: InputMaybe<ISortOrder>;
  sponsors?: InputMaybe<ISponsorOrderByRelationAggregateInput>;
  startsAt?: InputMaybe<ISortOrder>;
  uid?: InputMaybe<ISortOrder>;
};

export type ISeasonRelationFilter = {
  is?: InputMaybe<ISeasonWhereInput>;
  isNot?: InputMaybe<ISeasonWhereInput>;
};

export enum ISeasonScalarFieldEnum {
  ApplicationsEditableFrom = 'applicationsEditableFrom',
  ApplicationsEditableUntil = 'applicationsEditableUntil',
  ApplicationsFrom = 'applicationsFrom',
  ApplicationsUntil = 'applicationsUntil',
  EndsAt = 'endsAt',
  EventFrom = 'eventFrom',
  EventUntil = 'eventUntil',
  FeedbackFrom = 'feedbackFrom',
  FeedbackUntil = 'feedbackUntil',
  Id = 'id',
  Name = 'name',
  ScheduleFrom = 'scheduleFrom',
  ScheduleUntil = 'scheduleUntil',
  ShowParticipantsFrom = 'showParticipantsFrom',
  ShowParticipantsUntil = 'showParticipantsUntil',
  ShowPartnersFrom = 'showPartnersFrom',
  ShowPartnersUntil = 'showPartnersUntil',
  ShowSponsorsFrom = 'showSponsorsFrom',
  ShowSponsorsUntil = 'showSponsorsUntil',
  StartsAt = 'startsAt',
  Uid = 'uid'
}

export type ISeasonUpdateInput = {
  applicationsEditableFrom: Scalars['DateTimeISO']['input'];
  applicationsEditableUntil: Scalars['DateTimeISO']['input'];
  applicationsFrom: Scalars['DateTimeISO']['input'];
  applicationsUntil: Scalars['DateTimeISO']['input'];
  endsAt: Scalars['DateTimeISO']['input'];
  eventFrom: Scalars['DateTimeISO']['input'];
  eventUntil: Scalars['DateTimeISO']['input'];
  feedbackFrom: Scalars['DateTimeISO']['input'];
  feedbackUntil: Scalars['DateTimeISO']['input'];
  name: Scalars['String']['input'];
  scheduleFrom: Scalars['DateTimeISO']['input'];
  scheduleUntil: Scalars['DateTimeISO']['input'];
  showParticipantsFrom: Scalars['DateTimeISO']['input'];
  showParticipantsUntil: Scalars['DateTimeISO']['input'];
  showPartnersFrom: Scalars['DateTimeISO']['input'];
  showPartnersUntil: Scalars['DateTimeISO']['input'];
  showSponsorsFrom: Scalars['DateTimeISO']['input'];
  showSponsorsUntil: Scalars['DateTimeISO']['input'];
  startsAt: Scalars['DateTimeISO']['input'];
  uid: Scalars['String']['input'];
};

export type ISeasonWhereInput = {
  AND?: InputMaybe<Array<ISeasonWhereInput>>;
  NOT?: InputMaybe<Array<ISeasonWhereInput>>;
  OR?: InputMaybe<Array<ISeasonWhereInput>>;
  applicationsEditableFrom?: InputMaybe<IDateTimeFilter>;
  applicationsEditableUntil?: InputMaybe<IDateTimeFilter>;
  applicationsFrom?: InputMaybe<IDateTimeFilter>;
  applicationsUntil?: InputMaybe<IDateTimeFilter>;
  calendar?: InputMaybe<ICalendarItemListRelationFilter>;
  companies?: InputMaybe<ICompanyApplicationListRelationFilter>;
  endsAt?: InputMaybe<IDateTimeFilter>;
  eventFrom?: InputMaybe<IDateTimeFilter>;
  eventUntil?: InputMaybe<IDateTimeFilter>;
  feedbackFrom?: InputMaybe<IDateTimeFilter>;
  feedbackUntil?: InputMaybe<IDateTimeFilter>;
  gateGuardianLog?: InputMaybe<IGateGuardianLogListRelationFilter>;
  name?: InputMaybe<IStringFilter>;
  partners?: InputMaybe<IPartnerListRelationFilter>;
  scannedUsers?: InputMaybe<ICompanyScannedUserListRelationFilter>;
  scheduleFrom?: InputMaybe<IDateTimeFilter>;
  scheduleUntil?: InputMaybe<IDateTimeFilter>;
  showParticipantsFrom?: InputMaybe<IDateTimeFilter>;
  showParticipantsUntil?: InputMaybe<IDateTimeFilter>;
  showPartnersFrom?: InputMaybe<IDateTimeFilter>;
  showPartnersUntil?: InputMaybe<IDateTimeFilter>;
  showSponsorsFrom?: InputMaybe<IDateTimeFilter>;
  showSponsorsUntil?: InputMaybe<IDateTimeFilter>;
  sponsors?: InputMaybe<ISponsorListRelationFilter>;
  startsAt?: InputMaybe<IDateTimeFilter>;
  uid?: InputMaybe<IStringFilter>;
};

export type ISeasonWhereUniqueInput = {
  AND?: InputMaybe<Array<ISeasonWhereInput>>;
  NOT?: InputMaybe<Array<ISeasonWhereInput>>;
  OR?: InputMaybe<Array<ISeasonWhereInput>>;
  applicationsEditableFrom?: InputMaybe<IDateTimeFilter>;
  applicationsEditableUntil?: InputMaybe<IDateTimeFilter>;
  applicationsFrom?: InputMaybe<IDateTimeFilter>;
  applicationsUntil?: InputMaybe<IDateTimeFilter>;
  calendar?: InputMaybe<ICalendarItemListRelationFilter>;
  companies?: InputMaybe<ICompanyApplicationListRelationFilter>;
  endsAt?: InputMaybe<IDateTimeFilter>;
  eventFrom?: InputMaybe<IDateTimeFilter>;
  eventUntil?: InputMaybe<IDateTimeFilter>;
  feedbackFrom?: InputMaybe<IDateTimeFilter>;
  feedbackUntil?: InputMaybe<IDateTimeFilter>;
  gateGuardianLog?: InputMaybe<IGateGuardianLogListRelationFilter>;
  name?: InputMaybe<IStringFilter>;
  partners?: InputMaybe<IPartnerListRelationFilter>;
  scannedUsers?: InputMaybe<ICompanyScannedUserListRelationFilter>;
  scheduleFrom?: InputMaybe<IDateTimeFilter>;
  scheduleUntil?: InputMaybe<IDateTimeFilter>;
  showParticipantsFrom?: InputMaybe<IDateTimeFilter>;
  showParticipantsUntil?: InputMaybe<IDateTimeFilter>;
  showPartnersFrom?: InputMaybe<IDateTimeFilter>;
  showPartnersUntil?: InputMaybe<IDateTimeFilter>;
  showSponsorsFrom?: InputMaybe<IDateTimeFilter>;
  showSponsorsUntil?: InputMaybe<IDateTimeFilter>;
  sponsors?: InputMaybe<ISponsorListRelationFilter>;
  startsAt?: InputMaybe<IDateTimeFilter>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

export type ISession = {
  id: Scalars['Int']['output'];
  ip: Scalars['String']['output'];
  loggedInAt: Scalars['String']['output'];
  sessionId: Scalars['String']['output'];
  userAgent: Scalars['String']['output'];
};

export enum ISortOrder {
  Asc = 'asc',
  Desc = 'desc'
}

export type ISortOrderInput = {
  nulls?: InputMaybe<INullsOrder>;
  sort: ISortOrder;
};

export type ISponsor = {
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  photo?: Maybe<IImage>;
  uid: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type ISponsorCreateInput = {
  name: Scalars['String']['input'];
  photo: Scalars['Upload']['input'];
  url: Scalars['String']['input'];
};

export type ISponsorListRelationFilter = {
  every?: InputMaybe<ISponsorWhereInput>;
  none?: InputMaybe<ISponsorWhereInput>;
  some?: InputMaybe<ISponsorWhereInput>;
};

export type ISponsorOrderByRelationAggregateInput = {
  _count?: InputMaybe<ISortOrder>;
};

export type ISponsorWhereInput = {
  AND?: InputMaybe<Array<ISponsorWhereInput>>;
  NOT?: InputMaybe<Array<ISponsorWhereInput>>;
  OR?: InputMaybe<Array<ISponsorWhereInput>>;
  forSeason?: InputMaybe<ISeasonRelationFilter>;
  name?: InputMaybe<IStringFilter>;
  order?: InputMaybe<IIntFilter>;
  photo?: InputMaybe<IImageRelationFilter>;
  url?: InputMaybe<IStringFilter>;
};

export type IStringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<IQueryMode>;
  not?: InputMaybe<INestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type IStringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<IQueryMode>;
  not?: InputMaybe<INestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type ITalkCreateInput = {
  category: Scalars['String']['input'];
  descriptionEn: Scalars['String']['input'];
  descriptionHr: Scalars['String']['input'];
  language: Scalars['String']['input'];
  presenter: IPresenterCreateInput;
  titleEn: Scalars['String']['input'];
  titleHr: Scalars['String']['input'];
};

export type ITalksCreateInput = {
  category: Scalars['String']['input'];
  descriptionEn: Scalars['String']['input'];
  descriptionHr: Scalars['String']['input'];
  language: Scalars['String']['input'];
  presenter: Array<IPresenterCreateInput>;
  titleEn: Scalars['String']['input'];
  titleHr: Scalars['String']['input'];
};

export type ITranslation = {
  createdAt: Scalars['DateTimeISO']['output'];
  key: Scalars['String']['output'];
  language: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  value: Scalars['String']['output'];
};

export type ITranslationCreateInput = {
  key: Scalars['String']['input'];
  language: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type ITranslationKeyLanguageCompoundUniqueInput = {
  key: Scalars['String']['input'];
  language: Scalars['String']['input'];
};

export type ITranslationOrderByWithRelationInput = {
  key?: InputMaybe<ISortOrder>;
  language?: InputMaybe<ISortOrder>;
  value?: InputMaybe<ISortOrder>;
};

export enum ITranslationScalarFieldEnum {
  CreatedAt = 'createdAt',
  Key = 'key',
  Language = 'language',
  UpdatedAt = 'updatedAt',
  Value = 'value'
}

export type ITranslationWhereInput = {
  AND?: InputMaybe<Array<ITranslationWhereInput>>;
  NOT?: InputMaybe<Array<ITranslationWhereInput>>;
  OR?: InputMaybe<Array<ITranslationWhereInput>>;
  key?: InputMaybe<IStringFilter>;
  language?: InputMaybe<IStringFilter>;
  value?: InputMaybe<IStringFilter>;
};

export type ITranslationWhereUniqueInput = {
  AND?: InputMaybe<Array<ITranslationWhereInput>>;
  NOT?: InputMaybe<Array<ITranslationWhereInput>>;
  OR?: InputMaybe<Array<ITranslationWhereInput>>;
  key?: InputMaybe<IStringFilter>;
  key_language?: InputMaybe<ITranslationKeyLanguageCompoundUniqueInput>;
  language?: InputMaybe<IStringFilter>;
  value?: InputMaybe<IStringFilter>;
};

export type IUpdatePasswordResponse = {
  entity?: Maybe<IUser>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IUpdateProfileResponse = {
  entity?: Maybe<IUser>;
  errors?: Maybe<Array<IFieldError>>;
};

export type IUser = {
  _count?: Maybe<IUserCount>;
  companies: Array<ICompany>;
  createdAt: Scalars['DateTimeISO']['output'];
  email: Scalars['String']['output'];
  eventLog: Array<IEventLog>;
  firstName: Scalars['String']['output'];
  language: Scalars['String']['output'];
  lastName: Scalars['String']['output'];
  name: Scalars['String']['output'];
  phone: Scalars['String']['output'];
  resume?: Maybe<IResume>;
  roles: Array<IRole>;
  uid: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IUserCompanyComponentRating = {
  comment?: Maybe<Scalars['String']['output']>;
  component: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  forCompany: ICompany;
  forSeason: ISeason;
  forUser: IUser;
  rating: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type IUserCompanyComponentRatingAveragesViewWhereInput = {
  AND?: InputMaybe<Array<IUserCompanyComponentRatingAveragesViewWhereInput>>;
  NOT?: InputMaybe<Array<IUserCompanyComponentRatingAveragesViewWhereInput>>;
  OR?: InputMaybe<Array<IUserCompanyComponentRatingAveragesViewWhereInput>>;
  component?: InputMaybe<IStringFilter>;
  ratingAvg?: InputMaybe<IFloatFilter>;
  ratingCount?: InputMaybe<IIntFilter>;
};

export type IUserCompanyComponentRatingComponentAverage = {
  averageRating: Scalars['Float']['output'];
  comments: Array<Scalars['String']['output']>;
  component: Scalars['String']['output'];
  ratingCount?: Maybe<Scalars['Int']['output']>;
};

export type IUserCompanyComponentRatingWhereInput = {
  AND?: InputMaybe<Array<IUserCompanyComponentRatingWhereInput>>;
  NOT?: InputMaybe<Array<IUserCompanyComponentRatingWhereInput>>;
  OR?: InputMaybe<Array<IUserCompanyComponentRatingWhereInput>>;
  comment?: InputMaybe<IStringNullableFilter>;
  component?: InputMaybe<IStringFilter>;
  rating?: InputMaybe<IIntFilter>;
};

export type IUserCount = {
  LiveVote: Scalars['Int']['output'];
  LiveVoteComment: Scalars['Int']['output'];
  News: Scalars['Int']['output'];
  UserCompanyComponentRatings: Scalars['Int']['output'];
  companies: Scalars['Int']['output'];
  events: Scalars['Int']['output'];
  files: Scalars['Int']['output'];
  gateGuardianEntryLog: Scalars['Int']['output'];
  gateGuardianScannedLog: Scalars['Int']['output'];
  images: Scalars['Int']['output'];
  passwordResets: Scalars['Int']['output'];
  pressReleases: Scalars['Int']['output'];
  reservations: Scalars['Int']['output'];
  roles: Scalars['Int']['output'];
  scannedEntries: Scalars['Int']['output'];
  scannedUsers: Scalars['Int']['output'];
};


export type IUserCountLiveVoteArgs = {
  where?: InputMaybe<ILiveVoteWhereInput>;
};


export type IUserCountLiveVoteCommentArgs = {
  where?: InputMaybe<ILiveVoteCommentWhereInput>;
};


export type IUserCountNewsArgs = {
  where?: InputMaybe<INewsWhereInput>;
};


export type IUserCountUserCompanyComponentRatingsArgs = {
  where?: InputMaybe<IUserCompanyComponentRatingWhereInput>;
};


export type IUserCountCompaniesArgs = {
  where?: InputMaybe<ICompanyWhereInput>;
};


export type IUserCountEventsArgs = {
  where?: InputMaybe<IEventLogWhereInput>;
};


export type IUserCountFilesArgs = {
  where?: InputMaybe<IFileWhereInput>;
};


export type IUserCountGateGuardianEntryLogArgs = {
  where?: InputMaybe<IGateGuardianLogWhereInput>;
};


export type IUserCountGateGuardianScannedLogArgs = {
  where?: InputMaybe<IGateGuardianLogWhereInput>;
};


export type IUserCountImagesArgs = {
  where?: InputMaybe<IImageWhereInput>;
};


export type IUserCountPasswordResetsArgs = {
  where?: InputMaybe<IPasswordResetWhereInput>;
};


export type IUserCountPressReleasesArgs = {
  where?: InputMaybe<IPressReleaseWhereInput>;
};


export type IUserCountReservationsArgs = {
  where?: InputMaybe<IEventReservationWhereInput>;
};


export type IUserCountRolesArgs = {
  where?: InputMaybe<IRoleWhereInput>;
};


export type IUserCountScannedEntriesArgs = {
  where?: InputMaybe<IEntryResumeLogWhereInput>;
};


export type IUserCountScannedUsersArgs = {
  where?: InputMaybe<ICompanyScannedUserWhereInput>;
};

export type IUserCreateInput = {
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  language?: InputMaybe<Scalars['String']['input']>;
  lastName: Scalars['String']['input'];
  password: Scalars['String']['input'];
  phone: Scalars['String']['input'];
};

export type IUserNullableRelationFilter = {
  is?: InputMaybe<IUserWhereInput>;
  isNot?: InputMaybe<IUserWhereInput>;
};

export type IUserOrderByWithRelationInput = {
  email?: InputMaybe<ISortOrder>;
  firstName?: InputMaybe<ISortOrder>;
  language?: InputMaybe<ISortOrder>;
  lastName?: InputMaybe<ISortOrder>;
  password?: InputMaybe<ISortOrder>;
  phone?: InputMaybe<ISortOrder>;
};

export type IUserRegisterInput = {
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  language?: InputMaybe<Scalars['String']['input']>;
  lastName: Scalars['String']['input'];
  password: Scalars['String']['input'];
  passwordRepeat: Scalars['String']['input'];
  phone: Scalars['String']['input'];
};

export type IUserRelationFilter = {
  is?: InputMaybe<IUserWhereInput>;
  isNot?: InputMaybe<IUserWhereInput>;
};

export enum IUserScalarFieldEnum {
  CreatedAt = 'createdAt',
  Email = 'email',
  FirstName = 'firstName',
  Id = 'id',
  Language = 'language',
  LastName = 'lastName',
  Password = 'password',
  Phone = 'phone',
  ResumeId = 'resumeId',
  Uid = 'uid',
  UpdatedAt = 'updatedAt'
}

export type IUserUpdateInput = {
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  language?: InputMaybe<Scalars['String']['input']>;
  lastName: Scalars['String']['input'];
  password: Scalars['String']['input'];
  phone: Scalars['String']['input'];
  roles: Array<Scalars['String']['input']>;
};

export type IUserWhereInput = {
  AND?: InputMaybe<Array<IUserWhereInput>>;
  NOT?: InputMaybe<Array<IUserWhereInput>>;
  OR?: InputMaybe<Array<IUserWhereInput>>;
  email?: InputMaybe<IStringFilter>;
  firstName?: InputMaybe<IStringFilter>;
  language?: InputMaybe<IStringFilter>;
  lastName?: InputMaybe<IStringFilter>;
  password?: InputMaybe<IStringFilter>;
  phone?: InputMaybe<IStringFilter>;
};

export type IUserWhereUniqueInput = {
  AND?: InputMaybe<Array<IUserWhereInput>>;
  NOT?: InputMaybe<Array<IUserWhereInput>>;
  OR?: InputMaybe<Array<IUserWhereInput>>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<IStringFilter>;
  language?: InputMaybe<IStringFilter>;
  lastName?: InputMaybe<IStringFilter>;
  password?: InputMaybe<IStringFilter>;
  phone?: InputMaybe<IStringFilter>;
};

export type IValidateVatResponse = {
  exists: Scalars['Boolean']['output'];
  info?: Maybe<IVatData>;
  valid: Scalars['Boolean']['output'];
};

export type IVatData = {
  address: Scalars['String']['output'];
  legalName: Scalars['String']['output'];
  vat: Scalars['String']['output'];
};

export type IWorkshopCreateInput = {
  descriptionEn: Scalars['String']['input'];
  descriptionHr: Scalars['String']['input'];
  goal: Scalars['String']['input'];
  language: Scalars['String']['input'];
  notesEn: Scalars['String']['input'];
  notesHr: Scalars['String']['input'];
  presenter: IPresenterCreateInput;
  titleEn: Scalars['String']['input'];
  titleHr: Scalars['String']['input'];
};

export type IWorkshopsCreateInput = {
  descriptionEn: Scalars['String']['input'];
  descriptionHr: Scalars['String']['input'];
  goal: Scalars['String']['input'];
  language: Scalars['String']['input'];
  notesEn: Scalars['String']['input'];
  notesHr: Scalars['String']['input'];
  presenter: Array<IPresenterCreateInput>;
  titleEn: Scalars['String']['input'];
  titleHr: Scalars['String']['input'];
};

export type IComponentAdminSeasonRatingsCompaniesCompanyComments_DataQuery_companyComponentAverageRatings_UserCompanyComponentRatingComponentAverage = { component: string, averageRating: number, comments: Array<string> };

export type IComponentAdminSeasonRatingsCompaniesCompanyComments_DataQuery_Query = { companyComponentAverageRatings: Array<IComponentAdminSeasonRatingsCompaniesCompanyComments_DataQuery_companyComponentAverageRatings_UserCompanyComponentRatingComponentAverage> };


export type IComponentAdminSeasonRatingsCompaniesCompanyComments_DataQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
  companyUid: Scalars['String']['input'];
}>;


export type IComponentAdminSeasonRatingsCompaniesCompanyComments_DataQuery = IComponentAdminSeasonRatingsCompaniesCompanyComments_DataQuery_Query;

export type ILoginMutation_login_AuthResponse_errors_FieldError = { field: string, message: string };

export type ILoginMutation_login_AuthResponse_entity_User_roles_Role = { name: string };

export type ILoginMutation_login_AuthResponse_entity_User_companies_Company_industry_Industry = { name: string };

export type ILoginMutation_login_AuthResponse_entity_User_companies_Company = { uid: string, vat: string, legalName: string, brandName: string, address: string, website: string, descriptionEn: string, descriptionHr: string, industry?: ILoginMutation_login_AuthResponse_entity_User_companies_Company_industry_Industry | null };

export type ILoginMutation_login_AuthResponse_entity_User = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, language: string, roles: Array<ILoginMutation_login_AuthResponse_entity_User_roles_Role>, companies: Array<ILoginMutation_login_AuthResponse_entity_User_companies_Company> };

export type ILoginMutation_login_AuthResponse = { errors?: Array<ILoginMutation_login_AuthResponse_errors_FieldError> | null, entity?: ILoginMutation_login_AuthResponse_entity_User | null };

export type ILoginMutation_Mutation = { login: ILoginMutation_login_AuthResponse };


export type ILoginMutationVariables = Exact<{
  password: Scalars['String']['input'];
  identifier: Scalars['String']['input'];
}>;


export type ILoginMutation = ILoginMutation_Mutation;

export type IRegisterMutation_register_AuthResponse_errors_FieldError = { field: string, message: string };

export type IRegisterMutation_register_AuthResponse_entity_User = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, language: string, roles: Array<ILoginMutation_login_AuthResponse_entity_User_roles_Role>, companies: Array<ILoginMutation_login_AuthResponse_entity_User_companies_Company> };

export type IRegisterMutation_register_AuthResponse = { errors?: Array<IRegisterMutation_register_AuthResponse_errors_FieldError> | null, entity?: IRegisterMutation_register_AuthResponse_entity_User | null };

export type IRegisterMutation_Mutation = { register: IRegisterMutation_register_AuthResponse };


export type IRegisterMutationVariables = Exact<{
  info: IUserRegisterInput;
}>;


export type IRegisterMutation = IRegisterMutation_Mutation;

export type ILogoutMutation_Mutation = { logout: boolean };


export type ILogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type ILogoutMutation = ILogoutMutation_Mutation;

export type IRequestPasswordResetMutation_Mutation = { requestPasswordReset: string };


export type IRequestPasswordResetMutationVariables = Exact<{
  identifier: Scalars['String']['input'];
}>;


export type IRequestPasswordResetMutation = IRequestPasswordResetMutation_Mutation;

export type ICheckPasswordResetMutation_checkPasswordReset_User = { firstName: string, lastName: string, email: string };

export type ICheckPasswordResetMutation_Mutation = { checkPasswordReset?: ICheckPasswordResetMutation_checkPasswordReset_User | null };


export type ICheckPasswordResetMutationVariables = Exact<{
  token: Scalars['String']['input'];
}>;


export type ICheckPasswordResetMutation = ICheckPasswordResetMutation_Mutation;

export type IUsePasswordResetMutation_usePasswordReset_PasswordResetUseResponse_errors_FieldError = { field: string, message: string };

export type IUsePasswordResetMutation_usePasswordReset_PasswordResetUseResponse = { entity?: boolean | null, errors?: Array<IUsePasswordResetMutation_usePasswordReset_PasswordResetUseResponse_errors_FieldError> | null };

export type IUsePasswordResetMutation_Mutation = { usePasswordReset: IUsePasswordResetMutation_usePasswordReset_PasswordResetUseResponse };


export type IUsePasswordResetMutationVariables = Exact<{
  info: IPasswordResetUseInput;
}>;


export type IUsePasswordResetMutation = IUsePasswordResetMutation_Mutation;

export type IRequestPasswordResetForMutation_Mutation = { requestPasswordResetFor: string };


export type IRequestPasswordResetForMutationVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IRequestPasswordResetForMutation = IRequestPasswordResetForMutation_Mutation;

export type IUpdateTranslationMutation_updateTranslation_Translation = { key: string, value: string, language: string };

export type IUpdateTranslationMutation_Mutation = { updateTranslation?: IUpdateTranslationMutation_updateTranslation_Translation | null };


export type IUpdateTranslationMutationVariables = Exact<{
  data: ITranslationCreateInput;
}>;


export type IUpdateTranslationMutation = IUpdateTranslationMutation_Mutation;

export type IUpdateProfileMutation_updateProfile_UpdateProfileResponse_errors_FieldError = { field: string, message: string };

export type IUpdateProfileMutation_updateProfile_UpdateProfileResponse_entity_User = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, language: string, roles: Array<ILoginMutation_login_AuthResponse_entity_User_roles_Role>, companies: Array<ILoginMutation_login_AuthResponse_entity_User_companies_Company> };

export type IUpdateProfileMutation_updateProfile_UpdateProfileResponse = { errors?: Array<IUpdateProfileMutation_updateProfile_UpdateProfileResponse_errors_FieldError> | null, entity?: IUpdateProfileMutation_updateProfile_UpdateProfileResponse_entity_User | null };

export type IUpdateProfileMutation_Mutation = { updateProfile?: IUpdateProfileMutation_updateProfile_UpdateProfileResponse | null };


export type IUpdateProfileMutationVariables = Exact<{
  info: IUserCreateInput;
}>;


export type IUpdateProfileMutation = IUpdateProfileMutation_Mutation;

export type IUpdateUserMutation_updateUser_UpdateProfileResponse_errors_FieldError = { field: string, message: string };

export type IUpdateUserMutation_updateUser_UpdateProfileResponse_entity_User = { uid: string };

export type IUpdateUserMutation_updateUser_UpdateProfileResponse = { errors?: Array<IUpdateUserMutation_updateUser_UpdateProfileResponse_errors_FieldError> | null, entity?: IUpdateUserMutation_updateUser_UpdateProfileResponse_entity_User | null };

export type IUpdateUserMutation_Mutation = { updateUser?: IUpdateUserMutation_updateUser_UpdateProfileResponse | null };


export type IUpdateUserMutationVariables = Exact<{
  uid: Scalars['String']['input'];
  info: IUserUpdateInput;
}>;


export type IUpdateUserMutation = IUpdateUserMutation_Mutation;

export type IUpdatePasswordMutation_updatePassword_UpdatePasswordResponse_errors_FieldError = { field: string, message: string };

export type IUpdatePasswordMutation_updatePassword_UpdatePasswordResponse_entity_User = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, language: string, roles: Array<ILoginMutation_login_AuthResponse_entity_User_roles_Role>, companies: Array<ILoginMutation_login_AuthResponse_entity_User_companies_Company> };

export type IUpdatePasswordMutation_updatePassword_UpdatePasswordResponse = { errors?: Array<IUpdatePasswordMutation_updatePassword_UpdatePasswordResponse_errors_FieldError> | null, entity?: IUpdatePasswordMutation_updatePassword_UpdatePasswordResponse_entity_User | null };

export type IUpdatePasswordMutation_Mutation = { updatePassword?: IUpdatePasswordMutation_updatePassword_UpdatePasswordResponse | null };


export type IUpdatePasswordMutationVariables = Exact<{
  currentPassword: Scalars['String']['input'];
  newPassword: Scalars['String']['input'];
  newPasswordRepeat: Scalars['String']['input'];
}>;


export type IUpdatePasswordMutation = IUpdatePasswordMutation_Mutation;

export type IValidateVatMutation_validateVat_ValidateVatResponse_info_VatData = { address: string, legalName: string, vat: string };

export type IValidateVatMutation_validateVat_ValidateVatResponse = { valid: boolean, exists: boolean, info?: IValidateVatMutation_validateVat_ValidateVatResponse_info_VatData | null };

export type IValidateVatMutation_Mutation = { validateVat: IValidateVatMutation_validateVat_ValidateVatResponse };


export type IValidateVatMutationVariables = Exact<{
  vat: Scalars['String']['input'];
}>;


export type IValidateVatMutation = IValidateVatMutation_Mutation;

export type ICreateIndustryMutation_createIndustry_Industry = { name: string };

export type ICreateIndustryMutation_Mutation = { createIndustry?: ICreateIndustryMutation_createIndustry_Industry | null };


export type ICreateIndustryMutationVariables = Exact<{
  name: Scalars['String']['input'];
}>;


export type ICreateIndustryMutation = ICreateIndustryMutation_Mutation;

export type IRenameIndustryMutation_renameIndustry_Industry = { name: string };

export type IRenameIndustryMutation_Mutation = { renameIndustry?: IRenameIndustryMutation_renameIndustry_Industry | null };


export type IRenameIndustryMutationVariables = Exact<{
  oldName: Scalars['String']['input'];
  newName: Scalars['String']['input'];
}>;


export type IRenameIndustryMutation = IRenameIndustryMutation_Mutation;

export type ICreateTalkCategoryMutation_createTalkCategory_ApplicationTalkCategory = { name: string };

export type ICreateTalkCategoryMutation_Mutation = { createTalkCategory?: ICreateTalkCategoryMutation_createTalkCategory_ApplicationTalkCategory | null };


export type ICreateTalkCategoryMutationVariables = Exact<{
  name: Scalars['String']['input'];
  season: Scalars['String']['input'];
}>;


export type ICreateTalkCategoryMutation = ICreateTalkCategoryMutation_Mutation;

export type IRenameTalkCategoryMutation_renameTalkCategory_ApplicationTalkCategory = { name: string };

export type IRenameTalkCategoryMutation_Mutation = { renameTalkCategory?: IRenameTalkCategoryMutation_renameTalkCategory_ApplicationTalkCategory | null };


export type IRenameTalkCategoryMutationVariables = Exact<{
  oldName: Scalars['String']['input'];
  newName: Scalars['String']['input'];
  season: Scalars['String']['input'];
}>;


export type IRenameTalkCategoryMutation = IRenameTalkCategoryMutation_Mutation;

export type IRegisterCompanyMutation_registerCompany_CreateCompanyResponse_errors_FieldError = { message: string, field: string };

export type IRegisterCompanyMutation_registerCompany_CreateCompanyResponse_entity_Company_industry_Industry = { name: string };

export type IRegisterCompanyMutation_registerCompany_CreateCompanyResponse_entity_Company = { uid: string, vat: string, legalName: string, address: string, brandName: string, descriptionEn: string, descriptionHr: string, industry?: IRegisterCompanyMutation_registerCompany_CreateCompanyResponse_entity_Company_industry_Industry | null };

export type IRegisterCompanyMutation_registerCompany_CreateCompanyResponse = { errors?: Array<IRegisterCompanyMutation_registerCompany_CreateCompanyResponse_errors_FieldError> | null, entity?: IRegisterCompanyMutation_registerCompany_CreateCompanyResponse_entity_Company | null };

export type IRegisterCompanyMutation_Mutation = { registerCompany?: IRegisterCompanyMutation_registerCompany_CreateCompanyResponse | null };


export type IRegisterCompanyMutationVariables = Exact<{
  info: ICreateCompanyInput;
}>;


export type IRegisterCompanyMutation = IRegisterCompanyMutation_Mutation;

export type IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse_errors_FieldError = { message: string, field: string };

export type IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse_entity_Company_industry_Industry = { name: string };

export type IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse_entity_Company = { uid: string, vat: string, legalName: string, address: string, brandName: string, descriptionEn: string, descriptionHr: string, industry?: IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse_entity_Company_industry_Industry | null };

export type IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse = { errors?: Array<IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse_errors_FieldError> | null, entity?: IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse_entity_Company | null };

export type IUpdateCompanyInfoMutation_Mutation = { updateCompanyInfo?: IUpdateCompanyInfoMutation_updateCompanyInfo_CreateCompanyResponse | null };


export type IUpdateCompanyInfoMutationVariables = Exact<{
  info: ICreateCompanyInput;
}>;


export type IUpdateCompanyInfoMutation = IUpdateCompanyInfoMutation_Mutation;

export type ICreatePressReleaseMutation_createPressRelease_CreatePressReleaseResponse_entity_PressRelease = { title: string, published: string | Date };

export type ICreatePressReleaseMutation_createPressRelease_CreatePressReleaseResponse_errors_FieldError = { field: string, message: string };

export type ICreatePressReleaseMutation_createPressRelease_CreatePressReleaseResponse = { entity?: ICreatePressReleaseMutation_createPressRelease_CreatePressReleaseResponse_entity_PressRelease | null, errors?: Array<ICreatePressReleaseMutation_createPressRelease_CreatePressReleaseResponse_errors_FieldError> | null };

export type ICreatePressReleaseMutation_Mutation = { createPressRelease?: ICreatePressReleaseMutation_createPressRelease_CreatePressReleaseResponse | null };


export type ICreatePressReleaseMutationVariables = Exact<{
  info: IPressReleaseWithFilesCreateInput;
}>;


export type ICreatePressReleaseMutation = ICreatePressReleaseMutation_Mutation;

export type IUpdatePressReleaseMutation_updatePressRelease_CreatePressReleaseResponse_entity_PressRelease = { title: string, published: string | Date };

export type IUpdatePressReleaseMutation_updatePressRelease_CreatePressReleaseResponse_errors_FieldError = { field: string, message: string };

export type IUpdatePressReleaseMutation_updatePressRelease_CreatePressReleaseResponse = { entity?: IUpdatePressReleaseMutation_updatePressRelease_CreatePressReleaseResponse_entity_PressRelease | null, errors?: Array<IUpdatePressReleaseMutation_updatePressRelease_CreatePressReleaseResponse_errors_FieldError> | null };

export type IUpdatePressReleaseMutation_Mutation = { updatePressRelease?: IUpdatePressReleaseMutation_updatePressRelease_CreatePressReleaseResponse | null };


export type IUpdatePressReleaseMutationVariables = Exact<{
  uid: Scalars['String']['input'];
  info: IPressReleaseWithFilesCreateInput;
}>;


export type IUpdatePressReleaseMutation = IUpdatePressReleaseMutation_Mutation;

export type IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_entity_CompanyApplication_talk_ApplicationTalk = { uid: string };

export type IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_entity_CompanyApplication_workshop_ApplicationWorkshop = { uid: string };

export type IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_entity_CompanyApplication = { talk?: IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_entity_CompanyApplication_talk_ApplicationTalk | null, workshop?: IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_entity_CompanyApplication_workshop_ApplicationWorkshop | null };

export type IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_errors_FieldError = { field: string, message: string };

export type IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse = { entity?: IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_entity_CompanyApplication | null, errors?: Array<IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse_errors_FieldError> | null };

export type IEditApprovedCompanyApplicationMutation_Mutation = { editApprovedCompanyApplication?: IEditApprovedCompanyApplicationMutation_editApprovedCompanyApplication_EditApprovedCompanyApplicationResponse | null };


export type IEditApprovedCompanyApplicationMutationVariables = Exact<{
  info: ICompanyApplicationApprovedEditInput;
}>;


export type IEditApprovedCompanyApplicationMutation = IEditApprovedCompanyApplicationMutation_Mutation;

export type IUpdateResumeMutation_updateResume_ResumeCreateResponse_errors_FieldError = { field: string, message: string };

export type IUpdateResumeMutation_updateResume_ResumeCreateResponse_entity_Resume = { uid: string };

export type IUpdateResumeMutation_updateResume_ResumeCreateResponse = { errors?: Array<IUpdateResumeMutation_updateResume_ResumeCreateResponse_errors_FieldError> | null, entity?: IUpdateResumeMutation_updateResume_ResumeCreateResponse_entity_Resume | null };

export type IUpdateResumeMutation_Mutation = { updateResume?: IUpdateResumeMutation_updateResume_ResumeCreateResponse | null };


export type IUpdateResumeMutationVariables = Exact<{
  info: IResumeCreateInput;
}>;


export type IUpdateResumeMutation = IUpdateResumeMutation_Mutation;

export type ICreateNewsMutation_createNews_NewsCreateResponse_errors_FieldError = { field: string, message: string };

export type ICreateNewsMutation_createNews_NewsCreateResponse_entity_News = { uid: string, slug: string };

export type ICreateNewsMutation_createNews_NewsCreateResponse = { errors?: Array<ICreateNewsMutation_createNews_NewsCreateResponse_errors_FieldError> | null, entity?: ICreateNewsMutation_createNews_NewsCreateResponse_entity_News | null };

export type ICreateNewsMutation_Mutation = { createNews?: ICreateNewsMutation_createNews_NewsCreateResponse | null };


export type ICreateNewsMutationVariables = Exact<{
  info: INewsCreateInput;
}>;


export type ICreateNewsMutation = ICreateNewsMutation_Mutation;

export type IEditNewsMutation_editNews_NewsCreateResponse_errors_FieldError = { field: string, message: string };

export type IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image = { thumbUrl: string, fullUrl: string };

export type IEditNewsMutation_editNews_NewsCreateResponse_entity_News = { uid: string, lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image | null };

export type IEditNewsMutation_editNews_NewsCreateResponse = { errors?: Array<IEditNewsMutation_editNews_NewsCreateResponse_errors_FieldError> | null, entity?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News | null };

export type IEditNewsMutation_Mutation = { editNews?: IEditNewsMutation_editNews_NewsCreateResponse | null };


export type IEditNewsMutationVariables = Exact<{
  uid: Scalars['String']['input'];
  info: INewsCreateInput;
}>;


export type IEditNewsMutation = IEditNewsMutation_Mutation;

export type IDeleteNewsMutation_Mutation = { deleteNews?: boolean | null };


export type IDeleteNewsMutationVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IDeleteNewsMutation = IDeleteNewsMutation_Mutation;

export type IFrag_SeasonFragment = { uid: string, name: string, startsAt: string | Date, endsAt: string | Date, applicationsFrom: string | Date, applicationsUntil: string | Date, applicationsEditableFrom: string | Date, applicationsEditableUntil: string | Date, showParticipantsFrom: string | Date, showParticipantsUntil: string | Date, showPartnersFrom: string | Date, showPartnersUntil: string | Date, showSponsorsFrom: string | Date, showSponsorsUntil: string | Date, eventFrom: string | Date, eventUntil: string | Date, feedbackFrom: string | Date, feedbackUntil: string | Date, scheduleFrom: string | Date, scheduleUntil: string | Date };

export type IFrag_UserProfileFragment = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, language: string, roles: Array<ILoginMutation_login_AuthResponse_entity_User_roles_Role>, companies: Array<ILoginMutation_login_AuthResponse_entity_User_companies_Company> };

export type IFrag_ApplicationPresenterFragment_ApplicationPresenter_photo_Image_full_ImageVariation = { mimeType: string };

export type IFrag_ApplicationPresenterFragment_ApplicationPresenter_photo_Image = { name: string, uid: string, full: IFrag_ApplicationPresenterFragment_ApplicationPresenter_photo_Image_full_ImageVariation };

export type IFrag_ApplicationPresenterFragment = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: IFrag_ApplicationPresenterFragment_ApplicationPresenter_photo_Image | null };

export type IFrag_AllFeedbackFragment = { applicationComments: string, applicationRating: number, attendanceRating: number, dateComments: string, dateRating: number, experienceComments: string, foodRating: number, mostLiked: number, onsiteRating: number, overallComment: string, overallRating: number, recommended: number, testimonial: string, timeRating: number, createdAt: string | Date, updatedAt: string | Date };

export type IFrag_CompanyApplicationFragment_CompanyApplication_contactPerson_CompanyApplicationContactPerson = { name: string, email: string, phone: string };

export type IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk_category_ApplicationTalkCategory = { name: string };

export type IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: IFrag_ApplicationPresenterFragment_ApplicationPresenter_photo_Image | null };

export type IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk = { titleEn: string, titleHr: string, descriptionEn: string, descriptionHr: string, language: string, category: IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk_category_ApplicationTalkCategory, presenters: Array<IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter> };

export type IFrag_CompanyApplicationFragment_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: IFrag_ApplicationPresenterFragment_ApplicationPresenter_photo_Image | null };

export type IFrag_CompanyApplicationFragment_CompanyApplication_workshop_ApplicationWorkshop = { titleEn: string, titleHr: string, descriptionEn: string, descriptionHr: string, language: string, goal: string, notesEn: string, notesHr: string, presenters: Array<IFrag_CompanyApplicationFragment_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter> };

export type IFrag_CompanyApplicationFragment_CompanyApplication_cocktail_ApplicationCocktail = { name: string, colour: string };

export type IFrag_CompanyApplicationFragment_CompanyApplication_panelParticipants_ApplicationPresenter = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: IFrag_ApplicationPresenterFragment_ApplicationPresenter_photo_Image | null };

export type IFrag_CompanyApplicationFragment_CompanyApplication_approval_CompanyApplicationApproval = { cocktail: boolean, panel: boolean, talkParticipants: number, workshopParticipants: number, booth: boolean };

export type IFrag_CompanyApplicationFragment_CompanyApplication_feedback_CompanyApplicationFeedback = { applicationComments: string, applicationRating: number, attendanceRating: number, dateComments: string, dateRating: number, experienceComments: string, foodRating: number, mostLiked: number, onsiteRating: number, overallComment: string, overallRating: number, recommended: number, testimonial: string, timeRating: number, createdAt: string | Date, updatedAt: string | Date };

export type IFrag_CompanyApplicationFragment = { booth?: string | null, wantsPanel: boolean, wantsCocktail: boolean, contactPerson?: IFrag_CompanyApplicationFragment_CompanyApplication_contactPerson_CompanyApplicationContactPerson | null, talk?: IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk | null, workshop?: IFrag_CompanyApplicationFragment_CompanyApplication_workshop_ApplicationWorkshop | null, cocktail?: IFrag_CompanyApplicationFragment_CompanyApplication_cocktail_ApplicationCocktail | null, panelParticipants: Array<IFrag_CompanyApplicationFragment_CompanyApplication_panelParticipants_ApplicationPresenter>, approval?: IFrag_CompanyApplicationFragment_CompanyApplication_approval_CompanyApplicationApproval | null, feedback?: IFrag_CompanyApplicationFragment_CompanyApplication_feedback_CompanyApplicationFeedback | null };

export type IFrag_CompanyFragment_Company_industry_Industry = { name: string };

export type IFrag_CompanyFragment = { uid: string, legalName: string, brandName: string, descriptionEn: string, descriptionHr: string, address: string, vat: string, website: string, industry?: IFrag_CompanyFragment_Company_industry_Industry | null };

export type IFrag_NewsFragment = { lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image | null };

export type IProfileQuery_profile_User = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, language: string, roles: Array<ILoginMutation_login_AuthResponse_entity_User_roles_Role>, companies: Array<ILoginMutation_login_AuthResponse_entity_User_companies_Company> };

export type IProfileQuery_Query = { profile?: IProfileQuery_profile_User | null };


export type IProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type IProfileQuery = IProfileQuery_Query;

export type ITranslationsForQuery_allTranslationsFor_Translation = { key: string, value: string };

export type ITranslationsForQuery_Query = { allTranslationsFor: Array<ITranslationsForQuery_allTranslationsFor_Translation> };


export type ITranslationsForQueryVariables = Exact<{
  language: Scalars['String']['input'];
}>;


export type ITranslationsForQuery = ITranslationsForQuery_Query;

export type IInitialDataQuery_profile_User = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, language: string, roles: Array<ILoginMutation_login_AuthResponse_entity_User_roles_Role>, companies: Array<ILoginMutation_login_AuthResponse_entity_User_companies_Company> };

export type IInitialDataQuery_allTranslationsFor_Translation = { key: string, value: string };

export type IInitialDataQuery_currentSeason_Season = { uid: string, name: string, startsAt: string | Date, endsAt: string | Date, applicationsFrom: string | Date, applicationsUntil: string | Date, applicationsEditableFrom: string | Date, applicationsEditableUntil: string | Date, showParticipantsFrom: string | Date, showParticipantsUntil: string | Date, showPartnersFrom: string | Date, showPartnersUntil: string | Date, showSponsorsFrom: string | Date, showSponsorsUntil: string | Date, eventFrom: string | Date, eventUntil: string | Date, feedbackFrom: string | Date, feedbackUntil: string | Date, scheduleFrom: string | Date, scheduleUntil: string | Date };

export type IInitialDataQuery_Query = { profile?: IInitialDataQuery_profile_User | null, allTranslationsFor: Array<IInitialDataQuery_allTranslationsFor_Translation>, currentSeason?: IInitialDataQuery_currentSeason_Season | null };


export type IInitialDataQueryVariables = Exact<{
  language: Scalars['String']['input'];
}>;


export type IInitialDataQuery = IInitialDataQuery_Query;

export type IPageIndexDataQuery_sponsors_Sponsor_photo_Image = { thumbUrl: string, fullUrl: string };

export type IPageIndexDataQuery_sponsors_Sponsor = { name: string, url: string, photo?: IPageIndexDataQuery_sponsors_Sponsor_photo_Image | null };

export type IPageIndexDataQuery_partners_Partner_photo_Image = { thumbUrl: string, fullUrl: string };

export type IPageIndexDataQuery_partners_Partner = { name: string, url: string, photo?: IPageIndexDataQuery_partners_Partner_photo_Image | null };

export type IPageIndexDataQuery_news_News = { lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image | null };

export type IPageIndexDataQuery_Query = { sponsors: Array<IPageIndexDataQuery_sponsors_Sponsor>, partners: Array<IPageIndexDataQuery_partners_Partner>, news: Array<IPageIndexDataQuery_news_News> };


export type IPageIndexDataQueryVariables = Exact<{
  language: Scalars['String']['input'];
}>;


export type IPageIndexDataQuery = IPageIndexDataQuery_Query;

export type ICompanyQuery_company_Company = { uid: string, legalName: string, brandName: string, descriptionEn: string, descriptionHr: string, address: string, vat: string, website: string, industry?: IFrag_CompanyFragment_Company_industry_Industry | null };

export type ICompanyQuery_Query = { company?: ICompanyQuery_company_Company | null };


export type ICompanyQueryVariables = Exact<{
  vat: Scalars['String']['input'];
}>;


export type ICompanyQuery = ICompanyQuery_Query;

export type ICompanyInfoQuery_companyInfo_Company_rasterLogo_Image = { thumbUrl: string, fullUrl: string };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk_presenters_ApplicationPresenter_photo_Image = { thumbUrl: string, fullUrl: string };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk_presenters_ApplicationPresenter = { bioHr: string, bioEn: string, firstName: string, lastName: string, photo?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk_presenters_ApplicationPresenter_photo_Image | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk_event_CalendarItem = { start: string | Date, end: string | Date, location?: string | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk = { uid: string, titleHr: string, titleEn: string, descriptionHr: string, descriptionEn: string, language: string, reservation: number, presenters: Array<ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk_presenters_ApplicationPresenter>, event?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk_event_CalendarItem | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop_presenters_ApplicationPresenter_photo_Image = { thumbUrl: string, fullUrl: string };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop_presenters_ApplicationPresenter = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop_presenters_ApplicationPresenter_photo_Image | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop_event_CalendarItem = { start: string | Date, end: string | Date, location?: string | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop = { uid: string, titleHr: string, titleEn: string, descriptionHr: string, descriptionEn: string, language: string, notesHr: string, notesEn: string, reservation: number, presenters: Array<ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop_presenters_ApplicationPresenter>, event?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop_event_CalendarItem | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter_photo_Image = { thumbUrl: string, fullUrl: string };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter_photo_Image | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel_companies_Company_rasterLogo_Image = { thumbUrl: string, fullUrl: string };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel_companies_Company = { uid: string, brandName: string, rasterLogo?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel_companies_Company_rasterLogo_Image | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel_event_CalendarItem = { start: string | Date, end: string | Date, location?: string | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel = { uid: string, name: string, description: string, reservation: number, companies: Array<ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel_companies_Company>, event?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel_event_CalendarItem | null };

export type ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram = { booth?: string | null, talk?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_talk_ApplicationTalk | null, workshop?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_workshop_ApplicationWorkshop | null, panelParticipants: Array<ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter>, panel?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram_panel_CompanyPanel | null };

export type ICompanyInfoQuery_companyInfo_Company = { uid: string, brandName: string, descriptionEn: string, descriptionHr: string, website: string, rasterLogo?: ICompanyInfoQuery_companyInfo_Company_rasterLogo_Image | null, program?: ICompanyInfoQuery_companyInfo_Company_program_CompanyProgram | null };

export type ICompanyInfoQuery_Query = { companyInfo?: ICompanyInfoQuery_companyInfo_Company | null };


export type ICompanyInfoQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type ICompanyInfoQuery = ICompanyInfoQuery_Query;

export type IIndustriesQuery_industries_Industry = { name: string };

export type IIndustriesQuery_Query = { industries: Array<IIndustriesQuery_industries_Industry> };


export type IIndustriesQueryVariables = Exact<{ [key: string]: never; }>;


export type IIndustriesQuery = IIndustriesQuery_Query;

export type ITalkCategoriesQuery_talkCategories_ApplicationTalkCategory = { name: string };

export type ITalkCategoriesQuery_Query = { talkCategories: Array<ITalkCategoriesQuery_talkCategories_ApplicationTalkCategory> };


export type ITalkCategoriesQueryVariables = Exact<{
  season?: InputMaybe<Scalars['String']['input']>;
}>;


export type ITalkCategoriesQuery = ITalkCategoriesQuery_Query;

export type IPressReleaseQuery_pressRelease_PressRelease_file_File = { name: string, mimeType: string, uid: string };

export type IPressReleaseQuery_pressRelease_PressRelease_forSeason_Season = { uid: string, name: string };

export type IPressReleaseQuery_pressRelease_PressRelease = { title: string, published: string | Date, file?: IPressReleaseQuery_pressRelease_PressRelease_file_File | null, forSeason?: IPressReleaseQuery_pressRelease_PressRelease_forSeason_Season | null };

export type IPressReleaseQuery_Query = { pressRelease?: IPressReleaseQuery_pressRelease_PressRelease | null };


export type IPressReleaseQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IPressReleaseQuery = IPressReleaseQuery_Query;

export type IPressReleasesQuery_pressReleases_PressRelease_file_File = { uid: string };

export type IPressReleasesQuery_pressReleases_PressRelease_forSeason_Season = { uid: string, name: string };

export type IPressReleasesQuery_pressReleases_PressRelease = { uid: string, title: string, published: string | Date, file?: IPressReleasesQuery_pressReleases_PressRelease_file_File | null, forSeason?: IPressReleasesQuery_pressReleases_PressRelease_forSeason_Season | null };

export type IPressReleasesQuery_Query = { pressReleases: Array<IPressReleasesQuery_pressReleases_PressRelease> };


export type IPressReleasesQueryVariables = Exact<{
  season?: InputMaybe<Scalars['String']['input']>;
}>;


export type IPressReleasesQuery = IPressReleasesQuery_Query;

export type IAllNewsQuery_allNews_News = { uid: string, lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image | null };

export type IAllNewsQuery_Query = { allNews: Array<IAllNewsQuery_allNews_News> };


export type IAllNewsQueryVariables = Exact<{
  filter?: InputMaybe<INewsFilter>;
}>;


export type IAllNewsQuery = IAllNewsQuery_Query;

export type INewsQuery_news_News = { lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image | null };

export type INewsQuery_Query = { news: Array<INewsQuery_news_News> };


export type INewsQueryVariables = Exact<{
  lang: Scalars['String']['input'];
  filter?: InputMaybe<INewsFilter>;
}>;


export type INewsQuery = INewsQuery_Query;

export type INewsItemQuery_newsItem_News = { lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image | null };

export type INewsItemQuery_news_News = { lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: IEditNewsMutation_editNews_NewsCreateResponse_entity_News_photo_Image | null };

export type INewsItemQuery_Query = { newsItem?: INewsItemQuery_newsItem_News | null, news: Array<INewsItemQuery_news_News> };


export type INewsItemQueryVariables = Exact<{
  slug: Scalars['String']['input'];
  lang: Scalars['String']['input'];
  filter?: InputMaybe<INewsFilter>;
}>;


export type INewsItemQuery = INewsItemQuery_Query;

export type INewsItemByUidQuery_newsItemByUid_News_photo_Image_full_ImageVariation = { mimeType: string };

export type INewsItemByUidQuery_newsItemByUid_News_photo_Image = { uid: string, name: string, thumbUrl: string, fullUrl: string, full: INewsItemByUidQuery_newsItemByUid_News_photo_Image_full_ImageVariation };

export type INewsItemByUidQuery_newsItemByUid_News = { uid: string, lang: string, slug: string, date: string | Date, title: string, description: string, content: string, photo?: INewsItemByUidQuery_newsItemByUid_News_photo_Image | null };

export type INewsItemByUidQuery_Query = { newsItemByUid?: INewsItemByUidQuery_newsItemByUid_News | null };


export type INewsItemByUidQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type INewsItemByUidQuery = INewsItemByUidQuery_Query;

export type IAdminInitialDataQuery_industries_Industry = { name: string };

export type IAdminInitialDataQuery_seasons_Season = { uid: string, name: string, startsAt: string | Date, endsAt: string | Date, applicationsFrom: string | Date, applicationsUntil: string | Date, applicationsEditableFrom: string | Date, applicationsEditableUntil: string | Date, showParticipantsFrom: string | Date, showParticipantsUntil: string | Date, showPartnersFrom: string | Date, showPartnersUntil: string | Date, showSponsorsFrom: string | Date, showSponsorsUntil: string | Date, eventFrom: string | Date, eventUntil: string | Date, feedbackFrom: string | Date, feedbackUntil: string | Date, scheduleFrom: string | Date, scheduleUntil: string | Date };

export type IAdminInitialDataQuery_Query = { industries: Array<IAdminInitialDataQuery_industries_Industry>, seasons: Array<IAdminInitialDataQuery_seasons_Season> };


export type IAdminInitialDataQueryVariables = Exact<{ [key: string]: never; }>;


export type IAdminInitialDataQuery = IAdminInitialDataQuery_Query;

export type IAdminCompanyApplicationQuery_talkCategories_ApplicationTalkCategory = { name: string };

export type IAdminCompanyApplicationQuery_booths_Booth = { name: string, key?: string | null };

export type IAdminCompanyApplicationQuery_companyApplicationFor_CompanyApplication_forCompany_Company = { uid: string, legalName: string, brandName: string, descriptionEn: string, descriptionHr: string, address: string, vat: string, website: string, industry?: IFrag_CompanyFragment_Company_industry_Industry | null };

export type IAdminCompanyApplicationQuery_companyApplicationFor_CompanyApplication = { booth?: string | null, wantsPanel: boolean, wantsCocktail: boolean, forCompany?: IAdminCompanyApplicationQuery_companyApplicationFor_CompanyApplication_forCompany_Company | null, contactPerson?: IFrag_CompanyApplicationFragment_CompanyApplication_contactPerson_CompanyApplicationContactPerson | null, talk?: IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk | null, workshop?: IFrag_CompanyApplicationFragment_CompanyApplication_workshop_ApplicationWorkshop | null, cocktail?: IFrag_CompanyApplicationFragment_CompanyApplication_cocktail_ApplicationCocktail | null, panelParticipants: Array<IFrag_CompanyApplicationFragment_CompanyApplication_panelParticipants_ApplicationPresenter>, approval?: IFrag_CompanyApplicationFragment_CompanyApplication_approval_CompanyApplicationApproval | null, feedback?: IFrag_CompanyApplicationFragment_CompanyApplication_feedback_CompanyApplicationFeedback | null };

export type IAdminCompanyApplicationQuery_Query = { talkCategories: Array<IAdminCompanyApplicationQuery_talkCategories_ApplicationTalkCategory>, booths: Array<IAdminCompanyApplicationQuery_booths_Booth>, companyApplicationFor?: IAdminCompanyApplicationQuery_companyApplicationFor_CompanyApplication | null };


export type IAdminCompanyApplicationQueryVariables = Exact<{
  company: Scalars['String']['input'];
  season: Scalars['String']['input'];
}>;


export type IAdminCompanyApplicationQuery = IAdminCompanyApplicationQuery_Query;

export type IAdminCompanyApplicationsQuery_industries_Industry = { name: string };

export type IAdminCompanyApplicationsQuery_talkCategories_ApplicationTalkCategory = { name: string };

export type IAdminCompanyApplicationsQuery_booths_Booth = { key?: string | null, name: string };

export type IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_talk_ApplicationTalk_category_ApplicationTalkCategory = { name: string };

export type IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_talk_ApplicationTalk = { language: string, titleEn: string, category: IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_talk_ApplicationTalk_category_ApplicationTalkCategory };

export type IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_workshop_ApplicationWorkshop = { language: string, titleEn: string };

export type IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_forCompany_Company_industry_Industry = { name: string };

export type IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_forCompany_Company = { uid: string, brandName: string, industry?: IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_forCompany_Company_industry_Industry | null };

export type IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_forSeason_Season = { uid: string };

export type IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication = { wantsCocktail: boolean, wantsPanel: boolean, booth?: string | null, talk?: IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_talk_ApplicationTalk | null, workshop?: IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_workshop_ApplicationWorkshop | null, forCompany?: IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_forCompany_Company | null, forSeason?: IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication_forSeason_Season | null };

export type IAdminCompanyApplicationsQuery_Query = { industries: Array<IAdminCompanyApplicationsQuery_industries_Industry>, talkCategories: Array<IAdminCompanyApplicationsQuery_talkCategories_ApplicationTalkCategory>, booths: Array<IAdminCompanyApplicationsQuery_booths_Booth>, companyApplications?: Array<IAdminCompanyApplicationsQuery_companyApplications_CompanyApplication> | null };


export type IAdminCompanyApplicationsQueryVariables = Exact<{
  season: Scalars['String']['input'];
}>;


export type IAdminCompanyApplicationsQuery = IAdminCompanyApplicationsQuery_Query;

export type ICurrentCompanyApplicationQuery_talkCategories_ApplicationTalkCategory = { name: string };

export type ICurrentCompanyApplicationQuery_booths_Booth = { name: string, key?: string | null };

export type ICurrentCompanyApplicationQuery_companyApplication_CompanyApplication = { booth?: string | null, wantsPanel: boolean, wantsCocktail: boolean, contactPerson?: IFrag_CompanyApplicationFragment_CompanyApplication_contactPerson_CompanyApplicationContactPerson | null, talk?: IFrag_CompanyApplicationFragment_CompanyApplication_talk_ApplicationTalk | null, workshop?: IFrag_CompanyApplicationFragment_CompanyApplication_workshop_ApplicationWorkshop | null, cocktail?: IFrag_CompanyApplicationFragment_CompanyApplication_cocktail_ApplicationCocktail | null, panelParticipants: Array<IFrag_CompanyApplicationFragment_CompanyApplication_panelParticipants_ApplicationPresenter>, approval?: IFrag_CompanyApplicationFragment_CompanyApplication_approval_CompanyApplicationApproval | null, feedback?: IFrag_CompanyApplicationFragment_CompanyApplication_feedback_CompanyApplicationFeedback | null };

export type ICurrentCompanyApplicationQuery_Query = { talkCategories: Array<ICurrentCompanyApplicationQuery_talkCategories_ApplicationTalkCategory>, booths: Array<ICurrentCompanyApplicationQuery_booths_Booth>, companyApplication?: ICurrentCompanyApplicationQuery_companyApplication_CompanyApplication | null };


export type ICurrentCompanyApplicationQueryVariables = Exact<{ [key: string]: never; }>;


export type ICurrentCompanyApplicationQuery = ICurrentCompanyApplicationQuery_Query;

export type IMyResumeQuery_profile_User_resume_Resume_cv_File = { url: string, name: string, mimeType: string };

export type IMyResumeQuery_profile_User_resume_Resume_faculty_ResumeFaculty = { name: string, module: string, specialization: string };

export type IMyResumeQuery_profile_User_resume_Resume_projects_ResumeProject = { project: string, position: string, start: string | Date, until?: string | Date | null };

export type IMyResumeQuery_profile_User_resume_Resume_volunteerExperiences_ResumeVolunteerExperience = { organisation: string, position: string, start: string | Date, until?: string | Date | null };

export type IMyResumeQuery_profile_User_resume_Resume_workExperiences_ResumeWorkExperience = { company: string, position: string, start: string | Date, until?: string | Date | null };

export type IMyResumeQuery_profile_User_resume_Resume_studyYears_ResumeStudyYear = { studyType: string, studyYear: number };

export type IMyResumeQuery_profile_User_resume_Resume = { uid: string, updatedAt: string | Date, city: string, interests: Array<string>, technologies: Array<string>, extraField: string, cv?: IMyResumeQuery_profile_User_resume_Resume_cv_File | null, faculty?: IMyResumeQuery_profile_User_resume_Resume_faculty_ResumeFaculty | null, projects: Array<IMyResumeQuery_profile_User_resume_Resume_projects_ResumeProject>, volunteerExperiences: Array<IMyResumeQuery_profile_User_resume_Resume_volunteerExperiences_ResumeVolunteerExperience>, workExperiences: Array<IMyResumeQuery_profile_User_resume_Resume_workExperiences_ResumeWorkExperience>, studyYears: Array<IMyResumeQuery_profile_User_resume_Resume_studyYears_ResumeStudyYear> };

export type IMyResumeQuery_profile_User = { resume?: IMyResumeQuery_profile_User_resume_Resume | null };

export type IMyResumeQuery_Query = { profile?: IMyResumeQuery_profile_User | null };


export type IMyResumeQueryVariables = Exact<{ [key: string]: never; }>;


export type IMyResumeQuery = IMyResumeQuery_Query;

export type IResumeQuery_resume_Resume_faculty_ResumeFaculty = { name: string, module: string };

export type IResumeQuery_resume_Resume_user_User = { name: string, email: string, phone: string };

export type IResumeQuery_resume_Resume_studyYears_ResumeStudyYear = { studyYear: number, studyType: string };

export type IResumeQuery_resume_Resume_projects_ResumeProject = { project: string, position: string, start: string | Date, until?: string | Date | null };

export type IResumeQuery_resume_Resume_cv_File = { url: string };

export type IResumeQuery_resume_Resume_volunteerExperiences_ResumeVolunteerExperience = { organisation: string, position: string, start: string | Date, until?: string | Date | null };

export type IResumeQuery_resume_Resume_workExperiences_ResumeWorkExperience = { company: string, position: string, start: string | Date, until?: string | Date | null };

export type IResumeQuery_resume_Resume = { uid: string, technologies: Array<string>, interests: Array<string>, city: string, extraField: string, faculty?: IResumeQuery_resume_Resume_faculty_ResumeFaculty | null, user: IResumeQuery_resume_Resume_user_User, studyYears: Array<IResumeQuery_resume_Resume_studyYears_ResumeStudyYear>, projects: Array<IResumeQuery_resume_Resume_projects_ResumeProject>, cv?: IResumeQuery_resume_Resume_cv_File | null, volunteerExperiences: Array<IResumeQuery_resume_Resume_volunteerExperiences_ResumeVolunteerExperience>, workExperiences: Array<IResumeQuery_resume_Resume_workExperiences_ResumeWorkExperience> };

export type IResumeQuery_Query = { resumeIsFavourite: boolean, resume?: IResumeQuery_resume_Resume | null };


export type IResumeQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IResumeQuery = IResumeQuery_Query;

export type IProfileBaseDataQuery_booths_Booth = { key?: string | null, name: string };

export type IProfileBaseDataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop = { titleEn: string };

export type IProfileBaseDataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk = { titleEn: string };

export type IProfileBaseDataQuery_companyApplication_CompanyApplication_approval_CompanyApplicationApproval = { booth: boolean, workshopParticipants: number, talkParticipants: number, panel: boolean, cocktail: boolean };

export type IProfileBaseDataQuery_companyApplication_CompanyApplication_userApplications_EventUserApplications = { workshop: number, talk: number };

export type IProfileBaseDataQuery_companyApplication_CompanyApplication = { booth?: string | null, wantsPanel: boolean, wantsCocktail: boolean, workshop?: IProfileBaseDataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop | null, talk?: IProfileBaseDataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk | null, approval?: IProfileBaseDataQuery_companyApplication_CompanyApplication_approval_CompanyApplicationApproval | null, userApplications: IProfileBaseDataQuery_companyApplication_CompanyApplication_userApplications_EventUserApplications };

export type IProfileBaseDataQuery_profile_User_resume_Resume = { uid: string };

export type IProfileBaseDataQuery_profile_User = { resume?: IProfileBaseDataQuery_profile_User_resume_Resume | null };

export type IProfileBaseDataQuery_calendar_CalendarItem_forWorkshop_ApplicationWorkshop = { uid: string, titleHr: string, titleEn: string, descriptionHr: string, descriptionEn: string, reservation: number };

export type IProfileBaseDataQuery_calendar_CalendarItem_forTalk_ApplicationTalk = { uid: string, titleHr: string, titleEn: string, descriptionHr: string, descriptionEn: string, reservation: number };

export type IProfileBaseDataQuery_calendar_CalendarItem_forPanel_CompanyPanel = { uid: string, name: string, description: string, reservation: number };

export type IProfileBaseDataQuery_calendar_CalendarItem = { uid: string, title?: string | null, forWorkshop?: IProfileBaseDataQuery_calendar_CalendarItem_forWorkshop_ApplicationWorkshop | null, forTalk?: IProfileBaseDataQuery_calendar_CalendarItem_forTalk_ApplicationTalk | null, forPanel?: IProfileBaseDataQuery_calendar_CalendarItem_forPanel_CompanyPanel | null };

export type IProfileBaseDataQuery_currentSeason_Season_companyComponentAverageRatings_UserCompanyComponentRatingComponentAverage = { component: string, averageRating: number };

export type IProfileBaseDataQuery_currentSeason_Season = { uid: string, name: string, startsAt: string | Date, endsAt: string | Date, applicationsFrom: string | Date, applicationsUntil: string | Date, applicationsEditableFrom: string | Date, applicationsEditableUntil: string | Date, showParticipantsFrom: string | Date, showParticipantsUntil: string | Date, showPartnersFrom: string | Date, showPartnersUntil: string | Date, showSponsorsFrom: string | Date, showSponsorsUntil: string | Date, eventFrom: string | Date, eventUntil: string | Date, feedbackFrom: string | Date, feedbackUntil: string | Date, scheduleFrom: string | Date, scheduleUntil: string | Date, companyComponentAverageRatings: Array<IProfileBaseDataQuery_currentSeason_Season_companyComponentAverageRatings_UserCompanyComponentRatingComponentAverage> };

export type IProfileBaseDataQuery_Query = { booths: Array<IProfileBaseDataQuery_booths_Booth>, companyApplication?: IProfileBaseDataQuery_companyApplication_CompanyApplication | null, profile?: IProfileBaseDataQuery_profile_User | null, calendar: Array<IProfileBaseDataQuery_calendar_CalendarItem>, currentSeason?: IProfileBaseDataQuery_currentSeason_Season | null };


export type IProfileBaseDataQueryVariables = Exact<{ [key: string]: never; }>;


export type IProfileBaseDataQuery = IProfileBaseDataQuery_Query;

export type IAdminFeedbackInfoQuery_companyApplications_CompanyApplication_forCompany_Company = { uid: string, brandName: string };

export type IAdminFeedbackInfoQuery_companyApplications_CompanyApplication_feedback_CompanyApplicationFeedback = { applicationComments: string, applicationRating: number, attendanceRating: number, dateComments: string, dateRating: number, experienceComments: string, foodRating: number, mostLiked: number, onsiteRating: number, overallComment: string, overallRating: number, recommended: number, testimonial: string, timeRating: number, createdAt: string | Date, updatedAt: string | Date };

export type IAdminFeedbackInfoQuery_companyApplications_CompanyApplication = { forCompany?: IAdminFeedbackInfoQuery_companyApplications_CompanyApplication_forCompany_Company | null, feedback?: IAdminFeedbackInfoQuery_companyApplications_CompanyApplication_feedback_CompanyApplicationFeedback | null };

export type IAdminFeedbackInfoQuery_Query = { companyApplications?: Array<IAdminFeedbackInfoQuery_companyApplications_CompanyApplication> | null };


export type IAdminFeedbackInfoQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
}>;


export type IAdminFeedbackInfoQuery = IAdminFeedbackInfoQuery_Query;

export type IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_talk_ApplicationTalk_event_CalendarItem = { uid: string, type?: string | null, title?: string | null, start: string | Date, end: string | Date, location?: string | null, text?: string | null, grouped: boolean };

export type IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_talk_ApplicationTalk = { uid: string, event?: IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_talk_ApplicationTalk_event_CalendarItem | null };

export type IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_workshop_ApplicationWorkshop_event_CalendarItem = { uid: string, type?: string | null, title?: string | null, start: string | Date, end: string | Date, location?: string | null, text?: string | null, grouped: boolean };

export type IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_workshop_ApplicationWorkshop = { uid: string, event?: IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_workshop_ApplicationWorkshop_event_CalendarItem | null };

export type IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter_photo_Image = { fullUrl: string, thumbUrl: string };

export type IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter = { firstName: string, lastName: string, photo?: IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter_photo_Image | null };

export type IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram = { talk?: IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_talk_ApplicationTalk | null, workshop?: IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_workshop_ApplicationWorkshop | null, panelParticipants: Array<IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram_panelParticipants_ApplicationPresenter> };

export type IPageAdminSeasonScheduleBaseQuery_participants_Company = { uid: string, brandName: string, program?: IPageAdminSeasonScheduleBaseQuery_participants_Company_program_CompanyProgram | null };

export type IPageAdminSeasonScheduleBaseQuery_season_Season_panel_CompanyPanel_companies_Company = { uid: string };

export type IPageAdminSeasonScheduleBaseQuery_season_Season_panel_CompanyPanel_event_CalendarItem = { uid: string, type?: string | null, title?: string | null, start: string | Date, end: string | Date, location?: string | null, text?: string | null, grouped: boolean };

export type IPageAdminSeasonScheduleBaseQuery_season_Season_panel_CompanyPanel = { uid: string, name: string, description: string, companies: Array<IPageAdminSeasonScheduleBaseQuery_season_Season_panel_CompanyPanel_companies_Company>, event?: IPageAdminSeasonScheduleBaseQuery_season_Season_panel_CompanyPanel_event_CalendarItem | null };

export type IPageAdminSeasonScheduleBaseQuery_season_Season_calendar_CalendarItem = { uid: string, type?: string | null, title?: string | null, start: string | Date, end: string | Date, location?: string | null, text?: string | null, grouped: boolean };

export type IPageAdminSeasonScheduleBaseQuery_season_Season = { panel?: IPageAdminSeasonScheduleBaseQuery_season_Season_panel_CompanyPanel | null, calendar: Array<IPageAdminSeasonScheduleBaseQuery_season_Season_calendar_CalendarItem> };

export type IPageAdminSeasonScheduleBaseQuery_Query = { participants: Array<IPageAdminSeasonScheduleBaseQuery_participants_Company>, season?: IPageAdminSeasonScheduleBaseQuery_season_Season | null };


export type IPageAdminSeasonScheduleBaseQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
}>;


export type IPageAdminSeasonScheduleBaseQuery = IPageAdminSeasonScheduleBaseQuery_Query;

export type IAdminReservationsDataQuery_season_Season_reservations_ReservationItem = { uid: string, type: string, count: number };

export type IAdminReservationsDataQuery_season_Season = { reservations: Array<IAdminReservationsDataQuery_season_Season_reservations_ReservationItem> };

export type IAdminReservationsDataQuery_participants_Company_program_CompanyProgram_workshop_ApplicationWorkshop = { uid: string, titleHr: string };

export type IAdminReservationsDataQuery_participants_Company_program_CompanyProgram_talk_ApplicationTalk = { uid: string, titleHr: string };

export type IAdminReservationsDataQuery_participants_Company_program_CompanyProgram_panel_CompanyPanel = { uid: string, name: string };

export type IAdminReservationsDataQuery_participants_Company_program_CompanyProgram = { workshop?: IAdminReservationsDataQuery_participants_Company_program_CompanyProgram_workshop_ApplicationWorkshop | null, talk?: IAdminReservationsDataQuery_participants_Company_program_CompanyProgram_talk_ApplicationTalk | null, panel?: IAdminReservationsDataQuery_participants_Company_program_CompanyProgram_panel_CompanyPanel | null };

export type IAdminReservationsDataQuery_participants_Company = { uid: string, vat: string, brandName: string, program?: IAdminReservationsDataQuery_participants_Company_program_CompanyProgram | null };

export type IAdminReservationsDataQuery_Query = { season?: IAdminReservationsDataQuery_season_Season | null, participants: Array<IAdminReservationsDataQuery_participants_Company> };


export type IAdminReservationsDataQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
}>;


export type IAdminReservationsDataQuery = IAdminReservationsDataQuery_Query;

export type IPageScheduleBaseQuery_calendar_CalendarItem = { uid: string, title?: string | null, text?: string | null, start: string | Date, end: string | Date, type?: string | null, grouped: boolean, location?: string | null, hasEvent: boolean };

export type IPageScheduleBaseQuery_Query = { calendar: Array<IPageScheduleBaseQuery_calendar_CalendarItem> };


export type IPageScheduleBaseQueryVariables = Exact<{ [key: string]: never; }>;


export type IPageScheduleBaseQuery = IPageScheduleBaseQuery_Query;

export type IPageAdminUserEditBaseQuery_user_User_roles_Role = { name: string };

export type IPageAdminUserEditBaseQuery_user_User_eventLog_EventLog = { id: number, date: string | Date, name: string, data?: string | null };

export type IPageAdminUserEditBaseQuery_user_User = { uid: string, name: string, firstName: string, lastName: string, email: string, phone: string, roles: Array<IPageAdminUserEditBaseQuery_user_User_roles_Role>, eventLog: Array<IPageAdminUserEditBaseQuery_user_User_eventLog_EventLog> };

export type IPageAdminUserEditBaseQuery_roles_Role = { name: string };

export type IPageAdminUserEditBaseQuery_sessionsFor_Session = { sessionId: string, ip: string, userAgent: string, loggedInAt: string };

export type IPageAdminUserEditBaseQuery_Query = { user?: IPageAdminUserEditBaseQuery_user_User | null, roles: Array<IPageAdminUserEditBaseQuery_roles_Role>, sessionsFor: Array<IPageAdminUserEditBaseQuery_sessionsFor_Session> };


export type IPageAdminUserEditBaseQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IPageAdminUserEditBaseQuery = IPageAdminUserEditBaseQuery_Query;

export type IPageAdminSeasonSeasonDataQuery_season_Season = { uid: string, name: string, startsAt: string | Date, endsAt: string | Date, applicationsFrom: string | Date, applicationsUntil: string | Date };

export type IPageAdminSeasonSeasonDataQuery_Query = { season?: IPageAdminSeasonSeasonDataQuery_season_Season | null };


export type IPageAdminSeasonSeasonDataQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IPageAdminSeasonSeasonDataQuery = IPageAdminSeasonSeasonDataQuery_Query;

export type IPageAdminSeasonApplicationsCompanyEdit_DeleteApplicationMutation_Mutation = { deleteCompanyApplicationFor: boolean };


export type IPageAdminSeasonApplicationsCompanyEdit_DeleteApplicationMutationVariables = Exact<{
  company: Scalars['String']['input'];
  season: Scalars['String']['input'];
}>;


export type IPageAdminSeasonApplicationsCompanyEdit_DeleteApplicationMutation = IPageAdminSeasonApplicationsCompanyEdit_DeleteApplicationMutation_Mutation;

export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_entity_CompanyApplication_talk_ApplicationTalk = { uid: string };

export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_entity_CompanyApplication_workshop_ApplicationWorkshop = { uid: string };

export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_entity_CompanyApplication = { wantsCocktail: boolean, wantsPanel: boolean, talk?: IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_entity_CompanyApplication_talk_ApplicationTalk | null, workshop?: IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_entity_CompanyApplication_workshop_ApplicationWorkshop | null };

export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_errors_FieldError = { field: string, message: string };

export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse = { entity?: IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_entity_CompanyApplication | null, errors?: Array<IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse_errors_FieldError> | null };

export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_Mutation = { createCompanyApplicationFor?: IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_createCompanyApplicationFor_CreateCompanyApplicationResponse | null };


export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutationVariables = Exact<{
  company: Scalars['String']['input'];
  season: Scalars['String']['input'];
  info: ICompanyApplicationCreateInput;
}>;


export type IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation = IPageAdminSeasonApplicationsCompanyEdit_UpsertApplicationMutation_Mutation;

export type IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_talk_ApplicationTalk = { titleEn: string, titleHr: string };

export type IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_workshop_ApplicationWorkshop = { titleEn: string, titleHr: string };

export type IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_forCompany_Company = { uid: string, legalName: string, brandName: string };

export type IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_approval_CompanyApplicationApproval = { booth: boolean, talkParticipants: number, workshopParticipants: number, panel: boolean, cocktail: boolean, logoHidden: boolean };

export type IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication = { wantsPanel: boolean, wantsCocktail: boolean, booth?: string | null, talk?: IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_talk_ApplicationTalk | null, workshop?: IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_workshop_ApplicationWorkshop | null, forCompany?: IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_forCompany_Company | null, approval?: IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication_approval_CompanyApplicationApproval | null };

export type IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season = { name: string, startsAt: string | Date, endsAt: string | Date, applications: Array<IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season_applications_CompanyApplication> };

export type IPageAdminSeasonApplicationsApproval_BaseQuery_Query = { season?: IPageAdminSeasonApplicationsApproval_BaseQuery_season_Season | null };


export type IPageAdminSeasonApplicationsApproval_BaseQueryVariables = Exact<{
  season: Scalars['String']['input'];
}>;


export type IPageAdminSeasonApplicationsApproval_BaseQuery = IPageAdminSeasonApplicationsApproval_BaseQuery_Query;

export type IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_approveCompanyApplications_CompanyApplicationApproval_forApplication_CompanyApplication_forCompany_Company = { uid: string };

export type IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_approveCompanyApplications_CompanyApplicationApproval_forApplication_CompanyApplication = { forCompany?: IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_approveCompanyApplications_CompanyApplicationApproval_forApplication_CompanyApplication_forCompany_Company | null };

export type IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_approveCompanyApplications_CompanyApplicationApproval = { booth: boolean, talkParticipants: number, workshopParticipants: number, panel: boolean, cocktail: boolean, forApplication: IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_approveCompanyApplications_CompanyApplicationApproval_forApplication_CompanyApplication };

export type IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_Mutation = { approveCompanyApplications: Array<IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_approveCompanyApplications_CompanyApplicationApproval> };


export type IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutationVariables = Exact<{
  companies: Array<IApproveCompanyApplicationsInput> | IApproveCompanyApplicationsInput;
  season: Scalars['String']['input'];
}>;


export type IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation = IPageAdminSeasonApplicationsApproval_ApproveCompanyApplicationsMutation_Mutation;

export type IPageAdminSeasonLiveVoteResults_DataQuery_liveVoteResults_LiveVoteResult = { option: string, voteCount: number };

export type IPageAdminSeasonLiveVoteResults_DataQuery_liveVoteComments_LiveVoteComment_forUser_User = { name: string };

export type IPageAdminSeasonLiveVoteResults_DataQuery_liveVoteComments_LiveVoteComment = { id: number, comment: string, createdAt: string | Date, forUser: IPageAdminSeasonLiveVoteResults_DataQuery_liveVoteComments_LiveVoteComment_forUser_User };

export type IPageAdminSeasonLiveVoteResults_DataQuery_Query = { liveVoteResults: Array<IPageAdminSeasonLiveVoteResults_DataQuery_liveVoteResults_LiveVoteResult>, liveVoteComments: Array<IPageAdminSeasonLiveVoteResults_DataQuery_liveVoteComments_LiveVoteComment> };


export type IPageAdminSeasonLiveVoteResults_DataQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
}>;


export type IPageAdminSeasonLiveVoteResults_DataQuery = IPageAdminSeasonLiveVoteResults_DataQuery_Query;

export type IPageAdminSeasonLiveVoteResults_DeleteCommentMutation_Mutation = { deleteLiveVoteComment: boolean };


export type IPageAdminSeasonLiveVoteResults_DeleteCommentMutationVariables = Exact<{
  commentId: Scalars['Int']['input'];
}>;


export type IPageAdminSeasonLiveVoteResults_DeleteCommentMutation = IPageAdminSeasonLiveVoteResults_DeleteCommentMutation_Mutation;

export type IPageAdminSeasonRatingsCompanies_DataQuery_season_Season_applications_CompanyApplication_forCompany_Company_ratings_UserCompanyComponentRatingComponentAverage = { averageRating: number, component: string };

export type IPageAdminSeasonRatingsCompanies_DataQuery_season_Season_applications_CompanyApplication_forCompany_Company = { uid: string, legalName: string, brandName: string, ratings: Array<IPageAdminSeasonRatingsCompanies_DataQuery_season_Season_applications_CompanyApplication_forCompany_Company_ratings_UserCompanyComponentRatingComponentAverage> };

export type IPageAdminSeasonRatingsCompanies_DataQuery_season_Season_applications_CompanyApplication = { forCompany?: IPageAdminSeasonRatingsCompanies_DataQuery_season_Season_applications_CompanyApplication_forCompany_Company | null };

export type IPageAdminSeasonRatingsCompanies_DataQuery_season_Season = { applications: Array<IPageAdminSeasonRatingsCompanies_DataQuery_season_Season_applications_CompanyApplication> };

export type IPageAdminSeasonRatingsCompanies_DataQuery_Query = { season?: IPageAdminSeasonRatingsCompanies_DataQuery_season_Season | null };


export type IPageAdminSeasonRatingsCompanies_DataQueryVariables = Exact<{
  season: Scalars['String']['input'];
}>;


export type IPageAdminSeasonRatingsCompanies_DataQuery = IPageAdminSeasonRatingsCompanies_DataQuery_Query;

export type IPageAdminSeasonRatingsQrCodesDataQuery_season_Season_applications_CompanyApplication_forCompany_Company = { uid: string, legalName: string, brandName: string };

export type IPageAdminSeasonRatingsQrCodesDataQuery_season_Season_applications_CompanyApplication_approval_CompanyApplicationApproval = { booth: boolean, talkParticipants: number, workshopParticipants: number, panel: boolean };

export type IPageAdminSeasonRatingsQrCodesDataQuery_season_Season_applications_CompanyApplication = { forCompany?: IPageAdminSeasonRatingsQrCodesDataQuery_season_Season_applications_CompanyApplication_forCompany_Company | null, approval?: IPageAdminSeasonRatingsQrCodesDataQuery_season_Season_applications_CompanyApplication_approval_CompanyApplicationApproval | null };

export type IPageAdminSeasonRatingsQrCodesDataQuery_season_Season = { name: string, startsAt: string | Date, endsAt: string | Date, applications: Array<IPageAdminSeasonRatingsQrCodesDataQuery_season_Season_applications_CompanyApplication> };

export type IPageAdminSeasonRatingsQrCodesDataQuery_Query = { season?: IPageAdminSeasonRatingsQrCodesDataQuery_season_Season | null };


export type IPageAdminSeasonRatingsQrCodesDataQueryVariables = Exact<{
  season: Scalars['String']['input'];
}>;


export type IPageAdminSeasonRatingsQrCodesDataQuery = IPageAdminSeasonRatingsQrCodesDataQuery_Query;

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forUser_User = { uid: string, name: string, email: string, phone: string };

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_scannedBy_User = { uid: string, name: string };

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_companies_Company = { uid: string, brandName: string };

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_forTalk_ApplicationTalk = { uid: string, titleHr: string, titleEn: string };

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_forWorkshop_ApplicationWorkshop = { uid: string, titleHr: string, titleEn: string };

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_forPanel_CompanyPanel = { uid: string, name: string };

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem = { uid: string, companies?: Array<IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_companies_Company> | null, forTalk?: IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_forTalk_ApplicationTalk | null, forWorkshop?: IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_forWorkshop_ApplicationWorkshop | null, forPanel?: IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem_forPanel_CompanyPanel | null };

export type IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog = { eventType: string, eventId: number, scannedAt: string | Date, forUser?: IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forUser_User | null, scannedBy?: IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_scannedBy_User | null, forCalendarItem?: IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog_forCalendarItem_CalendarItem | null };

export type IPageAdminSeasonReservationsScannedDataQuery_Query = { gateGuardianScanList?: Array<IPageAdminSeasonReservationsScannedDataQuery_gateGuardianScanList_GateGuardianLog> | null };


export type IPageAdminSeasonReservationsScannedDataQueryVariables = Exact<{
  season: Scalars['String']['input'];
}>;


export type IPageAdminSeasonReservationsScannedDataQuery = IPageAdminSeasonReservationsScannedDataQuery_Query;

export type IPageAdminUsersScannersQuery_users_User_roles_Role = { name: string };

export type IPageAdminUsersScannersQuery_users_User = { uid: string, name: string, email: string, roles: Array<IPageAdminUsersScannersQuery_users_User_roles_Role> };

export type IPageAdminUsersScannersQuery_Query = { users: Array<IPageAdminUsersScannersQuery_users_User> };


export type IPageAdminUsersScannersQueryVariables = Exact<{ [key: string]: never; }>;


export type IPageAdminUsersScannersQuery = IPageAdminUsersScannersQuery_Query;

export type IPageAdminUsersScannersUpdateIsScannerMutation_Mutation = { updateScannerStatusFor: boolean };


export type IPageAdminUsersScannersUpdateIsScannerMutationVariables = Exact<{
  uid: Scalars['String']['input'];
  isScanner: Scalars['Boolean']['input'];
}>;


export type IPageAdminUsersScannersUpdateIsScannerMutation = IPageAdminUsersScannersUpdateIsScannerMutation_Mutation;

export type IPageCalendarEventDataQuery_calendarItem_CalendarItem = { hasEvent: boolean, type?: string | null };

export type IPageCalendarEventDataQuery_Query = { calendarItemCompanyUid?: string | null, calendarItem?: IPageCalendarEventDataQuery_calendarItem_CalendarItem | null };


export type IPageCalendarEventDataQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IPageCalendarEventDataQuery = IPageCalendarEventDataQuery_Query;

export type IPageCompanyUidRate_DataQuery_userCompanyComponentRating_UserCompanyComponentRating = { rating: number, comment?: string | null };

export type IPageCompanyUidRate_DataQuery_currentSeason_Season = { eventFrom: string | Date, eventUntil: string | Date };

export type IPageCompanyUidRate_DataQuery_Query = { userCompanyComponentRating?: IPageCompanyUidRate_DataQuery_userCompanyComponentRating_UserCompanyComponentRating | null, currentSeason?: IPageCompanyUidRate_DataQuery_currentSeason_Season | null };


export type IPageCompanyUidRate_DataQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
  companyUid: Scalars['String']['input'];
  component: Scalars['String']['input'];
}>;


export type IPageCompanyUidRate_DataQuery = IPageCompanyUidRate_DataQuery_Query;

export type IPageCompanyUidRate_UpsertMutation_upsertUserCompanyComponentRating_UserCompanyComponentRating = { rating: number, comment?: string | null };

export type IPageCompanyUidRate_UpsertMutation_Mutation = { upsertUserCompanyComponentRating: IPageCompanyUidRate_UpsertMutation_upsertUserCompanyComponentRating_UserCompanyComponentRating };


export type IPageCompanyUidRate_UpsertMutationVariables = Exact<{
  seasonUid: Scalars['String']['input'];
  companyUid: Scalars['String']['input'];
  component: Scalars['String']['input'];
  rating: Scalars['Int']['input'];
  comment?: InputMaybe<Scalars['String']['input']>;
}>;


export type IPageCompanyUidRate_UpsertMutation = IPageCompanyUidRate_UpsertMutation_Mutation;

export type IPageCompanyUidRate_DeleteMutation_Mutation = { deleteUserCompanyComponentRating: boolean };


export type IPageCompanyUidRate_DeleteMutationVariables = Exact<{
  seasonUid: Scalars['String']['input'];
  companyUid: Scalars['String']['input'];
  component: Scalars['String']['input'];
}>;


export type IPageCompanyUidRate_DeleteMutation = IPageCompanyUidRate_DeleteMutation_Mutation;

export type IPageGateGuardian_ScanMutation_gateGuardianScan_GateGuardianScanResponse_user_User = { name: string, phone: string };

export type IPageGateGuardian_ScanMutation_gateGuardianScan_GateGuardianScanResponse = { hasReservation: boolean, alreadyScanned: boolean, error?: string | null, user?: IPageGateGuardian_ScanMutation_gateGuardianScan_GateGuardianScanResponse_user_User | null };

export type IPageGateGuardian_ScanMutation_Mutation = { gateGuardianScan?: IPageGateGuardian_ScanMutation_gateGuardianScan_GateGuardianScanResponse | null };


export type IPageGateGuardian_ScanMutationVariables = Exact<{
  userUid: Scalars['String']['input'];
  eventUid: Scalars['String']['input'];
  eventType: Scalars['String']['input'];
}>;


export type IPageGateGuardian_ScanMutation = IPageGateGuardian_ScanMutation_Mutation;

export type IPageGateGuardian_EventListQuery_calendar_CalendarItem = { uid: string, title?: string | null, text?: string | null, type?: string | null };

export type IPageGateGuardian_EventListQuery_Query = { calendar: Array<IPageGateGuardian_EventListQuery_calendar_CalendarItem> };


export type IPageGateGuardian_EventListQueryVariables = Exact<{ [key: string]: never; }>;


export type IPageGateGuardian_EventListQuery = IPageGateGuardian_EventListQuery_Query;

export type IPageLiveVoteSeason_DataQuery_season_Season = { uid: string, name: string, startsAt: string | Date, endsAt: string | Date, applicationsFrom: string | Date, applicationsUntil: string | Date, applicationsEditableFrom: string | Date, applicationsEditableUntil: string | Date, showParticipantsFrom: string | Date, showParticipantsUntil: string | Date, showPartnersFrom: string | Date, showPartnersUntil: string | Date, showSponsorsFrom: string | Date, showSponsorsUntil: string | Date, eventFrom: string | Date, eventUntil: string | Date, feedbackFrom: string | Date, feedbackUntil: string | Date, scheduleFrom: string | Date, scheduleUntil: string | Date };

export type IPageLiveVoteSeason_DataQuery_Query = { season?: IPageLiveVoteSeason_DataQuery_season_Season | null };


export type IPageLiveVoteSeason_DataQueryVariables = Exact<{
  uid: Scalars['String']['input'];
}>;


export type IPageLiveVoteSeason_DataQuery = IPageLiveVoteSeason_DataQuery_Query;

export type IPageLiveVoteSeasonIndex_DataQuery_myLiveVote_LiveVote = { option: string };

export type IPageLiveVoteSeasonIndex_DataQuery_myLiveVoteComments_LiveVoteComment = { id: number, comment: string };

export type IPageLiveVoteSeasonIndex_DataQuery_Query = { myLiveVote?: IPageLiveVoteSeasonIndex_DataQuery_myLiveVote_LiveVote | null, myLiveVoteComments: Array<IPageLiveVoteSeasonIndex_DataQuery_myLiveVoteComments_LiveVoteComment> };


export type IPageLiveVoteSeasonIndex_DataQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
}>;


export type IPageLiveVoteSeasonIndex_DataQuery = IPageLiveVoteSeasonIndex_DataQuery_Query;

export type IPageLiveVoteSeasonIndex_DeleteCommentMutation_Mutation = { deleteLiveVoteComment: boolean };


export type IPageLiveVoteSeasonIndex_DeleteCommentMutationVariables = Exact<{
  commentId: Scalars['Int']['input'];
}>;


export type IPageLiveVoteSeasonIndex_DeleteCommentMutation = IPageLiveVoteSeasonIndex_DeleteCommentMutation_Mutation;

export type IPageLiveVoteSeasonIndex_SubmitCommentMutation_createLiveVoteComment_LiveVoteComment = { id: number, comment: string };

export type IPageLiveVoteSeasonIndex_SubmitCommentMutation_Mutation = { createLiveVoteComment?: IPageLiveVoteSeasonIndex_SubmitCommentMutation_createLiveVoteComment_LiveVoteComment | null };


export type IPageLiveVoteSeasonIndex_SubmitCommentMutationVariables = Exact<{
  seasonUid: Scalars['String']['input'];
  comment: Scalars['String']['input'];
}>;


export type IPageLiveVoteSeasonIndex_SubmitCommentMutation = IPageLiveVoteSeasonIndex_SubmitCommentMutation_Mutation;

export type IPageLiveVoteSeasonIndex_SubmitVoteMutation_createLiveVote_LiveVote = { option: string };

export type IPageLiveVoteSeasonIndex_SubmitVoteMutation_Mutation = { createLiveVote?: IPageLiveVoteSeasonIndex_SubmitVoteMutation_createLiveVote_LiveVote | null };


export type IPageLiveVoteSeasonIndex_SubmitVoteMutationVariables = Exact<{
  seasonUid: Scalars['String']['input'];
  vote: Scalars['String']['input'];
}>;


export type IPageLiveVoteSeasonIndex_SubmitVoteMutation = IPageLiveVoteSeasonIndex_SubmitVoteMutation_Mutation;

export type IPageLiveVoteSeasonViewLiveVoteResults_LiveVoteResultsQuery_liveVoteResults_LiveVoteResult = { option: string, voteCount: number };

export type IPageLiveVoteSeasonViewLiveVoteResults_LiveVoteResultsQuery_Query = { liveVoteResults: Array<IPageLiveVoteSeasonViewLiveVoteResults_LiveVoteResultsQuery_liveVoteResults_LiveVoteResult> };


export type IPageLiveVoteSeasonViewLiveVoteResults_LiveVoteResultsQueryVariables = Exact<{
  seasonUid: Scalars['String']['input'];
}>;


export type IPageLiveVoteSeasonViewLiveVoteResults_LiveVoteResultsQuery = IPageLiveVoteSeasonViewLiveVoteResults_LiveVoteResultsQuery_Query;

export type IPageParticipants_BaseQuery_participants_Company_rasterLogo_Image = { thumbUrl: string, fullUrl: string };

export type IPageParticipants_BaseQuery_participants_Company_ratings_UserCompanyComponentRatingComponentAverage = { averageRating: number, ratingCount?: number | null, component: string };

export type IPageParticipants_BaseQuery_participants_Company = { uid: string, website: string, brandName: string, descriptionEn: string, descriptionHr: string, logoHidden: boolean, rasterLogo?: IPageParticipants_BaseQuery_participants_Company_rasterLogo_Image | null, ratings: Array<IPageParticipants_BaseQuery_participants_Company_ratings_UserCompanyComponentRatingComponentAverage> };

export type IPageParticipants_BaseQuery_Query = { participants: Array<IPageParticipants_BaseQuery_participants_Company> };


export type IPageParticipants_BaseQueryVariables = Exact<{ [key: string]: never; }>;


export type IPageParticipants_BaseQuery = IPageParticipants_BaseQuery_Query;

export type IPageParticipants_RatingsQuery_participants_Company_ratings_UserCompanyComponentRatingComponentAverage = { averageRating: number, ratingCount?: number | null, component: string };

export type IPageParticipants_RatingsQuery_participants_Company = { uid: string, brandName: string, ratings: Array<IPageParticipants_RatingsQuery_participants_Company_ratings_UserCompanyComponentRatingComponentAverage> };

export type IPageParticipants_RatingsQuery_Query = { participants: Array<IPageParticipants_RatingsQuery_participants_Company> };


export type IPageParticipants_RatingsQueryVariables = Exact<{ [key: string]: never; }>;


export type IPageParticipants_RatingsQuery = IPageParticipants_RatingsQuery_Query;

export type IPageProfileMeCompanyScanUserQrScanMutation_scanUserQr_CompanyScanUserQrResponse_user_User = { uid: string, name: string, email: string };

export type IPageProfileMeCompanyScanUserQrScanMutation_scanUserQr_CompanyScanUserQrResponse = { isStarred?: boolean | null, alreadyScanned: boolean, note?: string | null, error?: string | null, user?: IPageProfileMeCompanyScanUserQrScanMutation_scanUserQr_CompanyScanUserQrResponse_user_User | null };

export type IPageProfileMeCompanyScanUserQrScanMutation_Mutation = { scanUserQr?: IPageProfileMeCompanyScanUserQrScanMutation_scanUserQr_CompanyScanUserQrResponse | null };


export type IPageProfileMeCompanyScanUserQrScanMutationVariables = Exact<{
  userUid: Scalars['String']['input'];
}>;


export type IPageProfileMeCompanyScanUserQrScanMutation = IPageProfileMeCompanyScanUserQrScanMutation_Mutation;

export type IPageProfileMeCompanyScanUserQrRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse_user_User = { uid: string, name: string, email: string };

export type IPageProfileMeCompanyScanUserQrRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse = { isStarred?: boolean | null, note?: string | null, error?: string | null, user?: IPageProfileMeCompanyScanUserQrRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse_user_User | null };

export type IPageProfileMeCompanyScanUserQrRefineQrScanMutation_Mutation = { scanUserQrRefine?: IPageProfileMeCompanyScanUserQrRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse | null };


export type IPageProfileMeCompanyScanUserQrRefineQrScanMutationVariables = Exact<{
  userUid: Scalars['String']['input'];
  refineData: ICompanyScanUserQrRefineData;
}>;


export type IPageProfileMeCompanyScanUserQrRefineQrScanMutation = IPageProfileMeCompanyScanUserQrRefineQrScanMutation_Mutation;

export type IPageProfileMeCompanyScansListDataQuery_scannedUsers_CompanyScannedUser_user_User = { uid: string, name: string, email: string, phone: string };

export type IPageProfileMeCompanyScansListDataQuery_scannedUsers_CompanyScannedUser = { note?: string | null, isStarred: boolean, scannedAt: string | Date, user?: IPageProfileMeCompanyScansListDataQuery_scannedUsers_CompanyScannedUser_user_User | null };

export type IPageProfileMeCompanyScansListDataQuery_Query = { scannedUsers: Array<IPageProfileMeCompanyScansListDataQuery_scannedUsers_CompanyScannedUser> };


export type IPageProfileMeCompanyScansListDataQueryVariables = Exact<{
  companyUid?: InputMaybe<Scalars['String']['input']>;
  seasonUid?: InputMaybe<Scalars['String']['input']>;
}>;


export type IPageProfileMeCompanyScansListDataQuery = IPageProfileMeCompanyScansListDataQuery_Query;

export type IPageProfileMeCompanyScansListRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse_user_User = { uid: string, name: string, email: string, phone: string };

export type IPageProfileMeCompanyScansListRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse = { isStarred?: boolean | null, note?: string | null, error?: string | null, user?: IPageProfileMeCompanyScansListRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse_user_User | null };

export type IPageProfileMeCompanyScansListRefineQrScanMutation_Mutation = { scanUserQrRefine?: IPageProfileMeCompanyScansListRefineQrScanMutation_scanUserQrRefine_CompanyScanUserQrResponse | null };


export type IPageProfileMeCompanyScansListRefineQrScanMutationVariables = Exact<{
  userUid: Scalars['String']['input'];
  refineData: ICompanyScanUserQrRefineData;
}>;


export type IPageProfileMeCompanyScansListRefineQrScanMutation = IPageProfileMeCompanyScansListRefineQrScanMutation_Mutation;

export type IPageProfileMeCompanySignup_DataQuery_talkCategories_ApplicationTalkCategory = { name: string };

export type IPageProfileMeCompanySignup_DataQuery_booths_Booth = { name: string, key?: string | null };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_contactPerson_CompanyApplicationContactPerson = { name: string, email: string, phone: string };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_category_ApplicationTalkCategory = { name: string };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter_photo_Image_full_ImageVariation = { mimeType: string };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter_photo_Image = { name: string, uid: string, full: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter_photo_Image_full_ImageVariation };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter_photo_Image | null };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk = { titleEn: string, titleHr: string, descriptionEn: string, descriptionHr: string, language: string, category: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_category_ApplicationTalkCategory, presenters: Array<IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk_presenters_ApplicationPresenter> };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter_photo_Image_full_ImageVariation = { mimeType: string };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter_photo_Image = { name: string, uid: string, full: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter_photo_Image_full_ImageVariation };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter = { firstName: string, lastName: string, bioHr: string, bioEn: string, photo?: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter_photo_Image | null };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop = { titleEn: string, titleHr: string, descriptionEn: string, descriptionHr: string, language: string, goal: string, notesEn: string, notesHr: string, presenters: Array<IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop_presenters_ApplicationPresenter> };

export type IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication = { booth?: string | null, wantsPanel: boolean, wantsCocktail: boolean, contactPerson?: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_contactPerson_CompanyApplicationContactPerson | null, talk?: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_talk_ApplicationTalk | null, workshop?: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication_workshop_ApplicationWorkshop | null };

export type IPageProfileMeCompanySignup_DataQuery_Query = { talkCategories: Array<IPageProfileMeCompanySignup_DataQuery_talkCategories_ApplicationTalkCategory>, booths: Array<IPageProfileMeCompanySignup_DataQuery_booths_Booth>, companyApplication?: IPageProfileMeCompanySignup_DataQuery_companyApplication_CompanyApplication | null };


export type IPageProfileMeCompanySignup_DataQueryVariables = Exact<{ [key: string]: never; }>;


export type IPageProfileMeCompanySignup_DataQuery = IPageProfileMeCompanySignup_DataQuery_Query;

export type IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_entity_CompanyApplication_talk_ApplicationTalk = { uid: string };

export type IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_entity_CompanyApplication_workshop_ApplicationWorkshop = { uid: string };

export type IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_entity_CompanyApplication = { wantsCocktail: boolean, wantsPanel: boolean, talk?: IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_entity_CompanyApplication_talk_ApplicationTalk | null, workshop?: IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_entity_CompanyApplication_workshop_ApplicationWorkshop | null };

export type IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_errors_FieldError = { field: string, message: string };

export type IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse = { entity?: IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_entity_CompanyApplication | null, errors?: Array<IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse_errors_FieldError> | null };

export type IPageProfileMeCompanySignup_CreateApplicationMutation_Mutation = { createCompanyApplication?: IPageProfileMeCompanySignup_CreateApplicationMutation_createCompanyApplication_CreateCompanyApplicationResponse | null };


export type IPageProfileMeCompanySignup_CreateApplicationMutationVariables = Exact<{
  info: ICompanyApplicationCreateInput;
}>;


export type IPageProfileMeCompanySignup_CreateApplicationMutation = IPageProfileMeCompanySignup_CreateApplicationMutation_Mutation;

export type IStoreCalendarEventToggleReservationMutation_updateEventReservation_EventReservationResponse_entity_EventReservationStatus = { status: number };

export type IStoreCalendarEventToggleReservationMutation_updateEventReservation_EventReservationResponse_errors_FieldError = { field: string, message: string };

export type IStoreCalendarEventToggleReservationMutation_updateEventReservation_EventReservationResponse = { entity?: IStoreCalendarEventToggleReservationMutation_updateEventReservation_EventReservationResponse_entity_EventReservationStatus | null, errors?: Array<IStoreCalendarEventToggleReservationMutation_updateEventReservation_EventReservationResponse_errors_FieldError> | null };

export type IStoreCalendarEventToggleReservationMutation_Mutation = { updateEventReservation?: IStoreCalendarEventToggleReservationMutation_updateEventReservation_EventReservationResponse | null };


export type IStoreCalendarEventToggleReservationMutationVariables = Exact<{
  input: IEventReservationUpdateInput;
}>;


export type IStoreCalendarEventToggleReservationMutation = IStoreCalendarEventToggleReservationMutation_Mutation;

export type IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forWorkshop_ApplicationWorkshop = { uid: string, titleHr: string, titleEn: string, descriptionHr: string, descriptionEn: string, reservation: number };

export type IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forTalk_ApplicationTalk = { uid: string, titleHr: string, titleEn: string, descriptionHr: string, descriptionEn: string, reservation: number };

export type IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forPanel_CompanyPanel_companies_Company = { uid: string, brandName: string };

export type IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forPanel_CompanyPanel = { uid: string, name: string, description: string, reservation: number, companies: Array<IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forPanel_CompanyPanel_companies_Company> };

export type IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_companies_Company_rasterLogo_Image = { fullUrl: string, thumbUrl: string };

export type IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_companies_Company = { uid: string, brandName: string, rasterLogo?: IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_companies_Company_rasterLogo_Image | null };

export type IStoreCalendarEventsAllCalendarFragmentFragment = { uid: string, location?: string | null, start: string | Date, end: string | Date, capacity: number, forWorkshop?: IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forWorkshop_ApplicationWorkshop | null, forTalk?: IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forTalk_ApplicationTalk | null, forPanel?: IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forPanel_CompanyPanel | null, companies?: Array<IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_companies_Company> | null };

export type IStoreCalendarEventsAllQuery_calendar_CalendarItem = { uid: string, location?: string | null, start: string | Date, end: string | Date, capacity: number, forWorkshop?: IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forWorkshop_ApplicationWorkshop | null, forTalk?: IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forTalk_ApplicationTalk | null, forPanel?: IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_forPanel_CompanyPanel | null, companies?: Array<IStoreCalendarEventsAllCalendarFragmentFragment_CalendarItem_companies_Company> | null };

export type IStoreCalendarEventsAllQuery_currentSeason_Season_reservations_ReservationItem = { uid: string, type: string, count: number };

export type IStoreCalendarEventsAllQuery_currentSeason_Season = { reservations: Array<IStoreCalendarEventsAllQuery_currentSeason_Season_reservations_ReservationItem> };

export type IStoreCalendarEventsAllQuery_Query = { calendar: Array<IStoreCalendarEventsAllQuery_calendar_CalendarItem>, currentSeason?: IStoreCalendarEventsAllQuery_currentSeason_Season | null };


export type IStoreCalendarEventsAllQueryVariables = Exact<{ [key: string]: never; }>;


export type IStoreCalendarEventsAllQuery = IStoreCalendarEventsAllQuery_Query;

export type IResumeSetIsFavouriteMutation_Mutation = { resumeSetIsFavourite: boolean };


export type IResumeSetIsFavouriteMutationVariables = Exact<{
  uid: Scalars['String']['input'];
  isFavourite: Scalars['Boolean']['input'];
}>;


export type IResumeSetIsFavouriteMutation = IResumeSetIsFavouriteMutation_Mutation;



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;



/** Mapping between all available schema types and the resolvers types */
export type IResolversTypes = {
  ApplicationCocktail: ResolverTypeWrapper<IApplicationCocktail>;
  ApplicationCocktailCount: ResolverTypeWrapper<IApplicationCocktailCount>;
  ApplicationCocktailNullableRelationFilter: IApplicationCocktailNullableRelationFilter;
  ApplicationCocktailOrderByWithRelationInput: IApplicationCocktailOrderByWithRelationInput;
  ApplicationCocktailWhereInput: IApplicationCocktailWhereInput;
  ApplicationPresenter: ResolverTypeWrapper<IApplicationPresenter>;
  ApplicationPresenterCount: ResolverTypeWrapper<IApplicationPresenterCount>;
  ApplicationPresenterListRelationFilter: IApplicationPresenterListRelationFilter;
  ApplicationPresenterOrderByRelationAggregateInput: IApplicationPresenterOrderByRelationAggregateInput;
  ApplicationPresenterWhereInput: IApplicationPresenterWhereInput;
  ApplicationTalk: ResolverTypeWrapper<IApplicationTalk>;
  ApplicationTalkCategory: ResolverTypeWrapper<IApplicationTalkCategory>;
  ApplicationTalkCategoryCount: ResolverTypeWrapper<IApplicationTalkCategoryCount>;
  ApplicationTalkCategoryForSeasonIdNameCompoundUniqueInput: IApplicationTalkCategoryForSeasonIdNameCompoundUniqueInput;
  ApplicationTalkCategoryOrderByWithRelationInput: IApplicationTalkCategoryOrderByWithRelationInput;
  ApplicationTalkCategoryRelationFilter: IApplicationTalkCategoryRelationFilter;
  ApplicationTalkCategoryScalarFieldEnum: IApplicationTalkCategoryScalarFieldEnum;
  ApplicationTalkCategoryWhereInput: IApplicationTalkCategoryWhereInput;
  ApplicationTalkCategoryWhereUniqueInput: IApplicationTalkCategoryWhereUniqueInput;
  ApplicationTalkCount: ResolverTypeWrapper<IApplicationTalkCount>;
  ApplicationTalkNullableRelationFilter: IApplicationTalkNullableRelationFilter;
  ApplicationTalkOrderByWithRelationInput: IApplicationTalkOrderByWithRelationInput;
  ApplicationTalkWhereInput: IApplicationTalkWhereInput;
  ApplicationWorkshop: ResolverTypeWrapper<IApplicationWorkshop>;
  ApplicationWorkshopCount: ResolverTypeWrapper<IApplicationWorkshopCount>;
  ApplicationWorkshopNullableRelationFilter: IApplicationWorkshopNullableRelationFilter;
  ApplicationWorkshopOrderByWithRelationInput: IApplicationWorkshopOrderByWithRelationInput;
  ApplicationWorkshopWhereInput: IApplicationWorkshopWhereInput;
  ApproveCompanyApplicationsInput: IApproveCompanyApplicationsInput;
  ApproveCompanyApplicationsInputParts: IApproveCompanyApplicationsInputParts;
  AuthResponse: ResolverTypeWrapper<IAuthResponse>;
  BoolFilter: IBoolFilter;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  Booth: ResolverTypeWrapper<IBooth>;
  CalendarEvent: ResolverTypeWrapper<ICalendarEvent>;
  CalendarFilterInput: ICalendarFilterInput;
  CalendarItem: ResolverTypeWrapper<ICalendarItem>;
  CalendarItemListRelationFilter: ICalendarItemListRelationFilter;
  CalendarItemNullableRelationFilter: ICalendarItemNullableRelationFilter;
  CalendarItemOrderByRelationAggregateInput: ICalendarItemOrderByRelationAggregateInput;
  CalendarItemOrderByWithRelationInput: ICalendarItemOrderByWithRelationInput;
  CalendarItemWhereInput: ICalendarItemWhereInput;
  CalendarUpdateInput: ICalendarUpdateInput;
  CocktailCreateInput: ICocktailCreateInput;
  Company: ResolverTypeWrapper<ICompany>;
  CompanyApplication: ResolverTypeWrapper<ICompanyApplication>;
  CompanyApplicationApproval: ResolverTypeWrapper<ICompanyApplicationApproval>;
  CompanyApplicationApprovalNullableRelationFilter: ICompanyApplicationApprovalNullableRelationFilter;
  CompanyApplicationApprovalOrderByWithRelationInput: ICompanyApplicationApprovalOrderByWithRelationInput;
  CompanyApplicationApprovalWhereInput: ICompanyApplicationApprovalWhereInput;
  CompanyApplicationApprovedEditInput: ICompanyApplicationApprovedEditInput;
  CompanyApplicationContactPerson: ResolverTypeWrapper<ICompanyApplicationContactPerson>;
  CompanyApplicationContactPersonCreateInput: ICompanyApplicationContactPersonCreateInput;
  CompanyApplicationContactPersonNullableRelationFilter: ICompanyApplicationContactPersonNullableRelationFilter;
  CompanyApplicationContactPersonOrderByWithRelationInput: ICompanyApplicationContactPersonOrderByWithRelationInput;
  CompanyApplicationContactPersonWhereInput: ICompanyApplicationContactPersonWhereInput;
  CompanyApplicationCount: ResolverTypeWrapper<ICompanyApplicationCount>;
  CompanyApplicationCreateInput: ICompanyApplicationCreateInput;
  CompanyApplicationFeedback: ResolverTypeWrapper<ICompanyApplicationFeedback>;
  CompanyApplicationFeedbackCreateInput: ICompanyApplicationFeedbackCreateInput;
  CompanyApplicationForCompanyIdForSeasonIdCompoundUniqueInput: ICompanyApplicationForCompanyIdForSeasonIdCompoundUniqueInput;
  CompanyApplicationListRelationFilter: ICompanyApplicationListRelationFilter;
  CompanyApplicationOrderByRelationAggregateInput: ICompanyApplicationOrderByRelationAggregateInput;
  CompanyApplicationOrderByWithRelationInput: ICompanyApplicationOrderByWithRelationInput;
  CompanyApplicationScalarFieldEnum: ICompanyApplicationScalarFieldEnum;
  CompanyApplicationWhereInput: ICompanyApplicationWhereInput;
  CompanyApplicationWhereUniqueInput: ICompanyApplicationWhereUniqueInput;
  CompanyCount: ResolverTypeWrapper<ICompanyCount>;
  CompanyOrderByWithRelationInput: ICompanyOrderByWithRelationInput;
  CompanyPanel: ResolverTypeWrapper<ICompanyPanel>;
  CompanyPanelCount: ResolverTypeWrapper<ICompanyPanelCount>;
  CompanyPanelNullableRelationFilter: ICompanyPanelNullableRelationFilter;
  CompanyPanelOrderByWithRelationInput: ICompanyPanelOrderByWithRelationInput;
  CompanyPanelUpdateInput: ICompanyPanelUpdateInput;
  CompanyPanelWhereInput: ICompanyPanelWhereInput;
  CompanyProgram: ResolverTypeWrapper<ICompanyProgram>;
  CompanyRelationFilter: ICompanyRelationFilter;
  CompanyScalarFieldEnum: ICompanyScalarFieldEnum;
  CompanyScanUserQrRefineData: ICompanyScanUserQrRefineData;
  CompanyScanUserQrResponse: ResolverTypeWrapper<ICompanyScanUserQrResponse>;
  CompanyScannedUser: ResolverTypeWrapper<ICompanyScannedUser>;
  CompanyScannedUserListRelationFilter: ICompanyScannedUserListRelationFilter;
  CompanyScannedUserOrderByRelationAggregateInput: ICompanyScannedUserOrderByRelationAggregateInput;
  CompanyScannedUserWhereInput: ICompanyScannedUserWhereInput;
  CompanyWhereInput: ICompanyWhereInput;
  CompanyWhereUniqueInput: ICompanyWhereUniqueInput;
  CreateCompanyApplicationResponse: ResolverTypeWrapper<ICreateCompanyApplicationResponse>;
  CreateCompanyInput: ICreateCompanyInput;
  CreateCompanyResponse: ResolverTypeWrapper<ICreateCompanyResponse>;
  CreatePartnerResponse: ResolverTypeWrapper<ICreatePartnerResponse>;
  CreatePressReleaseResponse: ResolverTypeWrapper<ICreatePressReleaseResponse>;
  CreateSponsorResponse: ResolverTypeWrapper<ICreateSponsorResponse>;
  DateTimeFilter: IDateTimeFilter;
  DateTimeISO: ResolverTypeWrapper<Scalars['DateTimeISO']['output']>;
  DateTimeNullableFilter: IDateTimeNullableFilter;
  EditApprovedCompanyApplicationResponse: ResolverTypeWrapper<IEditApprovedCompanyApplicationResponse>;
  EntryResumeLogWhereInput: IEntryResumeLogWhereInput;
  EventLog: ResolverTypeWrapper<IEventLog>;
  EventLogOrderByWithRelationInput: IEventLogOrderByWithRelationInput;
  EventLogPaginationResult: ResolverTypeWrapper<IEventLogPaginationResult>;
  EventLogWhereInput: IEventLogWhereInput;
  EventReservationResponse: ResolverTypeWrapper<IEventReservationResponse>;
  EventReservationStatus: ResolverTypeWrapper<IEventReservationStatus>;
  EventReservationUpdateInput: IEventReservationUpdateInput;
  EventReservationWhereInput: IEventReservationWhereInput;
  EventType: IEventType;
  EventUserApplications: ResolverTypeWrapper<IEventUserApplications>;
  FavouriteResumeWhereInput: IFavouriteResumeWhereInput;
  FieldError: ResolverTypeWrapper<IFieldError>;
  File: ResolverTypeWrapper<IFile>;
  FileCount: ResolverTypeWrapper<IFileCount>;
  FileOrderByWithRelationInput: IFileOrderByWithRelationInput;
  FileRelationFilter: IFileRelationFilter;
  FileWhereInput: IFileWhereInput;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  FloatFilter: IFloatFilter;
  GateGuardianLog: ResolverTypeWrapper<IGateGuardianLog>;
  GateGuardianLogListRelationFilter: IGateGuardianLogListRelationFilter;
  GateGuardianLogOrderByRelationAggregateInput: IGateGuardianLogOrderByRelationAggregateInput;
  GateGuardianLogWhereInput: IGateGuardianLogWhereInput;
  GateGuardianScanResponse: ResolverTypeWrapper<IGateGuardianScanResponse>;
  Image: ResolverTypeWrapper<IImage>;
  ImageCount: ResolverTypeWrapper<IImageCount>;
  ImageNullableRelationFilter: IImageNullableRelationFilter;
  ImageRelationFilter: IImageRelationFilter;
  ImageVariation: ResolverTypeWrapper<IImageVariation>;
  ImageVariationCount: ResolverTypeWrapper<IImageVariationCount>;
  ImageVariationRelationFilter: IImageVariationRelationFilter;
  ImageVariationWhereInput: IImageVariationWhereInput;
  ImageWhereInput: IImageWhereInput;
  Industry: ResolverTypeWrapper<IIndustry>;
  IndustryCount: ResolverTypeWrapper<IIndustryCount>;
  IndustryOrderByWithRelationInput: IIndustryOrderByWithRelationInput;
  IndustryScalarFieldEnum: IIndustryScalarFieldEnum;
  IndustryWhereInput: IIndustryWhereInput;
  IndustryWhereUniqueInput: IIndustryWhereUniqueInput;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  IntFilter: IIntFilter;
  IntNullableFilter: IIntNullableFilter;
  LiveVote: ResolverTypeWrapper<ILiveVote>;
  LiveVoteComment: ResolverTypeWrapper<ILiveVoteComment>;
  LiveVoteCommentWhereInput: ILiveVoteCommentWhereInput;
  LiveVoteResult: ResolverTypeWrapper<ILiveVoteResult>;
  LiveVoteWhereInput: ILiveVoteWhereInput;
  Mutation: ResolverTypeWrapper<{}>;
  NestedBoolFilter: INestedBoolFilter;
  NestedDateTimeFilter: INestedDateTimeFilter;
  NestedDateTimeNullableFilter: INestedDateTimeNullableFilter;
  NestedFloatFilter: INestedFloatFilter;
  NestedIntFilter: INestedIntFilter;
  NestedIntNullableFilter: INestedIntNullableFilter;
  NestedStringFilter: INestedStringFilter;
  NestedStringNullableFilter: INestedStringNullableFilter;
  News: ResolverTypeWrapper<INews>;
  NewsCreateInput: INewsCreateInput;
  NewsCreateResponse: ResolverTypeWrapper<INewsCreateResponse>;
  NewsFilter: INewsFilter;
  NewsWhereInput: INewsWhereInput;
  NullsOrder: INullsOrder;
  Partner: ResolverTypeWrapper<IPartner>;
  PartnerCreateInput: IPartnerCreateInput;
  PartnerListRelationFilter: IPartnerListRelationFilter;
  PartnerOrderByRelationAggregateInput: IPartnerOrderByRelationAggregateInput;
  PartnerWhereInput: IPartnerWhereInput;
  PasswordResetUseInput: IPasswordResetUseInput;
  PasswordResetUseResponse: ResolverTypeWrapper<IPasswordResetUseResponse>;
  PasswordResetWhereInput: IPasswordResetWhereInput;
  PresenterCreateInput: IPresenterCreateInput;
  PressRelease: ResolverTypeWrapper<IPressRelease>;
  PressReleaseOrderByWithRelationInput: IPressReleaseOrderByWithRelationInput;
  PressReleaseScalarFieldEnum: IPressReleaseScalarFieldEnum;
  PressReleaseWhereInput: IPressReleaseWhereInput;
  PressReleaseWhereUniqueInput: IPressReleaseWhereUniqueInput;
  PressReleaseWithFilesCreateInput: IPressReleaseWithFilesCreateInput;
  Query: ResolverTypeWrapper<{}>;
  QueryMode: IQueryMode;
  ReservationItem: ResolverTypeWrapper<IReservationItem>;
  Resume: ResolverTypeWrapper<IResume>;
  ResumeCount: ResolverTypeWrapper<IResumeCount>;
  ResumeCreateCvInput: IResumeCreateCvInput;
  ResumeCreateInput: IResumeCreateInput;
  ResumeCreateResponse: ResolverTypeWrapper<IResumeCreateResponse>;
  ResumeFaculty: ResolverTypeWrapper<IResumeFaculty>;
  ResumeFacultyCreateInput: IResumeFacultyCreateInput;
  ResumeFacultyNullableRelationFilter: IResumeFacultyNullableRelationFilter;
  ResumeFacultyOrderByWithRelationInput: IResumeFacultyOrderByWithRelationInput;
  ResumeFacultyWhereInput: IResumeFacultyWhereInput;
  ResumeFindManyInput: IResumeFindManyInput;
  ResumeInterestListRelationFilter: IResumeInterestListRelationFilter;
  ResumeInterestOrderByRelationAggregateInput: IResumeInterestOrderByRelationAggregateInput;
  ResumeInterestWhereInput: IResumeInterestWhereInput;
  ResumeList: ResolverTypeWrapper<IResumeList>;
  ResumeOrderByWithRelationInput: IResumeOrderByWithRelationInput;
  ResumeProject: ResolverTypeWrapper<IResumeProject>;
  ResumeProjectCreateInput: IResumeProjectCreateInput;
  ResumeProjectListRelationFilter: IResumeProjectListRelationFilter;
  ResumeProjectOrderByRelationAggregateInput: IResumeProjectOrderByRelationAggregateInput;
  ResumeProjectWhereInput: IResumeProjectWhereInput;
  ResumeStudyYear: ResolverTypeWrapper<IResumeStudyYear>;
  ResumeStudyYearCreateInput: IResumeStudyYearCreateInput;
  ResumeStudyYearListRelationFilter: IResumeStudyYearListRelationFilter;
  ResumeStudyYearOrderByRelationAggregateInput: IResumeStudyYearOrderByRelationAggregateInput;
  ResumeStudyYearWhereInput: IResumeStudyYearWhereInput;
  ResumeTechnologyListRelationFilter: IResumeTechnologyListRelationFilter;
  ResumeTechnologyOrderByRelationAggregateInput: IResumeTechnologyOrderByRelationAggregateInput;
  ResumeTechnologyWhereInput: IResumeTechnologyWhereInput;
  ResumeVolunteerExperience: ResolverTypeWrapper<IResumeVolunteerExperience>;
  ResumeVolunteerExperienceCreateInput: IResumeVolunteerExperienceCreateInput;
  ResumeVolunteerExperienceListRelationFilter: IResumeVolunteerExperienceListRelationFilter;
  ResumeVolunteerExperienceOrderByRelationAggregateInput: IResumeVolunteerExperienceOrderByRelationAggregateInput;
  ResumeVolunteerExperienceWhereInput: IResumeVolunteerExperienceWhereInput;
  ResumeWhereInput: IResumeWhereInput;
  ResumeWorkExperience: ResolverTypeWrapper<IResumeWorkExperience>;
  ResumeWorkExperienceCreateInput: IResumeWorkExperienceCreateInput;
  ResumeWorkExperienceListRelationFilter: IResumeWorkExperienceListRelationFilter;
  ResumeWorkExperienceOrderByRelationAggregateInput: IResumeWorkExperienceOrderByRelationAggregateInput;
  ResumeWorkExperienceWhereInput: IResumeWorkExperienceWhereInput;
  Role: ResolverTypeWrapper<IRole>;
  RoleCount: ResolverTypeWrapper<IRoleCount>;
  RoleOrderByWithRelationInput: IRoleOrderByWithRelationInput;
  RoleScalarFieldEnum: IRoleScalarFieldEnum;
  RoleWhereInput: IRoleWhereInput;
  RoleWhereUniqueInput: IRoleWhereUniqueInput;
  ScannedResumeWhereInput: IScannedResumeWhereInput;
  SearchResponseStringArray: ResolverTypeWrapper<ISearchResponseStringArray>;
  Season: ResolverTypeWrapper<ISeason>;
  SeasonCount: ResolverTypeWrapper<ISeasonCount>;
  SeasonCreateInput: ISeasonCreateInput;
  SeasonNullableRelationFilter: ISeasonNullableRelationFilter;
  SeasonOrderByWithRelationInput: ISeasonOrderByWithRelationInput;
  SeasonRelationFilter: ISeasonRelationFilter;
  SeasonScalarFieldEnum: ISeasonScalarFieldEnum;
  SeasonUpdateInput: ISeasonUpdateInput;
  SeasonWhereInput: ISeasonWhereInput;
  SeasonWhereUniqueInput: ISeasonWhereUniqueInput;
  Session: ResolverTypeWrapper<ISession>;
  SortOrder: ISortOrder;
  SortOrderInput: ISortOrderInput;
  Sponsor: ResolverTypeWrapper<ISponsor>;
  SponsorCreateInput: ISponsorCreateInput;
  SponsorListRelationFilter: ISponsorListRelationFilter;
  SponsorOrderByRelationAggregateInput: ISponsorOrderByRelationAggregateInput;
  SponsorWhereInput: ISponsorWhereInput;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  StringFilter: IStringFilter;
  StringNullableFilter: IStringNullableFilter;
  TalkCreateInput: ITalkCreateInput;
  TalksCreateInput: ITalksCreateInput;
  Translation: ResolverTypeWrapper<ITranslation>;
  TranslationCreateInput: ITranslationCreateInput;
  TranslationKeyLanguageCompoundUniqueInput: ITranslationKeyLanguageCompoundUniqueInput;
  TranslationOrderByWithRelationInput: ITranslationOrderByWithRelationInput;
  TranslationScalarFieldEnum: ITranslationScalarFieldEnum;
  TranslationWhereInput: ITranslationWhereInput;
  TranslationWhereUniqueInput: ITranslationWhereUniqueInput;
  UpdatePasswordResponse: ResolverTypeWrapper<IUpdatePasswordResponse>;
  UpdateProfileResponse: ResolverTypeWrapper<IUpdateProfileResponse>;
  Upload: ResolverTypeWrapper<Scalars['Upload']['output']>;
  User: ResolverTypeWrapper<IUser>;
  UserCompanyComponentRating: ResolverTypeWrapper<IUserCompanyComponentRating>;
  UserCompanyComponentRatingAveragesViewWhereInput: IUserCompanyComponentRatingAveragesViewWhereInput;
  UserCompanyComponentRatingComponentAverage: ResolverTypeWrapper<IUserCompanyComponentRatingComponentAverage>;
  UserCompanyComponentRatingWhereInput: IUserCompanyComponentRatingWhereInput;
  UserCount: ResolverTypeWrapper<IUserCount>;
  UserCreateInput: IUserCreateInput;
  UserNullableRelationFilter: IUserNullableRelationFilter;
  UserOrderByWithRelationInput: IUserOrderByWithRelationInput;
  UserRegisterInput: IUserRegisterInput;
  UserRelationFilter: IUserRelationFilter;
  UserScalarFieldEnum: IUserScalarFieldEnum;
  UserUpdateInput: IUserUpdateInput;
  UserWhereInput: IUserWhereInput;
  UserWhereUniqueInput: IUserWhereUniqueInput;
  ValidateVatResponse: ResolverTypeWrapper<IValidateVatResponse>;
  VatData: ResolverTypeWrapper<IVatData>;
  WorkshopCreateInput: IWorkshopCreateInput;
  WorkshopsCreateInput: IWorkshopsCreateInput;
};

/** Mapping between all available schema types and the resolvers parents */
export type IResolversParentTypes = {
  ApplicationCocktail: IApplicationCocktail;
  ApplicationCocktailCount: IApplicationCocktailCount;
  ApplicationCocktailNullableRelationFilter: IApplicationCocktailNullableRelationFilter;
  ApplicationCocktailOrderByWithRelationInput: IApplicationCocktailOrderByWithRelationInput;
  ApplicationCocktailWhereInput: IApplicationCocktailWhereInput;
  ApplicationPresenter: IApplicationPresenter;
  ApplicationPresenterCount: IApplicationPresenterCount;
  ApplicationPresenterListRelationFilter: IApplicationPresenterListRelationFilter;
  ApplicationPresenterOrderByRelationAggregateInput: IApplicationPresenterOrderByRelationAggregateInput;
  ApplicationPresenterWhereInput: IApplicationPresenterWhereInput;
  ApplicationTalk: IApplicationTalk;
  ApplicationTalkCategory: IApplicationTalkCategory;
  ApplicationTalkCategoryCount: IApplicationTalkCategoryCount;
  ApplicationTalkCategoryForSeasonIdNameCompoundUniqueInput: IApplicationTalkCategoryForSeasonIdNameCompoundUniqueInput;
  ApplicationTalkCategoryOrderByWithRelationInput: IApplicationTalkCategoryOrderByWithRelationInput;
  ApplicationTalkCategoryRelationFilter: IApplicationTalkCategoryRelationFilter;
  ApplicationTalkCategoryWhereInput: IApplicationTalkCategoryWhereInput;
  ApplicationTalkCategoryWhereUniqueInput: IApplicationTalkCategoryWhereUniqueInput;
  ApplicationTalkCount: IApplicationTalkCount;
  ApplicationTalkNullableRelationFilter: IApplicationTalkNullableRelationFilter;
  ApplicationTalkOrderByWithRelationInput: IApplicationTalkOrderByWithRelationInput;
  ApplicationTalkWhereInput: IApplicationTalkWhereInput;
  ApplicationWorkshop: IApplicationWorkshop;
  ApplicationWorkshopCount: IApplicationWorkshopCount;
  ApplicationWorkshopNullableRelationFilter: IApplicationWorkshopNullableRelationFilter;
  ApplicationWorkshopOrderByWithRelationInput: IApplicationWorkshopOrderByWithRelationInput;
  ApplicationWorkshopWhereInput: IApplicationWorkshopWhereInput;
  ApproveCompanyApplicationsInput: IApproveCompanyApplicationsInput;
  ApproveCompanyApplicationsInputParts: IApproveCompanyApplicationsInputParts;
  AuthResponse: IAuthResponse;
  BoolFilter: IBoolFilter;
  Boolean: Scalars['Boolean']['output'];
  Booth: IBooth;
  CalendarEvent: ICalendarEvent;
  CalendarFilterInput: ICalendarFilterInput;
  CalendarItem: ICalendarItem;
  CalendarItemListRelationFilter: ICalendarItemListRelationFilter;
  CalendarItemNullableRelationFilter: ICalendarItemNullableRelationFilter;
  CalendarItemOrderByRelationAggregateInput: ICalendarItemOrderByRelationAggregateInput;
  CalendarItemOrderByWithRelationInput: ICalendarItemOrderByWithRelationInput;
  CalendarItemWhereInput: ICalendarItemWhereInput;
  CalendarUpdateInput: ICalendarUpdateInput;
  CocktailCreateInput: ICocktailCreateInput;
  Company: ICompany;
  CompanyApplication: ICompanyApplication;
  CompanyApplicationApproval: ICompanyApplicationApproval;
  CompanyApplicationApprovalNullableRelationFilter: ICompanyApplicationApprovalNullableRelationFilter;
  CompanyApplicationApprovalOrderByWithRelationInput: ICompanyApplicationApprovalOrderByWithRelationInput;
  CompanyApplicationApprovalWhereInput: ICompanyApplicationApprovalWhereInput;
  CompanyApplicationApprovedEditInput: ICompanyApplicationApprovedEditInput;
  CompanyApplicationContactPerson: ICompanyApplicationContactPerson;
  CompanyApplicationContactPersonCreateInput: ICompanyApplicationContactPersonCreateInput;
  CompanyApplicationContactPersonNullableRelationFilter: ICompanyApplicationContactPersonNullableRelationFilter;
  CompanyApplicationContactPersonOrderByWithRelationInput: ICompanyApplicationContactPersonOrderByWithRelationInput;
  CompanyApplicationContactPersonWhereInput: ICompanyApplicationContactPersonWhereInput;
  CompanyApplicationCount: ICompanyApplicationCount;
  CompanyApplicationCreateInput: ICompanyApplicationCreateInput;
  CompanyApplicationFeedback: ICompanyApplicationFeedback;
  CompanyApplicationFeedbackCreateInput: ICompanyApplicationFeedbackCreateInput;
  CompanyApplicationForCompanyIdForSeasonIdCompoundUniqueInput: ICompanyApplicationForCompanyIdForSeasonIdCompoundUniqueInput;
  CompanyApplicationListRelationFilter: ICompanyApplicationListRelationFilter;
  CompanyApplicationOrderByRelationAggregateInput: ICompanyApplicationOrderByRelationAggregateInput;
  CompanyApplicationOrderByWithRelationInput: ICompanyApplicationOrderByWithRelationInput;
  CompanyApplicationWhereInput: ICompanyApplicationWhereInput;
  CompanyApplicationWhereUniqueInput: ICompanyApplicationWhereUniqueInput;
  CompanyCount: ICompanyCount;
  CompanyOrderByWithRelationInput: ICompanyOrderByWithRelationInput;
  CompanyPanel: ICompanyPanel;
  CompanyPanelCount: ICompanyPanelCount;
  CompanyPanelNullableRelationFilter: ICompanyPanelNullableRelationFilter;
  CompanyPanelOrderByWithRelationInput: ICompanyPanelOrderByWithRelationInput;
  CompanyPanelUpdateInput: ICompanyPanelUpdateInput;
  CompanyPanelWhereInput: ICompanyPanelWhereInput;
  CompanyProgram: ICompanyProgram;
  CompanyRelationFilter: ICompanyRelationFilter;
  CompanyScanUserQrRefineData: ICompanyScanUserQrRefineData;
  CompanyScanUserQrResponse: ICompanyScanUserQrResponse;
  CompanyScannedUser: ICompanyScannedUser;
  CompanyScannedUserListRelationFilter: ICompanyScannedUserListRelationFilter;
  CompanyScannedUserOrderByRelationAggregateInput: ICompanyScannedUserOrderByRelationAggregateInput;
  CompanyScannedUserWhereInput: ICompanyScannedUserWhereInput;
  CompanyWhereInput: ICompanyWhereInput;
  CompanyWhereUniqueInput: ICompanyWhereUniqueInput;
  CreateCompanyApplicationResponse: ICreateCompanyApplicationResponse;
  CreateCompanyInput: ICreateCompanyInput;
  CreateCompanyResponse: ICreateCompanyResponse;
  CreatePartnerResponse: ICreatePartnerResponse;
  CreatePressReleaseResponse: ICreatePressReleaseResponse;
  CreateSponsorResponse: ICreateSponsorResponse;
  DateTimeFilter: IDateTimeFilter;
  DateTimeISO: Scalars['DateTimeISO']['output'];
  DateTimeNullableFilter: IDateTimeNullableFilter;
  EditApprovedCompanyApplicationResponse: IEditApprovedCompanyApplicationResponse;
  EntryResumeLogWhereInput: IEntryResumeLogWhereInput;
  EventLog: IEventLog;
  EventLogOrderByWithRelationInput: IEventLogOrderByWithRelationInput;
  EventLogPaginationResult: IEventLogPaginationResult;
  EventLogWhereInput: IEventLogWhereInput;
  EventReservationResponse: IEventReservationResponse;
  EventReservationStatus: IEventReservationStatus;
  EventReservationUpdateInput: IEventReservationUpdateInput;
  EventReservationWhereInput: IEventReservationWhereInput;
  EventUserApplications: IEventUserApplications;
  FavouriteResumeWhereInput: IFavouriteResumeWhereInput;
  FieldError: IFieldError;
  File: IFile;
  FileCount: IFileCount;
  FileOrderByWithRelationInput: IFileOrderByWithRelationInput;
  FileRelationFilter: IFileRelationFilter;
  FileWhereInput: IFileWhereInput;
  Float: Scalars['Float']['output'];
  FloatFilter: IFloatFilter;
  GateGuardianLog: IGateGuardianLog;
  GateGuardianLogListRelationFilter: IGateGuardianLogListRelationFilter;
  GateGuardianLogOrderByRelationAggregateInput: IGateGuardianLogOrderByRelationAggregateInput;
  GateGuardianLogWhereInput: IGateGuardianLogWhereInput;
  GateGuardianScanResponse: IGateGuardianScanResponse;
  Image: IImage;
  ImageCount: IImageCount;
  ImageNullableRelationFilter: IImageNullableRelationFilter;
  ImageRelationFilter: IImageRelationFilter;
  ImageVariation: IImageVariation;
  ImageVariationCount: IImageVariationCount;
  ImageVariationRelationFilter: IImageVariationRelationFilter;
  ImageVariationWhereInput: IImageVariationWhereInput;
  ImageWhereInput: IImageWhereInput;
  Industry: IIndustry;
  IndustryCount: IIndustryCount;
  IndustryOrderByWithRelationInput: IIndustryOrderByWithRelationInput;
  IndustryWhereInput: IIndustryWhereInput;
  IndustryWhereUniqueInput: IIndustryWhereUniqueInput;
  Int: Scalars['Int']['output'];
  IntFilter: IIntFilter;
  IntNullableFilter: IIntNullableFilter;
  LiveVote: ILiveVote;
  LiveVoteComment: ILiveVoteComment;
  LiveVoteCommentWhereInput: ILiveVoteCommentWhereInput;
  LiveVoteResult: ILiveVoteResult;
  LiveVoteWhereInput: ILiveVoteWhereInput;
  Mutation: {};
  NestedBoolFilter: INestedBoolFilter;
  NestedDateTimeFilter: INestedDateTimeFilter;
  NestedDateTimeNullableFilter: INestedDateTimeNullableFilter;
  NestedFloatFilter: INestedFloatFilter;
  NestedIntFilter: INestedIntFilter;
  NestedIntNullableFilter: INestedIntNullableFilter;
  NestedStringFilter: INestedStringFilter;
  NestedStringNullableFilter: INestedStringNullableFilter;
  News: INews;
  NewsCreateInput: INewsCreateInput;
  NewsCreateResponse: INewsCreateResponse;
  NewsFilter: INewsFilter;
  NewsWhereInput: INewsWhereInput;
  Partner: IPartner;
  PartnerCreateInput: IPartnerCreateInput;
  PartnerListRelationFilter: IPartnerListRelationFilter;
  PartnerOrderByRelationAggregateInput: IPartnerOrderByRelationAggregateInput;
  PartnerWhereInput: IPartnerWhereInput;
  PasswordResetUseInput: IPasswordResetUseInput;
  PasswordResetUseResponse: IPasswordResetUseResponse;
  PasswordResetWhereInput: IPasswordResetWhereInput;
  PresenterCreateInput: IPresenterCreateInput;
  PressRelease: IPressRelease;
  PressReleaseOrderByWithRelationInput: IPressReleaseOrderByWithRelationInput;
  PressReleaseWhereInput: IPressReleaseWhereInput;
  PressReleaseWhereUniqueInput: IPressReleaseWhereUniqueInput;
  PressReleaseWithFilesCreateInput: IPressReleaseWithFilesCreateInput;
  Query: {};
  ReservationItem: IReservationItem;
  Resume: IResume;
  ResumeCount: IResumeCount;
  ResumeCreateCvInput: IResumeCreateCvInput;
  ResumeCreateInput: IResumeCreateInput;
  ResumeCreateResponse: IResumeCreateResponse;
  ResumeFaculty: IResumeFaculty;
  ResumeFacultyCreateInput: IResumeFacultyCreateInput;
  ResumeFacultyNullableRelationFilter: IResumeFacultyNullableRelationFilter;
  ResumeFacultyOrderByWithRelationInput: IResumeFacultyOrderByWithRelationInput;
  ResumeFacultyWhereInput: IResumeFacultyWhereInput;
  ResumeFindManyInput: IResumeFindManyInput;
  ResumeInterestListRelationFilter: IResumeInterestListRelationFilter;
  ResumeInterestOrderByRelationAggregateInput: IResumeInterestOrderByRelationAggregateInput;
  ResumeInterestWhereInput: IResumeInterestWhereInput;
  ResumeList: IResumeList;
  ResumeOrderByWithRelationInput: IResumeOrderByWithRelationInput;
  ResumeProject: IResumeProject;
  ResumeProjectCreateInput: IResumeProjectCreateInput;
  ResumeProjectListRelationFilter: IResumeProjectListRelationFilter;
  ResumeProjectOrderByRelationAggregateInput: IResumeProjectOrderByRelationAggregateInput;
  ResumeProjectWhereInput: IResumeProjectWhereInput;
  ResumeStudyYear: IResumeStudyYear;
  ResumeStudyYearCreateInput: IResumeStudyYearCreateInput;
  ResumeStudyYearListRelationFilter: IResumeStudyYearListRelationFilter;
  ResumeStudyYearOrderByRelationAggregateInput: IResumeStudyYearOrderByRelationAggregateInput;
  ResumeStudyYearWhereInput: IResumeStudyYearWhereInput;
  ResumeTechnologyListRelationFilter: IResumeTechnologyListRelationFilter;
  ResumeTechnologyOrderByRelationAggregateInput: IResumeTechnologyOrderByRelationAggregateInput;
  ResumeTechnologyWhereInput: IResumeTechnologyWhereInput;
  ResumeVolunteerExperience: IResumeVolunteerExperience;
  ResumeVolunteerExperienceCreateInput: IResumeVolunteerExperienceCreateInput;
  ResumeVolunteerExperienceListRelationFilter: IResumeVolunteerExperienceListRelationFilter;
  ResumeVolunteerExperienceOrderByRelationAggregateInput: IResumeVolunteerExperienceOrderByRelationAggregateInput;
  ResumeVolunteerExperienceWhereInput: IResumeVolunteerExperienceWhereInput;
  ResumeWhereInput: IResumeWhereInput;
  ResumeWorkExperience: IResumeWorkExperience;
  ResumeWorkExperienceCreateInput: IResumeWorkExperienceCreateInput;
  ResumeWorkExperienceListRelationFilter: IResumeWorkExperienceListRelationFilter;
  ResumeWorkExperienceOrderByRelationAggregateInput: IResumeWorkExperienceOrderByRelationAggregateInput;
  ResumeWorkExperienceWhereInput: IResumeWorkExperienceWhereInput;
  Role: IRole;
  RoleCount: IRoleCount;
  RoleOrderByWithRelationInput: IRoleOrderByWithRelationInput;
  RoleWhereInput: IRoleWhereInput;
  RoleWhereUniqueInput: IRoleWhereUniqueInput;
  ScannedResumeWhereInput: IScannedResumeWhereInput;
  SearchResponseStringArray: ISearchResponseStringArray;
  Season: ISeason;
  SeasonCount: ISeasonCount;
  SeasonCreateInput: ISeasonCreateInput;
  SeasonNullableRelationFilter: ISeasonNullableRelationFilter;
  SeasonOrderByWithRelationInput: ISeasonOrderByWithRelationInput;
  SeasonRelationFilter: ISeasonRelationFilter;
  SeasonUpdateInput: ISeasonUpdateInput;
  SeasonWhereInput: ISeasonWhereInput;
  SeasonWhereUniqueInput: ISeasonWhereUniqueInput;
  Session: ISession;
  SortOrderInput: ISortOrderInput;
  Sponsor: ISponsor;
  SponsorCreateInput: ISponsorCreateInput;
  SponsorListRelationFilter: ISponsorListRelationFilter;
  SponsorOrderByRelationAggregateInput: ISponsorOrderByRelationAggregateInput;
  SponsorWhereInput: ISponsorWhereInput;
  String: Scalars['String']['output'];
  StringFilter: IStringFilter;
  StringNullableFilter: IStringNullableFilter;
  TalkCreateInput: ITalkCreateInput;
  TalksCreateInput: ITalksCreateInput;
  Translation: ITranslation;
  TranslationCreateInput: ITranslationCreateInput;
  TranslationKeyLanguageCompoundUniqueInput: ITranslationKeyLanguageCompoundUniqueInput;
  TranslationOrderByWithRelationInput: ITranslationOrderByWithRelationInput;
  TranslationWhereInput: ITranslationWhereInput;
  TranslationWhereUniqueInput: ITranslationWhereUniqueInput;
  UpdatePasswordResponse: IUpdatePasswordResponse;
  UpdateProfileResponse: IUpdateProfileResponse;
  Upload: Scalars['Upload']['output'];
  User: IUser;
  UserCompanyComponentRating: IUserCompanyComponentRating;
  UserCompanyComponentRatingAveragesViewWhereInput: IUserCompanyComponentRatingAveragesViewWhereInput;
  UserCompanyComponentRatingComponentAverage: IUserCompanyComponentRatingComponentAverage;
  UserCompanyComponentRatingWhereInput: IUserCompanyComponentRatingWhereInput;
  UserCount: IUserCount;
  UserCreateInput: IUserCreateInput;
  UserNullableRelationFilter: IUserNullableRelationFilter;
  UserOrderByWithRelationInput: IUserOrderByWithRelationInput;
  UserRegisterInput: IUserRegisterInput;
  UserRelationFilter: IUserRelationFilter;
  UserUpdateInput: IUserUpdateInput;
  UserWhereInput: IUserWhereInput;
  UserWhereUniqueInput: IUserWhereUniqueInput;
  ValidateVatResponse: IValidateVatResponse;
  VatData: IVatData;
  WorkshopCreateInput: IWorkshopCreateInput;
  WorkshopsCreateInput: IWorkshopsCreateInput;
};

export type IApplicationCocktailResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationCocktail'] = IResolversParentTypes['ApplicationCocktail']> = {
  _count?: Resolver<Maybe<IResolversTypes['ApplicationCocktailCount']>, ParentType, ContextType>;
  colour?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  forApplication?: Resolver<Array<IResolversTypes['CompanyApplication']>, ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationCocktailCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationCocktailCount'] = IResolversParentTypes['ApplicationCocktailCount']> = {
  forApplication?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IApplicationCocktailCountForApplicationArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationPresenterResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationPresenter'] = IResolversParentTypes['ApplicationPresenter']> = {
  _count?: Resolver<Maybe<IResolversTypes['ApplicationPresenterCount']>, ParentType, ContextType>;
  bioEn?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  bioHr?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  firstName?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  photo?: Resolver<Maybe<IResolversTypes['Image']>, ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationPresenterCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationPresenterCount'] = IResolversParentTypes['ApplicationPresenterCount']> = {
  forPanels?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IApplicationPresenterCountForPanelsArgs>>;
  forTalks?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IApplicationPresenterCountForTalksArgs>>;
  forWorkshops?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IApplicationPresenterCountForWorkshopsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationTalkResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationTalk'] = IResolversParentTypes['ApplicationTalk']> = {
  _count?: Resolver<Maybe<IResolversTypes['ApplicationTalkCount']>, ParentType, ContextType>;
  category?: Resolver<IResolversTypes['ApplicationTalkCategory'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  descriptionEn?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  descriptionHr?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  event?: Resolver<Maybe<IResolversTypes['CalendarItem']>, ParentType, ContextType>;
  language?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  presenters?: Resolver<Array<IResolversTypes['ApplicationPresenter']>, ParentType, ContextType>;
  reservation?: Resolver<IResolversTypes['Float'], ParentType, ContextType>;
  titleEn?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  titleHr?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationTalkCategoryResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationTalkCategory'] = IResolversParentTypes['ApplicationTalkCategory']> = {
  _count?: Resolver<Maybe<IResolversTypes['ApplicationTalkCategoryCount']>, ParentType, ContextType>;
  forSeason?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationTalkCategoryCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationTalkCategoryCount'] = IResolversParentTypes['ApplicationTalkCategoryCount']> = {
  talks?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IApplicationTalkCategoryCountTalksArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationTalkCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationTalkCount'] = IResolversParentTypes['ApplicationTalkCount']> = {
  presenters?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IApplicationTalkCountPresentersArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationWorkshopResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationWorkshop'] = IResolversParentTypes['ApplicationWorkshop']> = {
  _count?: Resolver<Maybe<IResolversTypes['ApplicationWorkshopCount']>, ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  descriptionEn?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  descriptionHr?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  event?: Resolver<Maybe<IResolversTypes['CalendarItem']>, ParentType, ContextType>;
  goal?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  language?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  notesEn?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  notesHr?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  presenters?: Resolver<Array<IResolversTypes['ApplicationPresenter']>, ParentType, ContextType>;
  reservation?: Resolver<IResolversTypes['Float'], ParentType, ContextType>;
  titleEn?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  titleHr?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IApplicationWorkshopCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ApplicationWorkshopCount'] = IResolversParentTypes['ApplicationWorkshopCount']> = {
  presenters?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IApplicationWorkshopCountPresentersArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IAuthResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['AuthResponse'] = IResolversParentTypes['AuthResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IBoothResolvers<ContextType = any, ParentType extends IResolversParentTypes['Booth'] = IResolversParentTypes['Booth']> = {
  key?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICalendarEventResolvers<ContextType = any, ParentType extends IResolversParentTypes['CalendarEvent'] = IResolversParentTypes['CalendarEvent']> = {
  class?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  end?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  location?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  noGroup?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  start?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  text?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICalendarItemResolvers<ContextType = any, ParentType extends IResolversParentTypes['CalendarItem'] = IResolversParentTypes['CalendarItem']> = {
  capacity?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  companies?: Resolver<Maybe<Array<IResolversTypes['Company']>>, ParentType, ContextType>;
  end?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  forPanel?: Resolver<Maybe<IResolversTypes['CompanyPanel']>, ParentType, ContextType>;
  forTalk?: Resolver<Maybe<IResolversTypes['ApplicationTalk']>, ParentType, ContextType>;
  forWorkshop?: Resolver<Maybe<IResolversTypes['ApplicationWorkshop']>, ParentType, ContextType>;
  grouped?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  hasEvent?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  location?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  text?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyResolvers<ContextType = any, ParentType extends IResolversParentTypes['Company'] = IResolversParentTypes['Company']> = {
  _count?: Resolver<Maybe<IResolversTypes['CompanyCount']>, ParentType, ContextType>;
  address?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  brandName?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  descriptionEn?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  descriptionHr?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  industry?: Resolver<Maybe<IResolversTypes['Industry']>, ParentType, ContextType>;
  legalName?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  logoHidden?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  members?: Resolver<Maybe<Array<IResolversTypes['User']>>, ParentType, ContextType>;
  program?: Resolver<Maybe<IResolversTypes['CompanyProgram']>, ParentType, ContextType>;
  rasterLogo?: Resolver<Maybe<IResolversTypes['Image']>, ParentType, ContextType>;
  ratings?: Resolver<Array<IResolversTypes['UserCompanyComponentRatingComponentAverage']>, ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  vat?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  vectorLogo?: Resolver<Maybe<IResolversTypes['File']>, ParentType, ContextType>;
  website?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyApplicationResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyApplication'] = IResolversParentTypes['CompanyApplication']> = {
  _count?: Resolver<Maybe<IResolversTypes['CompanyApplicationCount']>, ParentType, ContextType>;
  approval?: Resolver<Maybe<IResolversTypes['CompanyApplicationApproval']>, ParentType, ContextType>;
  booth?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  cocktail?: Resolver<Maybe<IResolversTypes['ApplicationCocktail']>, ParentType, ContextType>;
  contactPerson?: Resolver<Maybe<IResolversTypes['CompanyApplicationContactPerson']>, ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  feedback?: Resolver<Maybe<IResolversTypes['CompanyApplicationFeedback']>, ParentType, ContextType>;
  forCompany?: Resolver<Maybe<IResolversTypes['Company']>, ParentType, ContextType>;
  forSeason?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType>;
  panelParticipants?: Resolver<Array<IResolversTypes['ApplicationPresenter']>, ParentType, ContextType>;
  talk?: Resolver<Maybe<IResolversTypes['ApplicationTalk']>, ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  userApplications?: Resolver<IResolversTypes['EventUserApplications'], ParentType, ContextType>;
  wantsCocktail?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  wantsPanel?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  workshop?: Resolver<Maybe<IResolversTypes['ApplicationWorkshop']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyApplicationApprovalResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyApplicationApproval'] = IResolversParentTypes['CompanyApplicationApproval']> = {
  booth?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  cocktail?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  forApplication?: Resolver<IResolversTypes['CompanyApplication'], ParentType, ContextType>;
  logoHidden?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  panel?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  talkParticipants?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  workshopParticipants?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyApplicationContactPersonResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyApplicationContactPerson'] = IResolversParentTypes['CompanyApplicationContactPerson']> = {
  email?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  phone?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyApplicationCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyApplicationCount'] = IResolversParentTypes['CompanyApplicationCount']> = {
  panelParticipants?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyApplicationCountPanelParticipantsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyApplicationFeedbackResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyApplicationFeedback'] = IResolversParentTypes['CompanyApplicationFeedback']> = {
  applicationComments?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  applicationRating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  attendanceRating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  dateComments?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  dateRating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  experienceComments?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  foodRating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  mostLiked?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  onsiteRating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  overallComment?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  overallRating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  recommended?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  testimonial?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  timeRating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyCount'] = IResolversParentTypes['CompanyCount']> = {
  UserCompanyComponentRatingAveragesView?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyCountUserCompanyComponentRatingAveragesViewArgs>>;
  UserCompanyComponentRatings?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyCountUserCompanyComponentRatingsArgs>>;
  applications?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyCountApplicationsArgs>>;
  favouriteResumes?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyCountFavouriteResumesArgs>>;
  members?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyCountMembersArgs>>;
  scannedResumes?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyCountScannedResumesArgs>>;
  scannedUsers?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyCountScannedUsersArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyPanelResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyPanel'] = IResolversParentTypes['CompanyPanel']> = {
  _count?: Resolver<Maybe<IResolversTypes['CompanyPanelCount']>, ParentType, ContextType>;
  companies?: Resolver<Array<IResolversTypes['Company']>, ParentType, ContextType>;
  description?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  event?: Resolver<Maybe<IResolversTypes['CalendarItem']>, ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  reservation?: Resolver<IResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyPanelCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyPanelCount'] = IResolversParentTypes['CompanyPanelCount']> = {
  companies?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ICompanyPanelCountCompaniesArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyProgramResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyProgram'] = IResolversParentTypes['CompanyProgram']> = {
  booth?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  cocktail?: Resolver<Maybe<IResolversTypes['ApplicationCocktail']>, ParentType, ContextType>;
  panel?: Resolver<Maybe<IResolversTypes['CompanyPanel']>, ParentType, ContextType>;
  panelParticipants?: Resolver<Array<IResolversTypes['ApplicationPresenter']>, ParentType, ContextType>;
  talk?: Resolver<Maybe<IResolversTypes['ApplicationTalk']>, ParentType, ContextType>;
  workshop?: Resolver<Maybe<IResolversTypes['ApplicationWorkshop']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyScanUserQrResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyScanUserQrResponse'] = IResolversParentTypes['CompanyScanUserQrResponse']> = {
  alreadyScanned?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  error?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  isStarred?: Resolver<Maybe<IResolversTypes['Boolean']>, ParentType, ContextType>;
  note?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICompanyScannedUserResolvers<ContextType = any, ParentType extends IResolversParentTypes['CompanyScannedUser'] = IResolversParentTypes['CompanyScannedUser']> = {
  isStarred?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  note?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  scannedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  user?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICreateCompanyApplicationResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['CreateCompanyApplicationResponse'] = IResolversParentTypes['CreateCompanyApplicationResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['CompanyApplication']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICreateCompanyResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['CreateCompanyResponse'] = IResolversParentTypes['CreateCompanyResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['Company']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICreatePartnerResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['CreatePartnerResponse'] = IResolversParentTypes['CreatePartnerResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['Partner']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICreatePressReleaseResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['CreatePressReleaseResponse'] = IResolversParentTypes['CreatePressReleaseResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['PressRelease']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ICreateSponsorResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['CreateSponsorResponse'] = IResolversParentTypes['CreateSponsorResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['Sponsor']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface IDateTimeIsoScalarConfig extends GraphQLScalarTypeConfig<IResolversTypes['DateTimeISO'], any> {
  name: 'DateTimeISO';
}

export type IEditApprovedCompanyApplicationResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['EditApprovedCompanyApplicationResponse'] = IResolversParentTypes['EditApprovedCompanyApplicationResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['CompanyApplication']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IEventLogResolvers<ContextType = any, ParentType extends IResolversParentTypes['EventLog'] = IResolversParentTypes['EventLog']> = {
  data?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  date?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  id?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  user?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IEventLogPaginationResultResolvers<ContextType = any, ParentType extends IResolversParentTypes['EventLogPaginationResult'] = IResolversParentTypes['EventLogPaginationResult']> = {
  page?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  perPage?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  records?: Resolver<Array<IResolversTypes['EventLog']>, ParentType, ContextType>;
  totalRecords?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IEventReservationResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['EventReservationResponse'] = IResolversParentTypes['EventReservationResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['EventReservationStatus']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IEventReservationStatusResolvers<ContextType = any, ParentType extends IResolversParentTypes['EventReservationStatus'] = IResolversParentTypes['EventReservationStatus']> = {
  status?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IEventUserApplicationsResolvers<ContextType = any, ParentType extends IResolversParentTypes['EventUserApplications'] = IResolversParentTypes['EventUserApplications']> = {
  talk?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  workshop?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IFieldErrorResolvers<ContextType = any, ParentType extends IResolversParentTypes['FieldError'] = IResolversParentTypes['FieldError']> = {
  field?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  message?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IFileResolvers<ContextType = any, ParentType extends IResolversParentTypes['File'] = IResolversParentTypes['File']> = {
  _count?: Resolver<Maybe<IResolversTypes['FileCount']>, ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  etag?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  mimeType?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  size?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  url?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IFileCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['FileCount'] = IResolversParentTypes['FileCount']> = {
  forCompany?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IFileCountForCompanyArgs>>;
  forPressRelease?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IFileCountForPressReleaseArgs>>;
  forResume?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IFileCountForResumeArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IGateGuardianLogResolvers<ContextType = any, ParentType extends IResolversParentTypes['GateGuardianLog'] = IResolversParentTypes['GateGuardianLog']> = {
  eventId?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  eventType?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  forCalendarItem?: Resolver<Maybe<IResolversTypes['CalendarItem']>, ParentType, ContextType>;
  forUser?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  scannedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  scannedBy?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IGateGuardianScanResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['GateGuardianScanResponse'] = IResolversParentTypes['GateGuardianScanResponse']> = {
  alreadyScanned?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  error?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  hasReservation?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  user?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IImageResolvers<ContextType = any, ParentType extends IResolversParentTypes['Image'] = IResolversParentTypes['Image']> = {
  _count?: Resolver<Maybe<IResolversTypes['ImageCount']>, ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  full?: Resolver<IResolversTypes['ImageVariation'], ParentType, ContextType>;
  fullUrl?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  thumb?: Resolver<IResolversTypes['ImageVariation'], ParentType, ContextType>;
  thumbUrl?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IImageCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ImageCount'] = IResolversParentTypes['ImageCount']> = {
  ApplicationPresenter?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageCountApplicationPresenterArgs>>;
  Company?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageCountCompanyArgs>>;
  News?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageCountNewsArgs>>;
  Partner?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageCountPartnerArgs>>;
  Sponsor?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageCountSponsorArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IImageVariationResolvers<ContextType = any, ParentType extends IResolversParentTypes['ImageVariation'] = IResolversParentTypes['ImageVariation']> = {
  _count?: Resolver<Maybe<IResolversTypes['ImageVariationCount']>, ParentType, ContextType>;
  etag?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  mimeType?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IImageVariationCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ImageVariationCount'] = IResolversParentTypes['ImageVariationCount']> = {
  forFull?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageVariationCountForFullArgs>>;
  forOriginal?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageVariationCountForOriginalArgs>>;
  forThumb?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IImageVariationCountForThumbArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IIndustryResolvers<ContextType = any, ParentType extends IResolversParentTypes['Industry'] = IResolversParentTypes['Industry']> = {
  _count?: Resolver<Maybe<IResolversTypes['IndustryCount']>, ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IIndustryCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['IndustryCount'] = IResolversParentTypes['IndustryCount']> = {
  company?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IIndustryCountCompanyArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ILiveVoteResolvers<ContextType = any, ParentType extends IResolversParentTypes['LiveVote'] = IResolversParentTypes['LiveVote']> = {
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  forSeason?: Resolver<IResolversTypes['Season'], ParentType, ContextType>;
  forUser?: Resolver<IResolversTypes['User'], ParentType, ContextType>;
  option?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ILiveVoteCommentResolvers<ContextType = any, ParentType extends IResolversParentTypes['LiveVoteComment'] = IResolversParentTypes['LiveVoteComment']> = {
  comment?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  forSeason?: Resolver<IResolversTypes['Season'], ParentType, ContextType>;
  forUser?: Resolver<IResolversTypes['User'], ParentType, ContextType>;
  id?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ILiveVoteResultResolvers<ContextType = any, ParentType extends IResolversParentTypes['LiveVoteResult'] = IResolversParentTypes['LiveVoteResult']> = {
  option?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  voteCount?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IMutationResolvers<ContextType = any, ParentType extends IResolversParentTypes['Mutation'] = IResolversParentTypes['Mutation']> = {
  addCompanyMember?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType, RequireFields<IMutationAddCompanyMemberArgs, 'email'>>;
  approveCompanyApplications?: Resolver<Array<IResolversTypes['CompanyApplicationApproval']>, ParentType, ContextType, RequireFields<IMutationApproveCompanyApplicationsArgs, 'companies' | 'season'>>;
  checkPasswordReset?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType, RequireFields<IMutationCheckPasswordResetArgs, 'token'>>;
  createCompanyApplication?: Resolver<Maybe<IResolversTypes['CreateCompanyApplicationResponse']>, ParentType, ContextType, RequireFields<IMutationCreateCompanyApplicationArgs, 'info'>>;
  createCompanyApplicationFor?: Resolver<Maybe<IResolversTypes['CreateCompanyApplicationResponse']>, ParentType, ContextType, RequireFields<IMutationCreateCompanyApplicationForArgs, 'company' | 'info' | 'season'>>;
  createIndustry?: Resolver<Maybe<IResolversTypes['Industry']>, ParentType, ContextType, RequireFields<IMutationCreateIndustryArgs, 'name'>>;
  createLiveVote?: Resolver<Maybe<IResolversTypes['LiveVote']>, ParentType, ContextType, RequireFields<IMutationCreateLiveVoteArgs, 'seasonUid' | 'vote'>>;
  createLiveVoteComment?: Resolver<Maybe<IResolversTypes['LiveVoteComment']>, ParentType, ContextType, RequireFields<IMutationCreateLiveVoteCommentArgs, 'comment' | 'seasonUid'>>;
  createNews?: Resolver<Maybe<IResolversTypes['NewsCreateResponse']>, ParentType, ContextType, RequireFields<IMutationCreateNewsArgs, 'info'>>;
  createPartner?: Resolver<IResolversTypes['CreatePartnerResponse'], ParentType, ContextType, RequireFields<IMutationCreatePartnerArgs, 'info' | 'season'>>;
  createPressRelease?: Resolver<Maybe<IResolversTypes['CreatePressReleaseResponse']>, ParentType, ContextType, RequireFields<IMutationCreatePressReleaseArgs, 'info'>>;
  createSeason?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType, RequireFields<IMutationCreateSeasonArgs, 'info'>>;
  createSponsor?: Resolver<IResolversTypes['CreateSponsorResponse'], ParentType, ContextType, RequireFields<IMutationCreateSponsorArgs, 'info' | 'season'>>;
  createTalkCategory?: Resolver<Maybe<IResolversTypes['ApplicationTalkCategory']>, ParentType, ContextType, RequireFields<IMutationCreateTalkCategoryArgs, 'name' | 'season'>>;
  deleteCalendarItem?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationDeleteCalendarItemArgs, 'uid'>>;
  deleteCompanyApplicationFor?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationDeleteCompanyApplicationForArgs, 'company' | 'season'>>;
  deleteCompanyPanel?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationDeleteCompanyPanelArgs, 'uid'>>;
  deleteLiveVoteComment?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationDeleteLiveVoteCommentArgs, 'commentId'>>;
  deleteNews?: Resolver<Maybe<IResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<IMutationDeleteNewsArgs, 'uid'>>;
  deletePartner?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationDeletePartnerArgs, 'partner'>>;
  deleteResume?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  deleteSeason?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType, RequireFields<IMutationDeleteSeasonArgs, 'uid'>>;
  deleteSponsor?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationDeleteSponsorArgs, 'sponsor'>>;
  deleteUserCompanyComponentRating?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationDeleteUserCompanyComponentRatingArgs, 'companyUid' | 'component' | 'seasonUid'>>;
  editApprovedCompanyApplication?: Resolver<Maybe<IResolversTypes['EditApprovedCompanyApplicationResponse']>, ParentType, ContextType, RequireFields<IMutationEditApprovedCompanyApplicationArgs, 'info'>>;
  editNews?: Resolver<Maybe<IResolversTypes['NewsCreateResponse']>, ParentType, ContextType, RequireFields<IMutationEditNewsArgs, 'info' | 'uid'>>;
  gateGuardianScan?: Resolver<Maybe<IResolversTypes['GateGuardianScanResponse']>, ParentType, ContextType, RequireFields<IMutationGateGuardianScanArgs, 'eventType' | 'eventUid' | 'userUid'>>;
  login?: Resolver<IResolversTypes['AuthResponse'], ParentType, ContextType, RequireFields<IMutationLoginArgs, 'identifier' | 'password'>>;
  logout?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  register?: Resolver<IResolversTypes['AuthResponse'], ParentType, ContextType, RequireFields<IMutationRegisterArgs, 'info'>>;
  registerCompany?: Resolver<Maybe<IResolversTypes['CreateCompanyResponse']>, ParentType, ContextType, RequireFields<IMutationRegisterCompanyArgs, 'info'>>;
  removeCompanyMember?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType, RequireFields<IMutationRemoveCompanyMemberArgs, 'email'>>;
  renameIndustry?: Resolver<Maybe<IResolversTypes['Industry']>, ParentType, ContextType, RequireFields<IMutationRenameIndustryArgs, 'newName' | 'oldName'>>;
  renameTalkCategory?: Resolver<Maybe<IResolversTypes['ApplicationTalkCategory']>, ParentType, ContextType, RequireFields<IMutationRenameTalkCategoryArgs, 'newName' | 'oldName' | 'season'>>;
  requestPasswordReset?: Resolver<IResolversTypes['String'], ParentType, ContextType, RequireFields<IMutationRequestPasswordResetArgs, 'identifier'>>;
  requestPasswordResetFor?: Resolver<IResolversTypes['String'], ParentType, ContextType, RequireFields<IMutationRequestPasswordResetForArgs, 'uid'>>;
  resumeEntryScan?: Resolver<Maybe<IResolversTypes['Resume']>, ParentType, ContextType, RequireFields<IMutationResumeEntryScanArgs, 'userUid'>>;
  resumeScan?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType, RequireFields<IMutationResumeScanArgs, 'userUid'>>;
  resumeSetIsFavourite?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationResumeSetIsFavouriteArgs, 'isFavourite' | 'uid'>>;
  scanUserQr?: Resolver<Maybe<IResolversTypes['CompanyScanUserQrResponse']>, ParentType, ContextType, RequireFields<IMutationScanUserQrArgs, 'userUid'>>;
  scanUserQrRefine?: Resolver<Maybe<IResolversTypes['CompanyScanUserQrResponse']>, ParentType, ContextType, RequireFields<IMutationScanUserQrRefineArgs, 'refineData' | 'userUid'>>;
  swapPartnerOrder?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationSwapPartnerOrderArgs, 'orderA' | 'orderB' | 'season'>>;
  swapSponsorOrder?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationSwapSponsorOrderArgs, 'orderA' | 'orderB' | 'season'>>;
  updateCalendarItem?: Resolver<Maybe<IResolversTypes['CalendarItem']>, ParentType, ContextType, RequireFields<IMutationUpdateCalendarItemArgs, 'input'>>;
  updateCompanyApplicationFeedback?: Resolver<Maybe<IResolversTypes['CompanyApplicationFeedback']>, ParentType, ContextType, RequireFields<IMutationUpdateCompanyApplicationFeedbackArgs, 'input'>>;
  updateCompanyInfo?: Resolver<Maybe<IResolversTypes['CreateCompanyResponse']>, ParentType, ContextType, RequireFields<IMutationUpdateCompanyInfoArgs, 'info'>>;
  updateCompanyMembersFor?: Resolver<Maybe<IResolversTypes['CreateCompanyResponse']>, ParentType, ContextType, RequireFields<IMutationUpdateCompanyMembersForArgs, 'company' | 'members'>>;
  updateCompanyPanel?: Resolver<Maybe<IResolversTypes['CompanyPanel']>, ParentType, ContextType, RequireFields<IMutationUpdateCompanyPanelArgs, 'input'>>;
  updateEventReservation?: Resolver<Maybe<IResolversTypes['EventReservationResponse']>, ParentType, ContextType, RequireFields<IMutationUpdateEventReservationArgs, 'input'>>;
  updatePassword?: Resolver<Maybe<IResolversTypes['UpdatePasswordResponse']>, ParentType, ContextType, RequireFields<IMutationUpdatePasswordArgs, 'currentPassword' | 'newPassword' | 'newPasswordRepeat'>>;
  updatePressRelease?: Resolver<Maybe<IResolversTypes['CreatePressReleaseResponse']>, ParentType, ContextType, RequireFields<IMutationUpdatePressReleaseArgs, 'info' | 'uid'>>;
  updateProfile?: Resolver<Maybe<IResolversTypes['UpdateProfileResponse']>, ParentType, ContextType, RequireFields<IMutationUpdateProfileArgs, 'info'>>;
  updateResume?: Resolver<Maybe<IResolversTypes['ResumeCreateResponse']>, ParentType, ContextType, RequireFields<IMutationUpdateResumeArgs, 'info'>>;
  updateScannerStatusFor?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IMutationUpdateScannerStatusForArgs, 'isScanner' | 'uid'>>;
  updateSeason?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType, RequireFields<IMutationUpdateSeasonArgs, 'info'>>;
  updateTranslation?: Resolver<Maybe<IResolversTypes['Translation']>, ParentType, ContextType, RequireFields<IMutationUpdateTranslationArgs, 'data'>>;
  updateUser?: Resolver<Maybe<IResolversTypes['UpdateProfileResponse']>, ParentType, ContextType, RequireFields<IMutationUpdateUserArgs, 'info' | 'uid'>>;
  upsertUserCompanyComponentRating?: Resolver<IResolversTypes['UserCompanyComponentRating'], ParentType, ContextType, RequireFields<IMutationUpsertUserCompanyComponentRatingArgs, 'companyUid' | 'component' | 'rating' | 'seasonUid'>>;
  usePasswordReset?: Resolver<IResolversTypes['PasswordResetUseResponse'], ParentType, ContextType, RequireFields<IMutationUsePasswordResetArgs, 'info'>>;
  validateVat?: Resolver<IResolversTypes['ValidateVatResponse'], ParentType, ContextType, RequireFields<IMutationValidateVatArgs, 'vat'>>;
};

export type INewsResolvers<ContextType = any, ParentType extends IResolversParentTypes['News'] = IResolversParentTypes['News']> = {
  author?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  content?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  date?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  description?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  lang?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  photo?: Resolver<Maybe<IResolversTypes['Image']>, ParentType, ContextType>;
  slug?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type INewsCreateResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['NewsCreateResponse'] = IResolversParentTypes['NewsCreateResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['News']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IPartnerResolvers<ContextType = any, ParentType extends IResolversParentTypes['Partner'] = IResolversParentTypes['Partner']> = {
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  order?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  photo?: Resolver<Maybe<IResolversTypes['Image']>, ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IPasswordResetUseResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['PasswordResetUseResponse'] = IResolversParentTypes['PasswordResetUseResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['Boolean']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IPressReleaseResolvers<ContextType = any, ParentType extends IResolversParentTypes['PressRelease'] = IResolversParentTypes['PressRelease']> = {
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  file?: Resolver<Maybe<IResolversTypes['File']>, ParentType, ContextType>;
  forSeason?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType>;
  published?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  title?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IQueryResolvers<ContextType = any, ParentType extends IResolversParentTypes['Query'] = IResolversParentTypes['Query']> = {
  allNews?: Resolver<Array<IResolversTypes['News']>, ParentType, ContextType, Partial<IQueryAllNewsArgs>>;
  allTranslationsFor?: Resolver<Array<IResolversTypes['Translation']>, ParentType, ContextType, RequireFields<IQueryAllTranslationsForArgs, 'language'>>;
  approvedCompanyApplications?: Resolver<Array<IResolversTypes['CompanyApplicationApproval']>, ParentType, ContextType>;
  booths?: Resolver<Array<IResolversTypes['Booth']>, ParentType, ContextType>;
  calendar?: Resolver<Array<IResolversTypes['CalendarItem']>, ParentType, ContextType, Partial<IQueryCalendarArgs>>;
  calendarItem?: Resolver<Maybe<IResolversTypes['CalendarItem']>, ParentType, ContextType, RequireFields<IQueryCalendarItemArgs, 'uid'>>;
  calendarItemCompanyUid?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType, RequireFields<IQueryCalendarItemCompanyUidArgs, 'uid'>>;
  calendarOld?: Resolver<Array<IResolversTypes['CalendarEvent']>, ParentType, ContextType>;
  companies?: Resolver<Array<IResolversTypes['Company']>, ParentType, ContextType, Partial<IQueryCompaniesArgs>>;
  company?: Resolver<Maybe<IResolversTypes['Company']>, ParentType, ContextType, RequireFields<IQueryCompanyArgs, 'vat'>>;
  companyApplication?: Resolver<Maybe<IResolversTypes['CompanyApplication']>, ParentType, ContextType>;
  companyApplicationFor?: Resolver<Maybe<IResolversTypes['CompanyApplication']>, ParentType, ContextType, RequireFields<IQueryCompanyApplicationForArgs, 'company' | 'season'>>;
  companyApplications?: Resolver<Maybe<Array<IResolversTypes['CompanyApplication']>>, ParentType, ContextType, Partial<IQueryCompanyApplicationsArgs>>;
  companyComponentAverageRatings?: Resolver<Array<IResolversTypes['UserCompanyComponentRatingComponentAverage']>, ParentType, ContextType, RequireFields<IQueryCompanyComponentAverageRatingsArgs, 'seasonUid'>>;
  companyInfo?: Resolver<Maybe<IResolversTypes['Company']>, ParentType, ContextType, RequireFields<IQueryCompanyInfoArgs, 'uid'>>;
  currentSeason?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType>;
  eventLog?: Resolver<IResolversTypes['EventLogPaginationResult'], ParentType, ContextType, RequireFields<IQueryEventLogArgs, 'page' | 'perPage'>>;
  findFirstTranslation?: Resolver<Maybe<IResolversTypes['Translation']>, ParentType, ContextType, Partial<IQueryFindFirstTranslationArgs>>;
  gateGuardianScanList?: Resolver<Maybe<Array<IResolversTypes['GateGuardianLog']>>, ParentType, ContextType, RequireFields<IQueryGateGuardianScanListArgs, 'season'>>;
  industries?: Resolver<Array<IResolversTypes['Industry']>, ParentType, ContextType, Partial<IQueryIndustriesArgs>>;
  liveVoteComments?: Resolver<Array<IResolversTypes['LiveVoteComment']>, ParentType, ContextType, RequireFields<IQueryLiveVoteCommentsArgs, 'seasonUid'>>;
  liveVoteResults?: Resolver<Array<IResolversTypes['LiveVoteResult']>, ParentType, ContextType, RequireFields<IQueryLiveVoteResultsArgs, 'seasonUid'>>;
  liveVotes?: Resolver<Array<IResolversTypes['LiveVote']>, ParentType, ContextType, RequireFields<IQueryLiveVotesArgs, 'seasonUid'>>;
  myLiveVote?: Resolver<Maybe<IResolversTypes['LiveVote']>, ParentType, ContextType, RequireFields<IQueryMyLiveVoteArgs, 'seasonUid'>>;
  myLiveVoteComments?: Resolver<Array<IResolversTypes['LiveVoteComment']>, ParentType, ContextType, RequireFields<IQueryMyLiveVoteCommentsArgs, 'seasonUid'>>;
  news?: Resolver<Array<IResolversTypes['News']>, ParentType, ContextType, RequireFields<IQueryNewsArgs, 'lang'>>;
  newsItem?: Resolver<Maybe<IResolversTypes['News']>, ParentType, ContextType, RequireFields<IQueryNewsItemArgs, 'slug'>>;
  newsItemByUid?: Resolver<Maybe<IResolversTypes['News']>, ParentType, ContextType, RequireFields<IQueryNewsItemByUidArgs, 'uid'>>;
  participants?: Resolver<Array<IResolversTypes['Company']>, ParentType, ContextType, Partial<IQueryParticipantsArgs>>;
  partners?: Resolver<Array<IResolversTypes['Partner']>, ParentType, ContextType, Partial<IQueryPartnersArgs>>;
  pressRelease?: Resolver<Maybe<IResolversTypes['PressRelease']>, ParentType, ContextType, RequireFields<IQueryPressReleaseArgs, 'uid'>>;
  pressReleases?: Resolver<Array<IResolversTypes['PressRelease']>, ParentType, ContextType, Partial<IQueryPressReleasesArgs>>;
  profile?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  resume?: Resolver<Maybe<IResolversTypes['Resume']>, ParentType, ContextType, RequireFields<IQueryResumeArgs, 'uid'>>;
  resumeFavourites?: Resolver<Array<IResolversTypes['String']>, ParentType, ContextType>;
  resumeInterests?: Resolver<IResolversTypes['SearchResponseStringArray'], ParentType, ContextType, RequireFields<IQueryResumeInterestsArgs, 'query'>>;
  resumeIsFavourite?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType, RequireFields<IQueryResumeIsFavouriteArgs, 'uid'>>;
  resumeTechnologies?: Resolver<IResolversTypes['SearchResponseStringArray'], ParentType, ContextType, RequireFields<IQueryResumeTechnologiesArgs, 'query'>>;
  resumes?: Resolver<IResolversTypes['ResumeList'], ParentType, ContextType, Partial<IQueryResumesArgs>>;
  resumesFavourites?: Resolver<IResolversTypes['ResumeList'], ParentType, ContextType, Partial<IQueryResumesFavouritesArgs>>;
  resumesScanned?: Resolver<IResolversTypes['ResumeList'], ParentType, ContextType, Partial<IQueryResumesScannedArgs>>;
  roles?: Resolver<Array<IResolversTypes['Role']>, ParentType, ContextType, Partial<IQueryRolesArgs>>;
  scannedUsers?: Resolver<Array<IResolversTypes['CompanyScannedUser']>, ParentType, ContextType, Partial<IQueryScannedUsersArgs>>;
  season?: Resolver<Maybe<IResolversTypes['Season']>, ParentType, ContextType, RequireFields<IQuerySeasonArgs, 'uid'>>;
  seasons?: Resolver<Array<IResolversTypes['Season']>, ParentType, ContextType, Partial<IQuerySeasonsArgs>>;
  sessions?: Resolver<Array<IResolversTypes['Session']>, ParentType, ContextType>;
  sessionsFor?: Resolver<Array<IResolversTypes['Session']>, ParentType, ContextType, RequireFields<IQuerySessionsForArgs, 'uid'>>;
  sponsors?: Resolver<Array<IResolversTypes['Sponsor']>, ParentType, ContextType, Partial<IQuerySponsorsArgs>>;
  talkCategories?: Resolver<Array<IResolversTypes['ApplicationTalkCategory']>, ParentType, ContextType, Partial<IQueryTalkCategoriesArgs>>;
  translation?: Resolver<Maybe<IResolversTypes['Translation']>, ParentType, ContextType, RequireFields<IQueryTranslationArgs, 'where'>>;
  translations?: Resolver<Array<IResolversTypes['Translation']>, ParentType, ContextType, Partial<IQueryTranslationsArgs>>;
  user?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType, RequireFields<IQueryUserArgs, 'uid'>>;
  userCompanyComponentRating?: Resolver<Maybe<IResolversTypes['UserCompanyComponentRating']>, ParentType, ContextType, RequireFields<IQueryUserCompanyComponentRatingArgs, 'companyUid' | 'component' | 'seasonUid'>>;
  userCompanyComponentRatings?: Resolver<Array<IResolversTypes['UserCompanyComponentRating']>, ParentType, ContextType, RequireFields<IQueryUserCompanyComponentRatingsArgs, 'companyUid' | 'seasonUid'>>;
  users?: Resolver<Array<IResolversTypes['User']>, ParentType, ContextType, Partial<IQueryUsersArgs>>;
};

export type IReservationItemResolvers<ContextType = any, ParentType extends IResolversParentTypes['ReservationItem'] = IResolversParentTypes['ReservationItem']> = {
  count?: Resolver<IResolversTypes['Float'], ParentType, ContextType>;
  type?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeResolvers<ContextType = any, ParentType extends IResolversParentTypes['Resume'] = IResolversParentTypes['Resume']> = {
  _count?: Resolver<Maybe<IResolversTypes['ResumeCount']>, ParentType, ContextType>;
  city?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  cv?: Resolver<Maybe<IResolversTypes['File']>, ParentType, ContextType>;
  extraField?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  faculty?: Resolver<Maybe<IResolversTypes['ResumeFaculty']>, ParentType, ContextType>;
  interests?: Resolver<Array<IResolversTypes['String']>, ParentType, ContextType>;
  projects?: Resolver<Array<IResolversTypes['ResumeProject']>, ParentType, ContextType>;
  studyYears?: Resolver<Array<IResolversTypes['ResumeStudyYear']>, ParentType, ContextType>;
  technologies?: Resolver<Array<IResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  user?: Resolver<IResolversTypes['User'], ParentType, ContextType>;
  volunteerExperiences?: Resolver<Array<IResolversTypes['ResumeVolunteerExperience']>, ParentType, ContextType>;
  workExperiences?: Resolver<Array<IResolversTypes['ResumeWorkExperience']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeCount'] = IResolversParentTypes['ResumeCount']> = {
  entryLog?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountEntryLogArgs>>;
  favouriteResumes?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountFavouriteResumesArgs>>;
  interests?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountInterestsArgs>>;
  projects?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountProjectsArgs>>;
  scannedResumes?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountScannedResumesArgs>>;
  studyYears?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountStudyYearsArgs>>;
  technologies?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountTechnologiesArgs>>;
  volunteerExperiences?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountVolunteerExperiencesArgs>>;
  workExperiences?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IResumeCountWorkExperiencesArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeCreateResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeCreateResponse'] = IResolversParentTypes['ResumeCreateResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['Resume']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeFacultyResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeFaculty'] = IResolversParentTypes['ResumeFaculty']> = {
  module?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  specialization?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeListResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeList'] = IResolversParentTypes['ResumeList']> = {
  items?: Resolver<Array<IResolversTypes['Resume']>, ParentType, ContextType>;
  total?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeProjectResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeProject'] = IResolversParentTypes['ResumeProject']> = {
  position?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  project?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  start?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  until?: Resolver<Maybe<IResolversTypes['DateTimeISO']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeStudyYearResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeStudyYear'] = IResolversParentTypes['ResumeStudyYear']> = {
  studyType?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  studyYear?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeVolunteerExperienceResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeVolunteerExperience'] = IResolversParentTypes['ResumeVolunteerExperience']> = {
  organisation?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  position?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  start?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  until?: Resolver<Maybe<IResolversTypes['DateTimeISO']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResumeWorkExperienceResolvers<ContextType = any, ParentType extends IResolversParentTypes['ResumeWorkExperience'] = IResolversParentTypes['ResumeWorkExperience']> = {
  company?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  position?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  start?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  until?: Resolver<Maybe<IResolversTypes['DateTimeISO']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IRoleResolvers<ContextType = any, ParentType extends IResolversParentTypes['Role'] = IResolversParentTypes['Role']> = {
  _count?: Resolver<Maybe<IResolversTypes['RoleCount']>, ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IRoleCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['RoleCount'] = IResolversParentTypes['RoleCount']> = {
  users?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IRoleCountUsersArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ISearchResponseStringArrayResolvers<ContextType = any, ParentType extends IResolversParentTypes['SearchResponseStringArray'] = IResolversParentTypes['SearchResponseStringArray']> = {
  entities?: Resolver<Array<IResolversTypes['String']>, ParentType, ContextType>;
  index?: Resolver<IResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ISeasonResolvers<ContextType = any, ParentType extends IResolversParentTypes['Season'] = IResolversParentTypes['Season']> = {
  _count?: Resolver<Maybe<IResolversTypes['SeasonCount']>, ParentType, ContextType>;
  applications?: Resolver<Array<IResolversTypes['CompanyApplication']>, ParentType, ContextType>;
  applicationsEditableFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  applicationsEditableUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  applicationsFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  applicationsUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  calendar?: Resolver<Array<IResolversTypes['CalendarItem']>, ParentType, ContextType>;
  companyComponentAverageRatings?: Resolver<Array<IResolversTypes['UserCompanyComponentRatingComponentAverage']>, ParentType, ContextType>;
  companyScannedCvs?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  endsAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  entryCount?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  eventFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  eventUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  feedbackFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  feedbackUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  panel?: Resolver<Maybe<IResolversTypes['CompanyPanel']>, ParentType, ContextType>;
  reservations?: Resolver<Array<IResolversTypes['ReservationItem']>, ParentType, ContextType>;
  scheduleFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  scheduleUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  showParticipantsFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  showParticipantsUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  showPartnersFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  showPartnersUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  showSponsorsFrom?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  showSponsorsUntil?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  startsAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ISeasonCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['SeasonCount'] = IResolversParentTypes['SeasonCount']> = {
  LiveVote?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountLiveVoteArgs>>;
  LiveVoteComment?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountLiveVoteCommentArgs>>;
  UserCompanyComponentRatingAveragesView?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountUserCompanyComponentRatingAveragesViewArgs>>;
  UserCompanyComponentRatings?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountUserCompanyComponentRatingsArgs>>;
  calendar?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountCalendarArgs>>;
  companies?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountCompaniesArgs>>;
  entryLog?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountEntryLogArgs>>;
  favouriteResumes?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountFavouriteResumesArgs>>;
  gateGuardianLog?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountGateGuardianLogArgs>>;
  partners?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountPartnersArgs>>;
  pressReleases?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountPressReleasesArgs>>;
  scannedResumes?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountScannedResumesArgs>>;
  scannedUsers?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountScannedUsersArgs>>;
  sponsors?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountSponsorsArgs>>;
  talkCategories?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<ISeasonCountTalkCategoriesArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ISessionResolvers<ContextType = any, ParentType extends IResolversParentTypes['Session'] = IResolversParentTypes['Session']> = {
  id?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  ip?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  loggedInAt?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  sessionId?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  userAgent?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ISponsorResolvers<ContextType = any, ParentType extends IResolversParentTypes['Sponsor'] = IResolversParentTypes['Sponsor']> = {
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  order?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  photo?: Resolver<Maybe<IResolversTypes['Image']>, ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ITranslationResolvers<ContextType = any, ParentType extends IResolversParentTypes['Translation'] = IResolversParentTypes['Translation']> = {
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  key?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  language?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  value?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IUpdatePasswordResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['UpdatePasswordResponse'] = IResolversParentTypes['UpdatePasswordResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IUpdateProfileResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['UpdateProfileResponse'] = IResolversParentTypes['UpdateProfileResponse']> = {
  entity?: Resolver<Maybe<IResolversTypes['User']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<IResolversTypes['FieldError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface IUploadScalarConfig extends GraphQLScalarTypeConfig<IResolversTypes['Upload'], any> {
  name: 'Upload';
}

export type IUserResolvers<ContextType = any, ParentType extends IResolversParentTypes['User'] = IResolversParentTypes['User']> = {
  _count?: Resolver<Maybe<IResolversTypes['UserCount']>, ParentType, ContextType>;
  companies?: Resolver<Array<IResolversTypes['Company']>, ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  email?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  eventLog?: Resolver<Array<IResolversTypes['EventLog']>, ParentType, ContextType>;
  firstName?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  language?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  phone?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  resume?: Resolver<Maybe<IResolversTypes['Resume']>, ParentType, ContextType>;
  roles?: Resolver<Array<IResolversTypes['Role']>, ParentType, ContextType>;
  uid?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IUserCompanyComponentRatingResolvers<ContextType = any, ParentType extends IResolversParentTypes['UserCompanyComponentRating'] = IResolversParentTypes['UserCompanyComponentRating']> = {
  comment?: Resolver<Maybe<IResolversTypes['String']>, ParentType, ContextType>;
  component?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  forCompany?: Resolver<IResolversTypes['Company'], ParentType, ContextType>;
  forSeason?: Resolver<IResolversTypes['Season'], ParentType, ContextType>;
  forUser?: Resolver<IResolversTypes['User'], ParentType, ContextType>;
  rating?: Resolver<IResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<IResolversTypes['DateTimeISO'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IUserCompanyComponentRatingComponentAverageResolvers<ContextType = any, ParentType extends IResolversParentTypes['UserCompanyComponentRatingComponentAverage'] = IResolversParentTypes['UserCompanyComponentRatingComponentAverage']> = {
  averageRating?: Resolver<IResolversTypes['Float'], ParentType, ContextType>;
  comments?: Resolver<Array<IResolversTypes['String']>, ParentType, ContextType>;
  component?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  ratingCount?: Resolver<Maybe<IResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IUserCountResolvers<ContextType = any, ParentType extends IResolversParentTypes['UserCount'] = IResolversParentTypes['UserCount']> = {
  LiveVote?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountLiveVoteArgs>>;
  LiveVoteComment?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountLiveVoteCommentArgs>>;
  News?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountNewsArgs>>;
  UserCompanyComponentRatings?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountUserCompanyComponentRatingsArgs>>;
  companies?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountCompaniesArgs>>;
  events?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountEventsArgs>>;
  files?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountFilesArgs>>;
  gateGuardianEntryLog?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountGateGuardianEntryLogArgs>>;
  gateGuardianScannedLog?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountGateGuardianScannedLogArgs>>;
  images?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountImagesArgs>>;
  passwordResets?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountPasswordResetsArgs>>;
  pressReleases?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountPressReleasesArgs>>;
  reservations?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountReservationsArgs>>;
  roles?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountRolesArgs>>;
  scannedEntries?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountScannedEntriesArgs>>;
  scannedUsers?: Resolver<IResolversTypes['Int'], ParentType, ContextType, Partial<IUserCountScannedUsersArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IValidateVatResponseResolvers<ContextType = any, ParentType extends IResolversParentTypes['ValidateVatResponse'] = IResolversParentTypes['ValidateVatResponse']> = {
  exists?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  info?: Resolver<Maybe<IResolversTypes['VatData']>, ParentType, ContextType>;
  valid?: Resolver<IResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IVatDataResolvers<ContextType = any, ParentType extends IResolversParentTypes['VatData'] = IResolversParentTypes['VatData']> = {
  address?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  legalName?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  vat?: Resolver<IResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IResolvers<ContextType = any> = {
  ApplicationCocktail?: IApplicationCocktailResolvers<ContextType>;
  ApplicationCocktailCount?: IApplicationCocktailCountResolvers<ContextType>;
  ApplicationPresenter?: IApplicationPresenterResolvers<ContextType>;
  ApplicationPresenterCount?: IApplicationPresenterCountResolvers<ContextType>;
  ApplicationTalk?: IApplicationTalkResolvers<ContextType>;
  ApplicationTalkCategory?: IApplicationTalkCategoryResolvers<ContextType>;
  ApplicationTalkCategoryCount?: IApplicationTalkCategoryCountResolvers<ContextType>;
  ApplicationTalkCount?: IApplicationTalkCountResolvers<ContextType>;
  ApplicationWorkshop?: IApplicationWorkshopResolvers<ContextType>;
  ApplicationWorkshopCount?: IApplicationWorkshopCountResolvers<ContextType>;
  AuthResponse?: IAuthResponseResolvers<ContextType>;
  Booth?: IBoothResolvers<ContextType>;
  CalendarEvent?: ICalendarEventResolvers<ContextType>;
  CalendarItem?: ICalendarItemResolvers<ContextType>;
  Company?: ICompanyResolvers<ContextType>;
  CompanyApplication?: ICompanyApplicationResolvers<ContextType>;
  CompanyApplicationApproval?: ICompanyApplicationApprovalResolvers<ContextType>;
  CompanyApplicationContactPerson?: ICompanyApplicationContactPersonResolvers<ContextType>;
  CompanyApplicationCount?: ICompanyApplicationCountResolvers<ContextType>;
  CompanyApplicationFeedback?: ICompanyApplicationFeedbackResolvers<ContextType>;
  CompanyCount?: ICompanyCountResolvers<ContextType>;
  CompanyPanel?: ICompanyPanelResolvers<ContextType>;
  CompanyPanelCount?: ICompanyPanelCountResolvers<ContextType>;
  CompanyProgram?: ICompanyProgramResolvers<ContextType>;
  CompanyScanUserQrResponse?: ICompanyScanUserQrResponseResolvers<ContextType>;
  CompanyScannedUser?: ICompanyScannedUserResolvers<ContextType>;
  CreateCompanyApplicationResponse?: ICreateCompanyApplicationResponseResolvers<ContextType>;
  CreateCompanyResponse?: ICreateCompanyResponseResolvers<ContextType>;
  CreatePartnerResponse?: ICreatePartnerResponseResolvers<ContextType>;
  CreatePressReleaseResponse?: ICreatePressReleaseResponseResolvers<ContextType>;
  CreateSponsorResponse?: ICreateSponsorResponseResolvers<ContextType>;
  DateTimeISO?: GraphQLScalarType;
  EditApprovedCompanyApplicationResponse?: IEditApprovedCompanyApplicationResponseResolvers<ContextType>;
  EventLog?: IEventLogResolvers<ContextType>;
  EventLogPaginationResult?: IEventLogPaginationResultResolvers<ContextType>;
  EventReservationResponse?: IEventReservationResponseResolvers<ContextType>;
  EventReservationStatus?: IEventReservationStatusResolvers<ContextType>;
  EventUserApplications?: IEventUserApplicationsResolvers<ContextType>;
  FieldError?: IFieldErrorResolvers<ContextType>;
  File?: IFileResolvers<ContextType>;
  FileCount?: IFileCountResolvers<ContextType>;
  GateGuardianLog?: IGateGuardianLogResolvers<ContextType>;
  GateGuardianScanResponse?: IGateGuardianScanResponseResolvers<ContextType>;
  Image?: IImageResolvers<ContextType>;
  ImageCount?: IImageCountResolvers<ContextType>;
  ImageVariation?: IImageVariationResolvers<ContextType>;
  ImageVariationCount?: IImageVariationCountResolvers<ContextType>;
  Industry?: IIndustryResolvers<ContextType>;
  IndustryCount?: IIndustryCountResolvers<ContextType>;
  LiveVote?: ILiveVoteResolvers<ContextType>;
  LiveVoteComment?: ILiveVoteCommentResolvers<ContextType>;
  LiveVoteResult?: ILiveVoteResultResolvers<ContextType>;
  Mutation?: IMutationResolvers<ContextType>;
  News?: INewsResolvers<ContextType>;
  NewsCreateResponse?: INewsCreateResponseResolvers<ContextType>;
  Partner?: IPartnerResolvers<ContextType>;
  PasswordResetUseResponse?: IPasswordResetUseResponseResolvers<ContextType>;
  PressRelease?: IPressReleaseResolvers<ContextType>;
  Query?: IQueryResolvers<ContextType>;
  ReservationItem?: IReservationItemResolvers<ContextType>;
  Resume?: IResumeResolvers<ContextType>;
  ResumeCount?: IResumeCountResolvers<ContextType>;
  ResumeCreateResponse?: IResumeCreateResponseResolvers<ContextType>;
  ResumeFaculty?: IResumeFacultyResolvers<ContextType>;
  ResumeList?: IResumeListResolvers<ContextType>;
  ResumeProject?: IResumeProjectResolvers<ContextType>;
  ResumeStudyYear?: IResumeStudyYearResolvers<ContextType>;
  ResumeVolunteerExperience?: IResumeVolunteerExperienceResolvers<ContextType>;
  ResumeWorkExperience?: IResumeWorkExperienceResolvers<ContextType>;
  Role?: IRoleResolvers<ContextType>;
  RoleCount?: IRoleCountResolvers<ContextType>;
  SearchResponseStringArray?: ISearchResponseStringArrayResolvers<ContextType>;
  Season?: ISeasonResolvers<ContextType>;
  SeasonCount?: ISeasonCountResolvers<ContextType>;
  Session?: ISessionResolvers<ContextType>;
  Sponsor?: ISponsorResolvers<ContextType>;
  Translation?: ITranslationResolvers<ContextType>;
  UpdatePasswordResponse?: IUpdatePasswordResponseResolvers<ContextType>;
  UpdateProfileResponse?: IUpdateProfileResponseResolvers<ContextType>;
  Upload?: GraphQLScalarType;
  User?: IUserResolvers<ContextType>;
  UserCompanyComponentRating?: IUserCompanyComponentRatingResolvers<ContextType>;
  UserCompanyComponentRatingComponentAverage?: IUserCompanyComponentRatingComponentAverageResolvers<ContextType>;
  UserCount?: IUserCountResolvers<ContextType>;
  ValidateVatResponse?: IValidateVatResponseResolvers<ContextType>;
  VatData?: IVatDataResolvers<ContextType>;
};


export const Frag_Season = gql`
    fragment frag_Season on Season {
  uid
  name
  startsAt
  endsAt
  applicationsFrom
  applicationsUntil
  applicationsEditableFrom
  applicationsEditableUntil
  showParticipantsFrom
  showParticipantsUntil
  showPartnersFrom
  showPartnersUntil
  showSponsorsFrom
  showSponsorsUntil
  eventFrom
  eventUntil
  feedbackFrom
  feedbackUntil
  scheduleFrom
  scheduleUntil
}
    `;
export const Frag_UserProfile = gql`
    fragment frag_UserProfile on User {
  uid
  name
  firstName
  lastName
  email
  phone
  language
  roles {
    name
  }
  companies {
    uid
    vat
    legalName
    brandName
    address
    website
    descriptionEn
    descriptionHr
    industry {
      name
    }
  }
}
    `;
export const Frag_ApplicationPresenter = gql`
    fragment frag_ApplicationPresenter on ApplicationPresenter {
  firstName
  lastName
  bioHr
  bioEn
  photo {
    name
    uid
    full {
      mimeType
    }
  }
}
    `;
export const Frag_AllFeedback = gql`
    fragment frag_AllFeedback on CompanyApplicationFeedback {
  applicationComments
  applicationRating
  attendanceRating
  dateComments
  dateRating
  experienceComments
  foodRating
  mostLiked
  onsiteRating
  overallComment
  overallRating
  recommended
  testimonial
  timeRating
  createdAt
  updatedAt
}
    `;
export const Frag_CompanyApplication = gql`
    fragment frag_CompanyApplication on CompanyApplication {
  booth
  wantsPanel
  wantsCocktail
  contactPerson {
    name
    email
    phone
  }
  talk {
    titleEn
    titleHr
    descriptionEn
    descriptionHr
    language
    category {
      name
    }
    presenters {
      ...frag_ApplicationPresenter
    }
  }
  workshop {
    titleEn
    titleHr
    descriptionEn
    descriptionHr
    language
    goal
    notesEn
    notesHr
    presenters {
      ...frag_ApplicationPresenter
    }
  }
  cocktail {
    name
    colour
  }
  panelParticipants {
    ...frag_ApplicationPresenter
  }
  approval {
    cocktail
    panel
    talkParticipants
    workshopParticipants
    booth
  }
  feedback {
    ...frag_AllFeedback
  }
}
    `;
export const Frag_Company = gql`
    fragment frag_Company on Company {
  uid
  legalName
  brandName
  descriptionEn
  descriptionHr
  address
  vat
  website
  industry {
    name
  }
}
    `;
export const Frag_News = gql`
    fragment frag_News on News {
  lang
  slug
  date
  photo {
    thumbUrl
    fullUrl
  }
  title
  description
  content
}
    `;
export const StoreCalendarEventsAllCalendarFragment = gql`
    fragment StoreCalendarEventsAllCalendarFragment on CalendarItem {
  uid
  location
  start
  end
  capacity
  forWorkshop {
    uid
    titleHr
    titleEn
    descriptionHr
    descriptionEn
    reservation
  }
  forTalk {
    uid
    titleHr
    titleEn
    descriptionHr
    descriptionEn
    reservation
  }
  forPanel {
    uid
    name
    description
    reservation
    companies {
      uid
      brandName
    }
  }
  companies {
    uid
    brandName
    rasterLogo {
      fullUrl
      thumbUrl
    }
  }
}
    `;
export const ComponentAdminSeasonRatingsCompaniesCompanyComments_Data = gql`
    query ComponentAdminSeasonRatingsCompaniesCompanyComments_Data($seasonUid: String!, $companyUid: String!) {
  companyComponentAverageRatings(seasonUid: $seasonUid, companyUid: $companyUid) {
    component
    averageRating
    comments
  }
}
    `;
export const Login = gql`
    mutation Login($password: String!, $identifier: String!) {
  login(password: $password, identifier: $identifier) {
    errors {
      field
      message
    }
    entity {
      ...frag_UserProfile
    }
  }
}
    ${Frag_UserProfile}`;
export const Register = gql`
    mutation Register($info: UserRegisterInput!) {
  register(info: $info) {
    errors {
      field
      message
    }
    entity {
      ...frag_UserProfile
    }
  }
}
    ${Frag_UserProfile}`;
export const Logout = gql`
    mutation Logout {
  logout
}
    `;
export const RequestPasswordReset = gql`
    mutation RequestPasswordReset($identifier: String!) {
  requestPasswordReset(identifier: $identifier)
}
    `;
export const CheckPasswordReset = gql`
    mutation CheckPasswordReset($token: String!) {
  checkPasswordReset(token: $token) {
    firstName
    lastName
    email
  }
}
    `;
export const UsePasswordReset = gql`
    mutation UsePasswordReset($info: PasswordResetUseInput!) {
  usePasswordReset(info: $info) {
    errors {
      field
      message
    }
    entity
  }
}
    `;
export const RequestPasswordResetFor = gql`
    mutation RequestPasswordResetFor($uid: String!) {
  requestPasswordResetFor(uid: $uid)
}
    `;
export const UpdateTranslation = gql`
    mutation UpdateTranslation($data: TranslationCreateInput!) {
  updateTranslation(data: $data) {
    key
    value
    language
  }
}
    `;
export const UpdateProfile = gql`
    mutation UpdateProfile($info: UserCreateInput!) {
  updateProfile(info: $info) {
    errors {
      field
      message
    }
    entity {
      ...frag_UserProfile
    }
  }
}
    ${Frag_UserProfile}`;
export const UpdateUser = gql`
    mutation UpdateUser($uid: String!, $info: UserUpdateInput!) {
  updateUser(uid: $uid, info: $info) {
    errors {
      field
      message
    }
    entity {
      uid
    }
  }
}
    `;
export const UpdatePassword = gql`
    mutation UpdatePassword($currentPassword: String!, $newPassword: String!, $newPasswordRepeat: String!) {
  updatePassword(
    currentPassword: $currentPassword
    newPassword: $newPassword
    newPasswordRepeat: $newPasswordRepeat
  ) {
    errors {
      field
      message
    }
    entity {
      ...frag_UserProfile
    }
  }
}
    ${Frag_UserProfile}`;
export const ValidateVat = gql`
    mutation ValidateVat($vat: String!) {
  validateVat(vat: $vat) {
    valid
    exists
    info {
      address
      legalName
      vat
    }
  }
}
    `;
export const CreateIndustry = gql`
    mutation CreateIndustry($name: String!) {
  createIndustry(name: $name) {
    name
  }
}
    `;
export const RenameIndustry = gql`
    mutation RenameIndustry($oldName: String!, $newName: String!) {
  renameIndustry(oldName: $oldName, newName: $newName) {
    name
  }
}
    `;
export const CreateTalkCategory = gql`
    mutation CreateTalkCategory($name: String!, $season: String!) {
  createTalkCategory(name: $name, season: $season) {
    name
  }
}
    `;
export const RenameTalkCategory = gql`
    mutation RenameTalkCategory($oldName: String!, $newName: String!, $season: String!) {
  renameTalkCategory(oldName: $oldName, newName: $newName, season: $season) {
    name
  }
}
    `;
export const RegisterCompany = gql`
    mutation RegisterCompany($info: CreateCompanyInput!) {
  registerCompany(info: $info) {
    errors {
      message
      field
    }
    entity {
      uid
      vat
      legalName
      address
      brandName
      descriptionEn
      descriptionHr
      industry {
        name
      }
    }
  }
}
    `;
export const UpdateCompanyInfo = gql`
    mutation UpdateCompanyInfo($info: CreateCompanyInput!) {
  updateCompanyInfo(info: $info) {
    errors {
      message
      field
    }
    entity {
      uid
      vat
      legalName
      address
      brandName
      descriptionEn
      descriptionHr
      industry {
        name
      }
    }
  }
}
    `;
export const CreatePressRelease = gql`
    mutation CreatePressRelease($info: PressReleaseWithFilesCreateInput!) {
  createPressRelease(info: $info) {
    entity {
      title
      published
    }
    errors {
      field
      message
    }
  }
}
    `;
export const UpdatePressRelease = gql`
    mutation UpdatePressRelease($uid: String!, $info: PressReleaseWithFilesCreateInput!) {
  updatePressRelease(uid: $uid, info: $info) {
    entity {
      title
      published
    }
    errors {
      field
      message
    }
  }
}
    `;
export const EditApprovedCompanyApplication = gql`
    mutation EditApprovedCompanyApplication($info: CompanyApplicationApprovedEditInput!) {
  editApprovedCompanyApplication(info: $info) {
    entity {
      talk {
        uid
      }
      workshop {
        uid
      }
    }
    errors {
      field
      message
    }
  }
}
    `;
export const UpdateResume = gql`
    mutation UpdateResume($info: ResumeCreateInput!) {
  updateResume(info: $info) {
    errors {
      field
      message
    }
    entity {
      uid
    }
  }
}
    `;
export const CreateNews = gql`
    mutation CreateNews($info: NewsCreateInput!) {
  createNews(info: $info) {
    errors {
      field
      message
    }
    entity {
      uid
      slug
    }
  }
}
    `;
export const EditNews = gql`
    mutation EditNews($uid: String!, $info: NewsCreateInput!) {
  editNews(uid: $uid, info: $info) {
    errors {
      field
      message
    }
    entity {
      uid
      ...frag_News
    }
  }
}
    ${Frag_News}`;
export const DeleteNews = gql`
    mutation DeleteNews($uid: String!) {
  deleteNews(uid: $uid)
}
    `;
export const Profile = gql`
    query Profile {
  profile {
    ...frag_UserProfile
  }
}
    ${Frag_UserProfile}`;
export const TranslationsFor = gql`
    query TranslationsFor($language: String!) {
  allTranslationsFor(language: $language) {
    key
    value
  }
}
    `;
export const InitialData = gql`
    query InitialData($language: String!) {
  profile {
    ...frag_UserProfile
  }
  allTranslationsFor(language: $language) {
    key
    value
  }
  currentSeason {
    ...frag_Season
  }
}
    ${Frag_UserProfile}
${Frag_Season}`;
export const PageIndexData = gql`
    query PageIndexData($language: String!) {
  sponsors {
    name
    url
    photo {
      thumbUrl
      fullUrl
    }
  }
  partners {
    name
    url
    photo {
      thumbUrl
      fullUrl
    }
  }
  news(lang: $language, filter: {take: 3}) {
    ...frag_News
  }
}
    ${Frag_News}`;
export const Company = gql`
    query Company($vat: String!) {
  company(vat: $vat) {
    ...frag_Company
  }
}
    ${Frag_Company}`;
export const CompanyInfo = gql`
    query CompanyInfo($uid: String!) {
  companyInfo(uid: $uid) {
    uid
    brandName
    descriptionEn
    descriptionHr
    website
    rasterLogo {
      thumbUrl
      fullUrl
    }
    program {
      booth
      talk {
        uid
        titleHr
        titleEn
        descriptionHr
        descriptionEn
        language
        reservation
        presenters {
          bioHr
          bioEn
          firstName
          lastName
          photo {
            thumbUrl
            fullUrl
          }
        }
        event {
          start
          end
          location
        }
      }
      workshop {
        uid
        titleHr
        titleEn
        descriptionHr
        descriptionEn
        language
        notesHr
        notesEn
        reservation
        presenters {
          firstName
          lastName
          bioHr
          bioEn
          photo {
            thumbUrl
            fullUrl
          }
        }
        event {
          start
          end
          location
        }
      }
      panelParticipants {
        firstName
        lastName
        bioHr
        bioEn
        photo {
          thumbUrl
          fullUrl
        }
      }
      panel {
        uid
        name
        description
        reservation
        companies {
          uid
          brandName
          rasterLogo {
            thumbUrl
            fullUrl
          }
        }
        event {
          start
          end
          location
        }
      }
    }
  }
}
    `;
export const Industries = gql`
    query Industries {
  industries {
    name
  }
}
    `;
export const TalkCategories = gql`
    query TalkCategories($season: String) {
  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {
    name
  }
}
    `;
export const PressRelease = gql`
    query PressRelease($uid: String!) {
  pressRelease(uid: $uid) {
    title
    published
    file {
      name
      mimeType
      uid
    }
    forSeason {
      uid
      name
    }
  }
}
    `;
export const PressReleases = gql`
    query PressReleases($season: String) {
  pressReleases(
    orderBy: {published: desc}
    where: {forSeason: {is: {uid: {equals: $season}}}}
  ) {
    uid
    title
    published
    file {
      uid
    }
    forSeason {
      uid
      name
    }
  }
}
    `;
export const AllNews = gql`
    query AllNews($filter: NewsFilter) {
  allNews(filter: $filter) {
    uid
    ...frag_News
  }
}
    ${Frag_News}`;
export const News = gql`
    query News($lang: String!, $filter: NewsFilter) {
  news(lang: $lang, filter: $filter) {
    ...frag_News
  }
}
    ${Frag_News}`;
export const NewsItem = gql`
    query NewsItem($slug: String!, $lang: String!, $filter: NewsFilter) {
  newsItem(slug: $slug) {
    ...frag_News
  }
  news(lang: $lang, filter: $filter) {
    ...frag_News
  }
}
    ${Frag_News}`;
export const NewsItemByUid = gql`
    query NewsItemByUid($uid: String!) {
  newsItemByUid(uid: $uid) {
    ...frag_News
    uid
    photo {
      uid
      name
      full {
        mimeType
      }
    }
  }
}
    ${Frag_News}`;
export const AdminInitialData = gql`
    query AdminInitialData {
  industries {
    name
  }
  seasons(orderBy: {endsAt: desc}) {
    ...frag_Season
  }
}
    ${Frag_Season}`;
export const AdminCompanyApplication = gql`
    query AdminCompanyApplication($company: String!, $season: String!) {
  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {
    name
  }
  booths {
    name
    key
  }
  companyApplicationFor(company: $company, season: $season) {
    ...frag_CompanyApplication
    forCompany {
      ...frag_Company
    }
  }
}
    ${Frag_CompanyApplication}
${Frag_ApplicationPresenter}
${Frag_AllFeedback}
${Frag_Company}`;
export const AdminCompanyApplications = gql`
    query AdminCompanyApplications($season: String!) {
  industries {
    name
  }
  talkCategories(where: {forSeason: {is: {uid: {equals: $season}}}}) {
    name
  }
  booths {
    key
    name
  }
  companyApplications(season: $season) {
    wantsCocktail
    wantsPanel
    booth
    talk {
      language
      titleEn
      category {
        name
      }
    }
    workshop {
      language
      titleEn
    }
    forCompany {
      uid
      brandName
      industry {
        name
      }
    }
    forSeason {
      uid
    }
  }
}
    `;
export const CurrentCompanyApplication = gql`
    query CurrentCompanyApplication {
  talkCategories {
    name
  }
  booths {
    name
    key
  }
  companyApplication {
    ...frag_CompanyApplication
  }
}
    ${Frag_CompanyApplication}
${Frag_ApplicationPresenter}
${Frag_AllFeedback}`;
export const MyResume = gql`
    query MyResume {
  profile {
    resume {
      uid
      updatedAt
      city
      cv {
        url
        name
        mimeType
      }
      faculty {
        name
        module
        specialization
      }
      interests
      technologies
      projects {
        project
        position
        start
        until
      }
      volunteerExperiences {
        organisation
        position
        start
        until
      }
      workExperiences {
        company
        position
        start
        until
      }
      studyYears {
        studyType
        studyYear
      }
      extraField
    }
  }
}
    `;
export const Resume = gql`
    query Resume($uid: String!) {
  resume(uid: $uid) {
    uid
    faculty {
      name
      module
    }
    user {
      name
      email
      phone
    }
    studyYears {
      studyYear
      studyType
    }
    projects {
      project
      position
      start
      until
    }
    technologies
    interests
    city
    cv {
      url
    }
    volunteerExperiences {
      organisation
      position
      start
      until
    }
    workExperiences {
      company
      position
      start
      until
    }
    extraField
  }
  resumeIsFavourite(uid: $uid)
}
    `;
export const ProfileBaseData = gql`
    query ProfileBaseData {
  booths {
    key
    name
  }
  companyApplication {
    workshop {
      titleEn
    }
    talk {
      titleEn
    }
    booth
    wantsPanel
    wantsCocktail
    approval {
      booth
      workshopParticipants
      talkParticipants
      panel
      cocktail
    }
    userApplications {
      workshop
      talk
    }
  }
  profile {
    resume {
      uid
    }
  }
  calendar {
    uid
    title
    forWorkshop {
      uid
      titleHr
      titleEn
      descriptionHr
      descriptionEn
      reservation
    }
    forTalk {
      uid
      titleHr
      titleEn
      descriptionHr
      descriptionEn
      reservation
    }
    forPanel {
      uid
      name
      description
      reservation
    }
  }
  currentSeason {
    ...frag_Season
    companyComponentAverageRatings {
      component
      averageRating
    }
  }
}
    ${Frag_Season}`;
export const AdminFeedbackInfo = gql`
    query AdminFeedbackInfo($seasonUid: String!) {
  companyApplications(
    season: $seasonUid
    orderBy: {forCompany: {brandName: desc}}
  ) {
    forCompany {
      uid
      brandName
    }
    feedback {
      ...frag_AllFeedback
    }
  }
}
    ${Frag_AllFeedback}`;
export const PageAdminSeasonScheduleBase = gql`
    query PageAdminSeasonScheduleBase($seasonUid: String!) {
  participants(season: $seasonUid) {
    uid
    brandName
    program {
      talk {
        uid
        event {
          uid
          type
          title
          start
          end
          location
          text
          grouped
        }
      }
      workshop {
        uid
        event {
          uid
          type
          title
          start
          end
          location
          text
          grouped
        }
      }
      panelParticipants {
        firstName
        lastName
        photo {
          fullUrl
          thumbUrl
        }
      }
    }
  }
  season(uid: $seasonUid) {
    panel {
      uid
      name
      description
      companies {
        uid
      }
      event {
        uid
        type
        title
        start
        end
        location
        text
        grouped
      }
    }
    calendar {
      uid
      type
      title
      start
      end
      location
      text
      grouped
    }
  }
}
    `;
export const AdminReservationsData = gql`
    query AdminReservationsData($seasonUid: String!) {
  season(uid: $seasonUid) {
    reservations {
      uid
      type
      count
    }
  }
  participants(season: $seasonUid) {
    uid
    vat
    brandName
    program {
      workshop {
        uid
        titleHr
      }
      talk {
        uid
        titleHr
      }
      panel {
        uid
        name
      }
    }
  }
}
    `;
export const PageScheduleBase = gql`
    query PageScheduleBase {
  calendar {
    uid
    title
    text
    start
    end
    type
    grouped
    location
    hasEvent
  }
}
    `;
export const PageAdminUserEditBase = gql`
    query PageAdminUserEditBase($uid: String!) {
  user(uid: $uid) {
    uid
    name
    firstName
    lastName
    email
    phone
    roles {
      name
    }
    eventLog {
      id
      date
      name
      data
    }
  }
  roles {
    name
  }
  sessionsFor(uid: $uid) {
    sessionId
    ip
    userAgent
    loggedInAt
  }
}
    `;
export const PageAdminSeasonSeasonData = gql`
    query PageAdminSeasonSeasonData($uid: String!) {
  season(uid: $uid) {
    uid
    name
    startsAt
    endsAt
    applicationsFrom
    applicationsUntil
  }
}
    `;
export const PageAdminSeasonApplicationsCompanyEdit_DeleteApplication = gql`
    mutation PageAdminSeasonApplicationsCompanyEdit_DeleteApplication($company: String!, $season: String!) {
  deleteCompanyApplicationFor(company: $company, season: $season)
}
    `;
export const PageAdminSeasonApplicationsCompanyEdit_UpsertApplication = gql`
    mutation PageAdminSeasonApplicationsCompanyEdit_UpsertApplication($company: String!, $season: String!, $info: CompanyApplicationCreateInput!) {
  createCompanyApplicationFor(company: $company, season: $season, info: $info) {
    entity {
      talk {
        uid
      }
      workshop {
        uid
      }
      wantsCocktail
      wantsPanel
    }
    errors {
      field
      message
    }
  }
}
    `;
export const PageAdminSeasonApplicationsApproval_Base = gql`
    query PageAdminSeasonApplicationsApproval_Base($season: String!) {
  season(uid: $season) {
    name
    startsAt
    endsAt
    applications {
      wantsPanel
      wantsCocktail
      booth
      talk {
        titleEn
        titleHr
      }
      workshop {
        titleEn
        titleHr
      }
      forCompany {
        uid
        legalName
        brandName
      }
      approval {
        booth
        talkParticipants
        workshopParticipants
        panel
        cocktail
        logoHidden
      }
    }
  }
}
    `;
export const PageAdminSeasonApplicationsApproval_ApproveCompanyApplications = gql`
    mutation PageAdminSeasonApplicationsApproval_ApproveCompanyApplications($companies: [ApproveCompanyApplicationsInput!]!, $season: String!) {
  approveCompanyApplications(companies: $companies, season: $season) {
    booth
    talkParticipants
    workshopParticipants
    panel
    cocktail
    forApplication {
      forCompany {
        uid
      }
    }
  }
}
    `;
export const PageAdminSeasonLiveVoteResults_Data = gql`
    query PageAdminSeasonLiveVoteResults_Data($seasonUid: String!) {
  liveVoteResults(seasonUid: $seasonUid) {
    option
    voteCount
  }
  liveVoteComments(seasonUid: $seasonUid) {
    id
    comment
    createdAt
    forUser {
      name
    }
  }
}
    `;
export const PageAdminSeasonLiveVoteResults_DeleteComment = gql`
    mutation PageAdminSeasonLiveVoteResults_DeleteComment($commentId: Int!) {
  deleteLiveVoteComment(commentId: $commentId)
}
    `;
export const PageAdminSeasonRatingsCompanies_Data = gql`
    query PageAdminSeasonRatingsCompanies_Data($season: String!) {
  season(uid: $season) {
    applications {
      forCompany {
        uid
        legalName
        brandName
        ratings {
          averageRating
          component
        }
      }
    }
  }
}
    `;
export const PageAdminSeasonRatingsQrCodesData = gql`
    query PageAdminSeasonRatingsQrCodesData($season: String!) {
  season(uid: $season) {
    name
    startsAt
    endsAt
    applications {
      forCompany {
        uid
        legalName
        brandName
      }
      approval {
        booth
        talkParticipants
        workshopParticipants
        panel
      }
    }
  }
}
    `;
export const PageAdminSeasonReservationsScannedData = gql`
    query PageAdminSeasonReservationsScannedData($season: String!) {
  gateGuardianScanList(season: $season) {
    eventType
    eventId
    forUser {
      uid
      name
      email
      phone
    }
    scannedBy {
      uid
      name
    }
    forCalendarItem {
      uid
      companies {
        uid
        brandName
      }
      forTalk {
        uid
        titleHr
        titleEn
      }
      forWorkshop {
        uid
        titleHr
        titleEn
      }
      forPanel {
        uid
        name
      }
    }
    scannedAt
  }
}
    `;
export const PageAdminUsersScanners = gql`
    query PageAdminUsersScanners {
  users {
    uid
    name
    email
    roles {
      name
    }
  }
}
    `;
export const PageAdminUsersScannersUpdateIsScanner = gql`
    mutation PageAdminUsersScannersUpdateIsScanner($uid: String!, $isScanner: Boolean!) {
  updateScannerStatusFor(uid: $uid, isScanner: $isScanner)
}
    `;
export const PageCalendarEventData = gql`
    query PageCalendarEventData($uid: String!) {
  calendarItem(uid: $uid) {
    hasEvent
    type
  }
  calendarItemCompanyUid(uid: $uid)
}
    `;
export const PageCompanyUidRate_Data = gql`
    query PageCompanyUidRate_Data($seasonUid: String!, $companyUid: String!, $component: String!) {
  userCompanyComponentRating(
    seasonUid: $seasonUid
    companyUid: $companyUid
    component: $component
  ) {
    rating
    comment
  }
  currentSeason {
    eventFrom
    eventUntil
  }
}
    `;
export const PageCompanyUidRate_Upsert = gql`
    mutation PageCompanyUidRate_Upsert($seasonUid: String!, $companyUid: String!, $component: String!, $rating: Int!, $comment: String) {
  upsertUserCompanyComponentRating(
    seasonUid: $seasonUid
    companyUid: $companyUid
    component: $component
    rating: $rating
    comment: $comment
  ) {
    rating
    comment
  }
}
    `;
export const PageCompanyUidRate_Delete = gql`
    mutation PageCompanyUidRate_Delete($seasonUid: String!, $companyUid: String!, $component: String!) {
  deleteUserCompanyComponentRating(
    seasonUid: $seasonUid
    companyUid: $companyUid
    component: $component
  )
}
    `;
export const PageGateGuardian_Scan = gql`
    mutation PageGateGuardian_Scan($userUid: String!, $eventUid: String!, $eventType: String!) {
  gateGuardianScan(userUid: $userUid, eventUid: $eventUid, eventType: $eventType) {
    user {
      name
      phone
    }
    hasReservation
    alreadyScanned
    error
  }
}
    `;
export const PageGateGuardian_EventList = gql`
    query PageGateGuardian_EventList {
  calendar {
    uid
    title
    text
    type
  }
}
    `;
export const PageLiveVoteSeason_Data = gql`
    query PageLiveVoteSeason_Data($uid: String!) {
  season(uid: $uid) {
    uid
    name
    startsAt
    endsAt
    applicationsFrom
    applicationsUntil
    applicationsEditableFrom
    applicationsEditableUntil
    showParticipantsFrom
    showParticipantsUntil
    showPartnersFrom
    showPartnersUntil
    showSponsorsFrom
    showSponsorsUntil
    eventFrom
    eventUntil
    feedbackFrom
    feedbackUntil
    scheduleFrom
    scheduleUntil
  }
}
    `;
export const PageLiveVoteSeasonIndex_Data = gql`
    query PageLiveVoteSeasonIndex_Data($seasonUid: String!) {
  myLiveVote(seasonUid: $seasonUid) {
    option
  }
  myLiveVoteComments(seasonUid: $seasonUid) {
    id
    comment
  }
}
    `;
export const PageLiveVoteSeasonIndex_DeleteComment = gql`
    mutation PageLiveVoteSeasonIndex_DeleteComment($commentId: Int!) {
  deleteLiveVoteComment(commentId: $commentId)
}
    `;
export const PageLiveVoteSeasonIndex_SubmitComment = gql`
    mutation PageLiveVoteSeasonIndex_SubmitComment($seasonUid: String!, $comment: String!) {
  createLiveVoteComment(seasonUid: $seasonUid, comment: $comment) {
    id
    comment
  }
}
    `;
export const PageLiveVoteSeasonIndex_SubmitVote = gql`
    mutation PageLiveVoteSeasonIndex_SubmitVote($seasonUid: String!, $vote: String!) {
  createLiveVote(seasonUid: $seasonUid, vote: $vote) {
    option
  }
}
    `;
export const PageLiveVoteSeasonViewLiveVoteResults_LiveVoteResults = gql`
    query PageLiveVoteSeasonViewLiveVoteResults_LiveVoteResults($seasonUid: String!) {
  liveVoteResults(seasonUid: $seasonUid) {
    option
    voteCount
  }
}
    `;
export const PageParticipants_Base = gql`
    query PageParticipants_Base {
  participants {
    uid
    website
    brandName
    descriptionEn
    descriptionHr
    logoHidden
    rasterLogo {
      thumbUrl
      fullUrl
    }
    ratings {
      averageRating
      ratingCount
      component
    }
  }
}
    `;
export const PageParticipants_Ratings = gql`
    query PageParticipants_Ratings {
  participants {
    uid
    brandName
    ratings {
      averageRating
      ratingCount
      component
    }
  }
}
    `;
export const PageProfileMeCompanyScanUserQrScan = gql`
    mutation PageProfileMeCompanyScanUserQrScan($userUid: String!) {
  scanUserQr(userUid: $userUid) {
    user {
      uid
      name
      email
    }
    isStarred
    alreadyScanned
    note
    error
  }
}
    `;
export const PageProfileMeCompanyScanUserQrRefineQrScan = gql`
    mutation PageProfileMeCompanyScanUserQrRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {
  scanUserQrRefine(userUid: $userUid, refineData: $refineData) {
    user {
      uid
      name
      email
    }
    isStarred
    note
    error
  }
}
    `;
export const PageProfileMeCompanyScansListData = gql`
    query PageProfileMeCompanyScansListData($companyUid: String, $seasonUid: String) {
  scannedUsers(companyUid: $companyUid, seasonUid: $seasonUid) {
    user {
      uid
      name
      email
      phone
    }
    note
    isStarred
    scannedAt
  }
}
    `;
export const PageProfileMeCompanyScansListRefineQrScan = gql`
    mutation PageProfileMeCompanyScansListRefineQrScan($userUid: String!, $refineData: CompanyScanUserQrRefineData!) {
  scanUserQrRefine(userUid: $userUid, refineData: $refineData) {
    user {
      uid
      name
      email
      phone
    }
    isStarred
    note
    error
  }
}
    `;
export const PageProfileMeCompanySignup_Data = gql`
    query PageProfileMeCompanySignup_Data {
  talkCategories {
    name
  }
  booths {
    name
    key
  }
  companyApplication {
    booth
    wantsPanel
    wantsCocktail
    contactPerson {
      name
      email
      phone
    }
    talk {
      titleEn
      titleHr
      descriptionEn
      descriptionHr
      language
      category {
        name
      }
      presenters {
        firstName
        lastName
        bioHr
        bioEn
        photo {
          name
          uid
          full {
            mimeType
          }
        }
      }
    }
    workshop {
      titleEn
      titleHr
      descriptionEn
      descriptionHr
      language
      goal
      notesEn
      notesHr
      presenters {
        firstName
        lastName
        bioHr
        bioEn
        photo {
          name
          uid
          full {
            mimeType
          }
        }
      }
    }
  }
}
    `;
export const PageProfileMeCompanySignup_CreateApplication = gql`
    mutation PageProfileMeCompanySignup_CreateApplication($info: CompanyApplicationCreateInput!) {
  createCompanyApplication(info: $info) {
    entity {
      talk {
        uid
      }
      workshop {
        uid
      }
      wantsCocktail
      wantsPanel
    }
    errors {
      field
      message
    }
  }
}
    `;
export const StoreCalendarEventToggleReservation = gql`
    mutation StoreCalendarEventToggleReservation($input: EventReservationUpdateInput!) {
  updateEventReservation(input: $input) {
    entity {
      status
    }
    errors {
      field
      message
    }
  }
}
    `;
export const StoreCalendarEventsAll = gql`
    query StoreCalendarEventsAll {
  calendar {
    ...StoreCalendarEventsAllCalendarFragment
  }
  currentSeason {
    reservations {
      uid
      type
      count
    }
  }
}
    ${StoreCalendarEventsAllCalendarFragment}`;
export const ResumeSetIsFavourite = gql`
    mutation ResumeSetIsFavourite($uid: String!, $isFavourite: Boolean!) {
  resumeSetIsFavourite(uid: $uid, isFavourite: $isFavourite)
}
    `;